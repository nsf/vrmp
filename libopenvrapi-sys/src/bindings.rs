/* automatically generated by rust-bindgen 0.59.2 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 33;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type PropertyContainerHandle_t = u64;
pub type PropertyTypeTag_t = u32;
pub type VRActionHandle_t = u64;
pub type VRActionSetHandle_t = u64;
pub type VRInputValueHandle_t = u64;
pub type PathHandle_t = u64;
pub const k_nDriverNone: ::std::os::raw::c_ulong = 4294967295;
pub const k_unMaxDriverDebugResponseSize: ::std::os::raw::c_ulong = 32768;
pub const k_unTrackedDeviceIndex_Hmd: ::std::os::raw::c_ulong = 0;
pub const k_unMaxTrackedDeviceCount: ::std::os::raw::c_ulong = 64;
pub const k_unTrackedDeviceIndexOther: ::std::os::raw::c_ulong = 4294967294;
pub const k_unTrackedDeviceIndexInvalid: ::std::os::raw::c_ulong = 4294967295;
pub const k_ulInvalidPropertyContainer: ::std::os::raw::c_ulonglong = 0;
pub const k_unInvalidPropertyTag: ::std::os::raw::c_ulong = 0;
pub const k_ulInvalidDriverHandle: ::std::os::raw::c_ulonglong = 0;
pub const k_unFloatPropertyTag: ::std::os::raw::c_ulong = 1;
pub const k_unInt32PropertyTag: ::std::os::raw::c_ulong = 2;
pub const k_unUint64PropertyTag: ::std::os::raw::c_ulong = 3;
pub const k_unBoolPropertyTag: ::std::os::raw::c_ulong = 4;
pub const k_unStringPropertyTag: ::std::os::raw::c_ulong = 5;
pub const k_unErrorPropertyTag: ::std::os::raw::c_ulong = 6;
pub const k_unDoublePropertyTag: ::std::os::raw::c_ulong = 7;
pub const k_unHmdMatrix34PropertyTag: ::std::os::raw::c_ulong = 20;
pub const k_unHmdMatrix44PropertyTag: ::std::os::raw::c_ulong = 21;
pub const k_unHmdVector3PropertyTag: ::std::os::raw::c_ulong = 22;
pub const k_unHmdVector4PropertyTag: ::std::os::raw::c_ulong = 23;
pub const k_unHmdVector2PropertyTag: ::std::os::raw::c_ulong = 24;
pub const k_unHmdQuadPropertyTag: ::std::os::raw::c_ulong = 25;
pub const k_unHiddenAreaPropertyTag: ::std::os::raw::c_ulong = 30;
pub const k_unPathHandleInfoTag: ::std::os::raw::c_ulong = 31;
pub const k_unActionPropertyTag: ::std::os::raw::c_ulong = 32;
pub const k_unInputValuePropertyTag: ::std::os::raw::c_ulong = 33;
pub const k_unWildcardPropertyTag: ::std::os::raw::c_ulong = 34;
pub const k_unHapticVibrationPropertyTag: ::std::os::raw::c_ulong = 35;
pub const k_unSkeletonPropertyTag: ::std::os::raw::c_ulong = 36;
pub const k_unSpatialAnchorPosePropertyTag: ::std::os::raw::c_ulong = 40;
pub const k_unJsonPropertyTag: ::std::os::raw::c_ulong = 41;
pub const k_unActiveActionSetPropertyTag: ::std::os::raw::c_ulong = 42;
pub const k_unOpenVRInternalReserved_Start: ::std::os::raw::c_ulong = 1000;
pub const k_unOpenVRInternalReserved_End: ::std::os::raw::c_ulong = 10000;
pub const k_unMaxPropertyStringSize: ::std::os::raw::c_ulong = 32768;
pub const k_ulInvalidActionHandle: ::std::os::raw::c_ulonglong = 0;
pub const k_ulInvalidActionSetHandle: ::std::os::raw::c_ulonglong = 0;
pub const k_ulInvalidInputValueHandle: ::std::os::raw::c_ulonglong = 0;
pub const k_unControllerStateAxisCount: ::std::os::raw::c_ulong = 5;
pub const k_ulOverlayHandleInvalid: ::std::os::raw::c_ulonglong = 0;
pub const k_unMaxDistortionFunctionParameters: ::std::os::raw::c_ulong = 8;
pub const k_unScreenshotHandleInvalid: ::std::os::raw::c_ulong = 0;
pub const IVRSystem_Version: &[u8; 14usize] = b"IVRSystem_022\0";
pub const IVRExtendedDisplay_Version: &[u8; 23usize] = b"IVRExtendedDisplay_001\0";
pub const IVRTrackedCamera_Version: &[u8; 21usize] = b"IVRTrackedCamera_006\0";
pub const k_unMaxApplicationKeyLength: ::std::os::raw::c_ulong = 128;
pub const k_pch_MimeType_HomeApp: &[u8; 8usize] = b"vr/home\0";
pub const k_pch_MimeType_GameTheater: &[u8; 16usize] = b"vr/game_theater\0";
pub const IVRApplications_Version: &[u8; 20usize] = b"IVRApplications_007\0";
pub const IVRChaperone_Version: &[u8; 17usize] = b"IVRChaperone_004\0";
pub const IVRChaperoneSetup_Version: &[u8; 22usize] = b"IVRChaperoneSetup_006\0";
pub const IVRCompositor_Version: &[u8; 18usize] = b"IVRCompositor_027\0";
pub const k_unVROverlayMaxKeyLength: ::std::os::raw::c_ulong = 128;
pub const k_unVROverlayMaxNameLength: ::std::os::raw::c_ulong = 128;
pub const k_unMaxOverlayCount: ::std::os::raw::c_ulong = 128;
pub const k_unMaxOverlayIntersectionMaskPrimitivesCount: ::std::os::raw::c_ulong = 32;
pub const IVROverlay_Version: &[u8; 15usize] = b"IVROverlay_025\0";
pub const IVROverlayView_Version: &[u8; 19usize] = b"IVROverlayView_003\0";
pub const k_unHeadsetViewMaxWidth: ::std::os::raw::c_ulong = 3840;
pub const k_unHeadsetViewMaxHeight: ::std::os::raw::c_ulong = 2160;
pub const k_pchHeadsetViewOverlayKey: &[u8; 19usize] = b"system.HeadsetView\0";
pub const IVRHeadsetView_Version: &[u8; 19usize] = b"IVRHeadsetView_001\0";
pub const k_pch_Controller_Component_GDC2015: &[u8; 8usize] = b"gdc2015\0";
pub const k_pch_Controller_Component_Base: &[u8; 5usize] = b"base\0";
pub const k_pch_Controller_Component_Tip: &[u8; 4usize] = b"tip\0";
pub const k_pch_Controller_Component_HandGrip: &[u8; 9usize] = b"handgrip\0";
pub const k_pch_Controller_Component_Status: &[u8; 7usize] = b"status\0";
pub const IVRRenderModels_Version: &[u8; 20usize] = b"IVRRenderModels_006\0";
pub const k_unNotificationTextMaxSize: ::std::os::raw::c_ulong = 256;
pub const IVRNotifications_Version: &[u8; 21usize] = b"IVRNotifications_002\0";
pub const k_unMaxSettingsKeyLength: ::std::os::raw::c_ulong = 128;
pub const IVRSettings_Version: &[u8; 16usize] = b"IVRSettings_003\0";
pub const k_pch_SteamVR_Section: &[u8; 8usize] = b"steamvr\0";
pub const k_pch_SteamVR_RequireHmd_String: &[u8; 11usize] = b"requireHmd\0";
pub const k_pch_SteamVR_ForcedDriverKey_String: &[u8; 13usize] = b"forcedDriver\0";
pub const k_pch_SteamVR_ForcedHmdKey_String: &[u8; 10usize] = b"forcedHmd\0";
pub const k_pch_SteamVR_DisplayDebug_Bool: &[u8; 13usize] = b"displayDebug\0";
pub const k_pch_SteamVR_DebugProcessPipe_String: &[u8; 17usize] = b"debugProcessPipe\0";
pub const k_pch_SteamVR_DisplayDebugX_Int32: &[u8; 14usize] = b"displayDebugX\0";
pub const k_pch_SteamVR_DisplayDebugY_Int32: &[u8; 14usize] = b"displayDebugY\0";
pub const k_pch_SteamVR_SendSystemButtonToAllApps_Bool: &[u8; 26usize] =
    b"sendSystemButtonToAllApps\0";
pub const k_pch_SteamVR_LogLevel_Int32: &[u8; 9usize] = b"loglevel\0";
pub const k_pch_SteamVR_IPD_Float: &[u8; 4usize] = b"ipd\0";
pub const k_pch_SteamVR_Background_String: &[u8; 11usize] = b"background\0";
pub const k_pch_SteamVR_BackgroundUseDomeProjection_Bool: &[u8; 28usize] =
    b"backgroundUseDomeProjection\0";
pub const k_pch_SteamVR_BackgroundCameraHeight_Float: &[u8; 23usize] = b"backgroundCameraHeight\0";
pub const k_pch_SteamVR_BackgroundDomeRadius_Float: &[u8; 21usize] = b"backgroundDomeRadius\0";
pub const k_pch_SteamVR_GridColor_String: &[u8; 10usize] = b"gridColor\0";
pub const k_pch_SteamVR_PlayAreaColor_String: &[u8; 14usize] = b"playAreaColor\0";
pub const k_pch_SteamVR_TrackingLossColor_String: &[u8; 18usize] = b"trackingLossColor\0";
pub const k_pch_SteamVR_ShowStage_Bool: &[u8; 10usize] = b"showStage\0";
pub const k_pch_SteamVR_DrawTrackingReferences_Bool: &[u8; 23usize] = b"drawTrackingReferences\0";
pub const k_pch_SteamVR_ActivateMultipleDrivers_Bool: &[u8; 24usize] = b"activateMultipleDrivers\0";
pub const k_pch_SteamVR_UsingSpeakers_Bool: &[u8; 14usize] = b"usingSpeakers\0";
pub const k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float: &[u8; 32usize] =
    b"speakersForwardYawOffsetDegrees\0";
pub const k_pch_SteamVR_BaseStationPowerManagement_Int32: &[u8; 27usize] =
    b"basestationPowerManagement\0";
pub const k_pch_SteamVR_ShowBaseStationPowerManagementTip_Int32: &[u8; 34usize] =
    b"ShowBaseStationPowerManagementTip\0";
pub const k_pch_SteamVR_NeverKillProcesses_Bool: &[u8; 19usize] = b"neverKillProcesses\0";
pub const k_pch_SteamVR_SupersampleScale_Float: &[u8; 17usize] = b"supersampleScale\0";
pub const k_pch_SteamVR_MaxRecommendedResolution_Int32: &[u8; 25usize] =
    b"maxRecommendedResolution\0";
pub const k_pch_SteamVR_MotionSmoothing_Bool: &[u8; 16usize] = b"motionSmoothing\0";
pub const k_pch_SteamVR_MotionSmoothingOverride_Int32: &[u8; 24usize] =
    b"motionSmoothingOverride\0";
pub const k_pch_SteamVR_FramesToThrottle_Int32: &[u8; 17usize] = b"framesToThrottle\0";
pub const k_pch_SteamVR_AdditionalFramesToPredict_Int32: &[u8; 26usize] =
    b"additionalFramesToPredict\0";
pub const k_pch_SteamVR_DisableAsyncReprojection_Bool: &[u8; 13usize] = b"disableAsync\0";
pub const k_pch_SteamVR_ForceFadeOnBadTracking_Bool: &[u8; 23usize] = b"forceFadeOnBadTracking\0";
pub const k_pch_SteamVR_DefaultMirrorView_Int32: &[u8; 11usize] = b"mirrorView\0";
pub const k_pch_SteamVR_ShowLegacyMirrorView_Bool: &[u8; 21usize] = b"showLegacyMirrorView\0";
pub const k_pch_SteamVR_MirrorViewVisibility_Bool: &[u8; 15usize] = b"showMirrorView\0";
pub const k_pch_SteamVR_MirrorViewDisplayMode_Int32: &[u8; 22usize] = b"mirrorViewDisplayMode\0";
pub const k_pch_SteamVR_MirrorViewEye_Int32: &[u8; 14usize] = b"mirrorViewEye\0";
pub const k_pch_SteamVR_MirrorViewGeometry_String: &[u8; 19usize] = b"mirrorViewGeometry\0";
pub const k_pch_SteamVR_MirrorViewGeometryMaximized_String: &[u8; 28usize] =
    b"mirrorViewGeometryMaximized\0";
pub const k_pch_SteamVR_PerfGraphVisibility_Bool: &[u8; 14usize] = b"showPerfGraph\0";
pub const k_pch_SteamVR_StartMonitorFromAppLaunch: &[u8; 26usize] = b"startMonitorFromAppLaunch\0";
pub const k_pch_SteamVR_StartCompositorFromAppLaunch_Bool: &[u8; 29usize] =
    b"startCompositorFromAppLaunch\0";
pub const k_pch_SteamVR_StartDashboardFromAppLaunch_Bool: &[u8; 28usize] =
    b"startDashboardFromAppLaunch\0";
pub const k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool: &[u8; 30usize] =
    b"startOverlayAppsFromDashboard\0";
pub const k_pch_SteamVR_EnableHomeApp: &[u8; 14usize] = b"enableHomeApp\0";
pub const k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32: &[u8; 28usize] =
    b"CycleBackgroundImageTimeSec\0";
pub const k_pch_SteamVR_RetailDemo_Bool: &[u8; 11usize] = b"retailDemo\0";
pub const k_pch_SteamVR_IpdOffset_Float: &[u8; 10usize] = b"ipdOffset\0";
pub const k_pch_SteamVR_AllowSupersampleFiltering_Bool: &[u8; 26usize] =
    b"allowSupersampleFiltering\0";
pub const k_pch_SteamVR_SupersampleManualOverride_Bool: &[u8; 26usize] =
    b"supersampleManualOverride\0";
pub const k_pch_SteamVR_EnableLinuxVulkanAsync_Bool: &[u8; 23usize] = b"enableLinuxVulkanAsync\0";
pub const k_pch_SteamVR_AllowDisplayLockedMode_Bool: &[u8; 23usize] = b"allowDisplayLockedMode\0";
pub const k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool: &[u8; 44usize] =
    b"haveStartedTutorialForNativeChaperoneDriver\0";
pub const k_pch_SteamVR_ForceWindows32bitVRMonitor: &[u8; 27usize] =
    b"forceWindows32BitVRMonitor\0";
pub const k_pch_SteamVR_DebugInputBinding: &[u8; 18usize] = b"debugInputBinding\0";
pub const k_pch_SteamVR_DoNotFadeToGrid: &[u8; 16usize] = b"doNotFadeToGrid\0";
pub const k_pch_SteamVR_RenderCameraMode: &[u8; 17usize] = b"renderCameraMode\0";
pub const k_pch_SteamVR_EnableSharedResourceJournaling: &[u8; 31usize] =
    b"enableSharedResourceJournaling\0";
pub const k_pch_SteamVR_EnableSafeMode: &[u8; 15usize] = b"enableSafeMode\0";
pub const k_pch_SteamVR_PreferredRefreshRate: &[u8; 21usize] = b"preferredRefreshRate\0";
pub const k_pch_SteamVR_LastVersionNotice: &[u8; 18usize] = b"lastVersionNotice\0";
pub const k_pch_SteamVR_LastVersionNoticeDate: &[u8; 22usize] = b"lastVersionNoticeDate\0";
pub const k_pch_SteamVR_HmdDisplayColorGainR_Float: &[u8; 21usize] = b"hmdDisplayColorGainR\0";
pub const k_pch_SteamVR_HmdDisplayColorGainG_Float: &[u8; 21usize] = b"hmdDisplayColorGainG\0";
pub const k_pch_SteamVR_HmdDisplayColorGainB_Float: &[u8; 21usize] = b"hmdDisplayColorGainB\0";
pub const k_pch_SteamVR_CustomIconStyle_String: &[u8; 16usize] = b"customIconStyle\0";
pub const k_pch_SteamVR_CustomOffIconStyle_String: &[u8; 19usize] = b"customOffIconStyle\0";
pub const k_pch_SteamVR_CustomIconForceUpdate_String: &[u8; 22usize] = b"customIconForceUpdate\0";
pub const k_pch_SteamVR_AllowGlobalActionSetPriority: &[u8; 24usize] = b"globalActionSetPriority\0";
pub const k_pch_SteamVR_OverlayRenderQuality: &[u8; 23usize] = b"overlayRenderQuality_2\0";
pub const k_pch_SteamVR_BlockOculusSDKOnOpenVRLaunchOption_Bool: &[u8; 35usize] =
    b"blockOculusSDKOnOpenVRLaunchOption\0";
pub const k_pch_SteamVR_BlockOculusSDKOnAllLaunches_Bool: &[u8; 28usize] =
    b"blockOculusSDKOnAllLaunches\0";
pub const k_pch_SteamVR_HDCPLegacyCompatibility_Bool: &[u8; 26usize] =
    b"hdcp14legacyCompatibility\0";
pub const k_pch_SteamVR_UsePrism_Bool: &[u8; 9usize] = b"usePrism\0";
pub const k_pch_DirectMode_Section: &[u8; 12usize] = b"direct_mode\0";
pub const k_pch_DirectMode_Enable_Bool: &[u8; 7usize] = b"enable\0";
pub const k_pch_DirectMode_Count_Int32: &[u8; 6usize] = b"count\0";
pub const k_pch_DirectMode_EdidVid_Int32: &[u8; 8usize] = b"edidVid\0";
pub const k_pch_DirectMode_EdidPid_Int32: &[u8; 8usize] = b"edidPid\0";
pub const k_pch_Lighthouse_Section: &[u8; 18usize] = b"driver_lighthouse\0";
pub const k_pch_Lighthouse_DisableIMU_Bool: &[u8; 11usize] = b"disableimu\0";
pub const k_pch_Lighthouse_DisableIMUExceptHMD_Bool: &[u8; 20usize] = b"disableimuexcepthmd\0";
pub const k_pch_Lighthouse_UseDisambiguation_String: &[u8; 18usize] = b"usedisambiguation\0";
pub const k_pch_Lighthouse_DisambiguationDebug_Int32: &[u8; 20usize] = b"disambiguationdebug\0";
pub const k_pch_Lighthouse_PrimaryBasestation_Int32: &[u8; 19usize] = b"primarybasestation\0";
pub const k_pch_Lighthouse_DBHistory_Bool: &[u8; 10usize] = b"dbhistory\0";
pub const k_pch_Lighthouse_EnableBluetooth_Bool: &[u8; 16usize] = b"enableBluetooth\0";
pub const k_pch_Lighthouse_PowerManagedBaseStations_String: &[u8; 25usize] =
    b"PowerManagedBaseStations\0";
pub const k_pch_Lighthouse_PowerManagedBaseStations2_String: &[u8; 26usize] =
    b"PowerManagedBaseStations2\0";
pub const k_pch_Lighthouse_InactivityTimeoutForBaseStations_Int32: &[u8; 33usize] =
    b"InactivityTimeoutForBaseStations\0";
pub const k_pch_Lighthouse_EnableImuFallback_Bool: &[u8; 18usize] = b"enableImuFallback\0";
pub const k_pch_Null_Section: &[u8; 12usize] = b"driver_null\0";
pub const k_pch_Null_SerialNumber_String: &[u8; 13usize] = b"serialNumber\0";
pub const k_pch_Null_ModelNumber_String: &[u8; 12usize] = b"modelNumber\0";
pub const k_pch_Null_WindowX_Int32: &[u8; 8usize] = b"windowX\0";
pub const k_pch_Null_WindowY_Int32: &[u8; 8usize] = b"windowY\0";
pub const k_pch_Null_WindowWidth_Int32: &[u8; 12usize] = b"windowWidth\0";
pub const k_pch_Null_WindowHeight_Int32: &[u8; 13usize] = b"windowHeight\0";
pub const k_pch_Null_RenderWidth_Int32: &[u8; 12usize] = b"renderWidth\0";
pub const k_pch_Null_RenderHeight_Int32: &[u8; 13usize] = b"renderHeight\0";
pub const k_pch_Null_SecondsFromVsyncToPhotons_Float: &[u8; 26usize] =
    b"secondsFromVsyncToPhotons\0";
pub const k_pch_Null_DisplayFrequency_Float: &[u8; 17usize] = b"displayFrequency\0";
pub const k_pch_WindowsMR_Section: &[u8; 19usize] = b"driver_holographic\0";
pub const k_pch_UserInterface_Section: &[u8; 14usize] = b"userinterface\0";
pub const k_pch_UserInterface_StatusAlwaysOnTop_Bool: &[u8; 18usize] = b"StatusAlwaysOnTop\0";
pub const k_pch_UserInterface_MinimizeToTray_Bool: &[u8; 15usize] = b"MinimizeToTray\0";
pub const k_pch_UserInterface_HidePopupsWhenStatusMinimized_Bool: &[u8; 30usize] =
    b"HidePopupsWhenStatusMinimized\0";
pub const k_pch_UserInterface_Screenshots_Bool: &[u8; 12usize] = b"screenshots\0";
pub const k_pch_UserInterface_ScreenshotType_Int: &[u8; 15usize] = b"screenshotType\0";
pub const k_pch_Notifications_Section: &[u8; 14usize] = b"notifications\0";
pub const k_pch_Notifications_DoNotDisturb_Bool: &[u8; 13usize] = b"DoNotDisturb\0";
pub const k_pch_Keyboard_Section: &[u8; 9usize] = b"keyboard\0";
pub const k_pch_Keyboard_TutorialCompletions: &[u8; 20usize] = b"TutorialCompletions\0";
pub const k_pch_Keyboard_ScaleX: &[u8; 7usize] = b"ScaleX\0";
pub const k_pch_Keyboard_ScaleY: &[u8; 7usize] = b"ScaleY\0";
pub const k_pch_Keyboard_OffsetLeftX: &[u8; 12usize] = b"OffsetLeftX\0";
pub const k_pch_Keyboard_OffsetRightX: &[u8; 13usize] = b"OffsetRightX\0";
pub const k_pch_Keyboard_OffsetY: &[u8; 8usize] = b"OffsetY\0";
pub const k_pch_Keyboard_Smoothing: &[u8; 10usize] = b"Smoothing\0";
pub const k_pch_Perf_Section: &[u8; 10usize] = b"perfcheck\0";
pub const k_pch_Perf_PerfGraphInHMD_Bool: &[u8; 15usize] = b"perfGraphInHMD\0";
pub const k_pch_Perf_AllowTimingStore_Bool: &[u8; 17usize] = b"allowTimingStore\0";
pub const k_pch_Perf_SaveTimingsOnExit_Bool: &[u8; 18usize] = b"saveTimingsOnExit\0";
pub const k_pch_Perf_TestData_Float: &[u8; 13usize] = b"perfTestData\0";
pub const k_pch_Perf_GPUProfiling_Bool: &[u8; 13usize] = b"GPUProfiling\0";
pub const k_pch_CollisionBounds_Section: &[u8; 16usize] = b"collisionBounds\0";
pub const k_pch_CollisionBounds_Style_Int32: &[u8; 21usize] = b"CollisionBoundsStyle\0";
pub const k_pch_CollisionBounds_GroundPerimeterOn_Bool: &[u8; 33usize] =
    b"CollisionBoundsGroundPerimeterOn\0";
pub const k_pch_CollisionBounds_CenterMarkerOn_Bool: &[u8; 30usize] =
    b"CollisionBoundsCenterMarkerOn\0";
pub const k_pch_CollisionBounds_PlaySpaceOn_Bool: &[u8; 27usize] = b"CollisionBoundsPlaySpaceOn\0";
pub const k_pch_CollisionBounds_FadeDistance_Float: &[u8; 28usize] =
    b"CollisionBoundsFadeDistance\0";
pub const k_pch_CollisionBounds_WallHeight_Float: &[u8; 26usize] = b"CollisionBoundsWallHeight\0";
pub const k_pch_CollisionBounds_ColorGammaR_Int32: &[u8; 27usize] = b"CollisionBoundsColorGammaR\0";
pub const k_pch_CollisionBounds_ColorGammaG_Int32: &[u8; 27usize] = b"CollisionBoundsColorGammaG\0";
pub const k_pch_CollisionBounds_ColorGammaB_Int32: &[u8; 27usize] = b"CollisionBoundsColorGammaB\0";
pub const k_pch_CollisionBounds_ColorGammaA_Int32: &[u8; 27usize] = b"CollisionBoundsColorGammaA\0";
pub const k_pch_CollisionBounds_EnableDriverImport: &[u8; 25usize] = b"enableDriverBoundsImport\0";
pub const k_pch_Camera_Section: &[u8; 7usize] = b"camera\0";
pub const k_pch_Camera_EnableCamera_Bool: &[u8; 13usize] = b"enableCamera\0";
pub const k_pch_Camera_ShowOnController_Bool: &[u8; 17usize] = b"showOnController\0";
pub const k_pch_Camera_EnableCameraForCollisionBounds_Bool: &[u8; 31usize] =
    b"enableCameraForCollisionBounds\0";
pub const k_pch_Camera_RoomView_Int32: &[u8; 9usize] = b"roomView\0";
pub const k_pch_Camera_BoundsColorGammaR_Int32: &[u8; 24usize] = b"cameraBoundsColorGammaR\0";
pub const k_pch_Camera_BoundsColorGammaG_Int32: &[u8; 24usize] = b"cameraBoundsColorGammaG\0";
pub const k_pch_Camera_BoundsColorGammaB_Int32: &[u8; 24usize] = b"cameraBoundsColorGammaB\0";
pub const k_pch_Camera_BoundsColorGammaA_Int32: &[u8; 24usize] = b"cameraBoundsColorGammaA\0";
pub const k_pch_Camera_BoundsStrength_Int32: &[u8; 21usize] = b"cameraBoundsStrength\0";
pub const k_pch_Camera_RoomViewStyle_Int32: &[u8; 14usize] = b"roomViewStyle\0";
pub const k_pch_audio_Section: &[u8; 6usize] = b"audio\0";
pub const k_pch_audio_SetOsDefaultPlaybackDevice_Bool: &[u8; 27usize] =
    b"setOsDefaultPlaybackDevice\0";
pub const k_pch_audio_EnablePlaybackDeviceOverride_Bool: &[u8; 29usize] =
    b"enablePlaybackDeviceOverride\0";
pub const k_pch_audio_PlaybackDeviceOverride_String: &[u8; 23usize] = b"playbackDeviceOverride\0";
pub const k_pch_audio_PlaybackDeviceOverrideName_String: &[u8; 27usize] =
    b"playbackDeviceOverrideName\0";
pub const k_pch_audio_SetOsDefaultRecordingDevice_Bool: &[u8; 28usize] =
    b"setOsDefaultRecordingDevice\0";
pub const k_pch_audio_EnableRecordingDeviceOverride_Bool: &[u8; 30usize] =
    b"enableRecordingDeviceOverride\0";
pub const k_pch_audio_RecordingDeviceOverride_String: &[u8; 24usize] = b"recordingDeviceOverride\0";
pub const k_pch_audio_RecordingDeviceOverrideName_String: &[u8; 28usize] =
    b"recordingDeviceOverrideName\0";
pub const k_pch_audio_EnablePlaybackMirror_Bool: &[u8; 21usize] = b"enablePlaybackMirror\0";
pub const k_pch_audio_PlaybackMirrorDevice_String: &[u8; 21usize] = b"playbackMirrorDevice\0";
pub const k_pch_audio_PlaybackMirrorDeviceName_String: &[u8; 25usize] =
    b"playbackMirrorDeviceName\0";
pub const k_pch_audio_OldPlaybackMirrorDevice_String: &[u8; 23usize] = b"onPlaybackMirrorDevice\0";
pub const k_pch_audio_ActiveMirrorDevice_String: &[u8; 27usize] = b"activePlaybackMirrorDevice\0";
pub const k_pch_audio_EnablePlaybackMirrorIndependentVolume_Bool: &[u8; 38usize] =
    b"enablePlaybackMirrorIndependentVolume\0";
pub const k_pch_audio_LastHmdPlaybackDeviceId_String: &[u8; 24usize] = b"lastHmdPlaybackDeviceId\0";
pub const k_pch_audio_VIVEHDMIGain: &[u8; 13usize] = b"viveHDMIGain\0";
pub const k_pch_audio_DualSpeakerAndJackOutput_Bool: &[u8; 25usize] = b"dualSpeakerAndJackOutput\0";
pub const k_pch_audio_MuteMicMonitor_Bool: &[u8; 15usize] = b"muteMicMonitor\0";
pub const k_pch_Power_Section: &[u8; 6usize] = b"power\0";
pub const k_pch_Power_PowerOffOnExit_Bool: &[u8; 15usize] = b"powerOffOnExit\0";
pub const k_pch_Power_TurnOffScreensTimeout_Float: &[u8; 22usize] = b"turnOffScreensTimeout\0";
pub const k_pch_Power_TurnOffControllersTimeout_Float: &[u8; 26usize] =
    b"turnOffControllersTimeout\0";
pub const k_pch_Power_ReturnToWatchdogTimeout_Float: &[u8; 24usize] = b"returnToWatchdogTimeout\0";
pub const k_pch_Power_AutoLaunchSteamVROnButtonPress: &[u8; 31usize] =
    b"autoLaunchSteamVROnButtonPress\0";
pub const k_pch_Power_PauseCompositorOnStandby_Bool: &[u8; 25usize] = b"pauseCompositorOnStandby\0";
pub const k_pch_Dashboard_Section: &[u8; 10usize] = b"dashboard\0";
pub const k_pch_Dashboard_EnableDashboard_Bool: &[u8; 16usize] = b"enableDashboard\0";
pub const k_pch_Dashboard_ArcadeMode_Bool: &[u8; 11usize] = b"arcadeMode\0";
pub const k_pch_Dashboard_Position: &[u8; 9usize] = b"position\0";
pub const k_pch_Dashboard_DesktopScale: &[u8; 13usize] = b"desktopScale\0";
pub const k_pch_Dashboard_DashboardScale: &[u8; 15usize] = b"dashboardScale\0";
pub const k_pch_Dashboard_UseStandaloneSystemLayer: &[u8; 22usize] = b"standaloneSystemLayer\0";
pub const k_pch_modelskin_Section: &[u8; 11usize] = b"modelskins\0";
pub const k_pch_Driver_Enable_Bool: &[u8; 7usize] = b"enable\0";
pub const k_pch_Driver_BlockedBySafemode_Bool: &[u8; 21usize] = b"blocked_by_safe_mode\0";
pub const k_pch_Driver_LoadPriority_Int32: &[u8; 13usize] = b"loadPriority\0";
pub const k_pch_WebInterface_Section: &[u8; 13usize] = b"WebInterface\0";
pub const k_pch_VRWebHelper_Section: &[u8; 12usize] = b"VRWebHelper\0";
pub const k_pch_VRWebHelper_DebuggerEnabled_Bool: &[u8; 16usize] = b"DebuggerEnabled\0";
pub const k_pch_VRWebHelper_DebuggerPort_Int32: &[u8; 13usize] = b"DebuggerPort\0";
pub const k_pch_TrackingOverride_Section: &[u8; 18usize] = b"TrackingOverrides\0";
pub const k_pch_App_BindingAutosaveURLSuffix_String: &[u8; 12usize] = b"AutosaveURL\0";
pub const k_pch_App_BindingLegacyAPISuffix_String: &[u8; 8usize] = b"_legacy\0";
pub const k_pch_App_BindingSteamVRInputAPISuffix_String: &[u8; 14usize] = b"_steamvrinput\0";
pub const k_pch_App_BindingCurrentURLSuffix_String: &[u8; 11usize] = b"CurrentURL\0";
pub const k_pch_App_BindingPreviousURLSuffix_String: &[u8; 12usize] = b"PreviousURL\0";
pub const k_pch_App_NeedToUpdateAutosaveSuffix_Bool: &[u8; 21usize] = b"NeedToUpdateAutosave\0";
pub const k_pch_App_DominantHand_Int32: &[u8; 13usize] = b"DominantHand\0";
pub const k_pch_App_BlockOculusSDK_Bool: &[u8; 15usize] = b"blockOculusSDK\0";
pub const k_pch_Trackers_Section: &[u8; 9usize] = b"trackers\0";
pub const k_pch_DesktopUI_Section: &[u8; 10usize] = b"DesktopUI\0";
pub const k_pch_LastKnown_Section: &[u8; 10usize] = b"LastKnown\0";
pub const k_pch_LastKnown_HMDManufacturer_String: &[u8; 16usize] = b"HMDManufacturer\0";
pub const k_pch_LastKnown_HMDModel_String: &[u8; 9usize] = b"HMDModel\0";
pub const k_pch_DismissedWarnings_Section: &[u8; 18usize] = b"DismissedWarnings\0";
pub const k_pch_Input_Section: &[u8; 6usize] = b"input\0";
pub const k_pch_Input_LeftThumbstickRotation_Float: &[u8; 23usize] = b"leftThumbstickRotation\0";
pub const k_pch_Input_RightThumbstickRotation_Float: &[u8; 24usize] = b"rightThumbstickRotation\0";
pub const k_pch_Input_ThumbstickDeadzone_Float: &[u8; 19usize] = b"thumbstickDeadzone\0";
pub const k_pch_GpuSpeed_Section: &[u8; 9usize] = b"GpuSpeed\0";
pub const IVRScreenshots_Version: &[u8; 19usize] = b"IVRScreenshots_001\0";
pub const IVRResources_Version: &[u8; 17usize] = b"IVRResources_001\0";
pub const IVRDriverManager_Version: &[u8; 21usize] = b"IVRDriverManager_001\0";
pub const k_unMaxActionNameLength: ::std::os::raw::c_ulong = 64;
pub const k_unMaxActionSetNameLength: ::std::os::raw::c_ulong = 64;
pub const k_unMaxActionOriginCount: ::std::os::raw::c_ulong = 16;
pub const k_unMaxBoneNameLength: ::std::os::raw::c_ulong = 32;
pub const k_nActionSetOverlayGlobalPriorityMin: ::std::os::raw::c_int = 16777216;
pub const k_nActionSetOverlayGlobalPriorityMax: ::std::os::raw::c_int = 33554431;
pub const k_nActionSetPriorityReservedMin: ::std::os::raw::c_int = 33554432;
pub const IVRInput_Version: &[u8; 13usize] = b"IVRInput_010\0";
pub const k_ulInvalidIOBufferHandle: ::std::os::raw::c_ulonglong = 0;
pub const IVRIOBuffer_Version: &[u8; 16usize] = b"IVRIOBuffer_002\0";
pub const k_ulInvalidSpatialAnchorHandle: ::std::os::raw::c_ulong = 0;
pub const IVRSpatialAnchors_Version: &[u8; 22usize] = b"IVRSpatialAnchors_001\0";
pub const IVRDebug_Version: &[u8; 13usize] = b"IVRDebug_001\0";
pub const k_ulDisplayRedirectContainer: ::std::os::raw::c_ulonglong = 25769803779;
pub const IVRProperties_Version: &[u8; 18usize] = b"IVRProperties_001\0";
pub const k_pchPathUserHandRight: &[u8; 17usize] = b"/user/hand/right\0";
pub const k_pchPathUserHandLeft: &[u8; 16usize] = b"/user/hand/left\0";
pub const k_pchPathUserHandPrimary: &[u8; 19usize] = b"/user/hand/primary\0";
pub const k_pchPathUserHandSecondary: &[u8; 21usize] = b"/user/hand/secondary\0";
pub const k_pchPathUserHead: &[u8; 11usize] = b"/user/head\0";
pub const k_pchPathUserGamepad: &[u8; 14usize] = b"/user/gamepad\0";
pub const k_pchPathUserTreadmill: &[u8; 16usize] = b"/user/treadmill\0";
pub const k_pchPathUserStylus: &[u8; 13usize] = b"/user/stylus\0";
pub const k_pchPathDevices: &[u8; 9usize] = b"/devices\0";
pub const k_pchPathDevicePath: &[u8; 13usize] = b"/device_path\0";
pub const k_pchPathBestAliasPath: &[u8; 17usize] = b"/best_alias_path\0";
pub const k_pchPathBoundTrackerAliasPath: &[u8; 20usize] = b"/bound_tracker_path\0";
pub const k_pchPathBoundTrackerRole: &[u8; 20usize] = b"/bound_tracker_role\0";
pub const k_pchPathPoseRaw: &[u8; 10usize] = b"/pose/raw\0";
pub const k_pchPathPoseTip: &[u8; 10usize] = b"/pose/tip\0";
pub const k_pchPathPoseGrip: &[u8; 11usize] = b"/pose/grip\0";
pub const k_pchPathSystemButtonClick: &[u8; 20usize] = b"/input/system/click\0";
pub const k_pchPathProximity: &[u8; 11usize] = b"/proximity\0";
pub const k_pchPathControllerTypePrefix: &[u8; 18usize] = b"/controller_type/\0";
pub const k_pchPathInputProfileSuffix: &[u8; 15usize] = b"/input_profile\0";
pub const k_pchPathBindingNameSuffix: &[u8; 14usize] = b"/binding_name\0";
pub const k_pchPathBindingUrlSuffix: &[u8; 13usize] = b"/binding_url\0";
pub const k_pchPathBindingErrorSuffix: &[u8; 15usize] = b"/binding_error\0";
pub const k_pchPathActiveActionSets: &[u8; 20usize] = b"/active_action_sets\0";
pub const k_pchPathComponentUpdates: &[u8; 25usize] = b"/total_component_updates\0";
pub const k_pchPathUserFootLeft: &[u8; 16usize] = b"/user/foot/left\0";
pub const k_pchPathUserFootRight: &[u8; 17usize] = b"/user/foot/right\0";
pub const k_pchPathUserShoulderLeft: &[u8; 20usize] = b"/user/shoulder/left\0";
pub const k_pchPathUserShoulderRight: &[u8; 21usize] = b"/user/shoulder/right\0";
pub const k_pchPathUserElbowLeft: &[u8; 17usize] = b"/user/elbow/left\0";
pub const k_pchPathUserElbowRight: &[u8; 18usize] = b"/user/elbow/right\0";
pub const k_pchPathUserKneeLeft: &[u8; 16usize] = b"/user/knee/left\0";
pub const k_pchPathUserKneeRight: &[u8; 17usize] = b"/user/knee/right\0";
pub const k_pchPathUserWaist: &[u8; 12usize] = b"/user/waist\0";
pub const k_pchPathUserChest: &[u8; 12usize] = b"/user/chest\0";
pub const k_pchPathUserCamera: &[u8; 13usize] = b"/user/camera\0";
pub const k_pchPathUserKeyboard: &[u8; 15usize] = b"/user/keyboard\0";
pub const k_pchPathClientAppKey: &[u8; 21usize] = b"/client_info/app_key\0";
pub const k_ulInvalidPathHandle: ::std::os::raw::c_ulonglong = 0;
pub const IVRPaths_Version: &[u8; 13usize] = b"IVRPaths_001\0";
pub const IVRBlockQueue_Version: &[u8; 18usize] = b"IVRBlockQueue_004\0";
pub const EVREye_Eye_Left: EVREye = 0;
pub const EVREye_Eye_Right: EVREye = 1;
pub type EVREye = ::std::os::raw::c_uint;
pub const ETextureType_TextureType_Invalid: ETextureType = -1;
pub const ETextureType_TextureType_DirectX: ETextureType = 0;
pub const ETextureType_TextureType_OpenGL: ETextureType = 1;
pub const ETextureType_TextureType_Vulkan: ETextureType = 2;
pub const ETextureType_TextureType_IOSurface: ETextureType = 3;
pub const ETextureType_TextureType_DirectX12: ETextureType = 4;
pub const ETextureType_TextureType_DXGISharedHandle: ETextureType = 5;
pub const ETextureType_TextureType_Metal: ETextureType = 6;
pub type ETextureType = ::std::os::raw::c_int;
pub const EColorSpace_ColorSpace_Auto: EColorSpace = 0;
pub const EColorSpace_ColorSpace_Gamma: EColorSpace = 1;
pub const EColorSpace_ColorSpace_Linear: EColorSpace = 2;
pub type EColorSpace = ::std::os::raw::c_uint;
pub const ETrackingResult_TrackingResult_Uninitialized: ETrackingResult = 1;
pub const ETrackingResult_TrackingResult_Calibrating_InProgress: ETrackingResult = 100;
pub const ETrackingResult_TrackingResult_Calibrating_OutOfRange: ETrackingResult = 101;
pub const ETrackingResult_TrackingResult_Running_OK: ETrackingResult = 200;
pub const ETrackingResult_TrackingResult_Running_OutOfRange: ETrackingResult = 201;
pub const ETrackingResult_TrackingResult_Fallback_RotationOnly: ETrackingResult = 300;
pub type ETrackingResult = ::std::os::raw::c_uint;
pub const ETrackedDeviceClass_TrackedDeviceClass_Invalid: ETrackedDeviceClass = 0;
pub const ETrackedDeviceClass_TrackedDeviceClass_HMD: ETrackedDeviceClass = 1;
pub const ETrackedDeviceClass_TrackedDeviceClass_Controller: ETrackedDeviceClass = 2;
pub const ETrackedDeviceClass_TrackedDeviceClass_GenericTracker: ETrackedDeviceClass = 3;
pub const ETrackedDeviceClass_TrackedDeviceClass_TrackingReference: ETrackedDeviceClass = 4;
pub const ETrackedDeviceClass_TrackedDeviceClass_DisplayRedirect: ETrackedDeviceClass = 5;
pub const ETrackedDeviceClass_TrackedDeviceClass_Max: ETrackedDeviceClass = 6;
pub type ETrackedDeviceClass = ::std::os::raw::c_uint;
pub const ETrackedControllerRole_TrackedControllerRole_Invalid: ETrackedControllerRole = 0;
pub const ETrackedControllerRole_TrackedControllerRole_LeftHand: ETrackedControllerRole = 1;
pub const ETrackedControllerRole_TrackedControllerRole_RightHand: ETrackedControllerRole = 2;
pub const ETrackedControllerRole_TrackedControllerRole_OptOut: ETrackedControllerRole = 3;
pub const ETrackedControllerRole_TrackedControllerRole_Treadmill: ETrackedControllerRole = 4;
pub const ETrackedControllerRole_TrackedControllerRole_Stylus: ETrackedControllerRole = 5;
pub const ETrackedControllerRole_TrackedControllerRole_Max: ETrackedControllerRole = 5;
pub type ETrackedControllerRole = ::std::os::raw::c_uint;
pub const ETrackingUniverseOrigin_TrackingUniverseSeated: ETrackingUniverseOrigin = 0;
pub const ETrackingUniverseOrigin_TrackingUniverseStanding: ETrackingUniverseOrigin = 1;
pub const ETrackingUniverseOrigin_TrackingUniverseRawAndUncalibrated: ETrackingUniverseOrigin = 2;
pub type ETrackingUniverseOrigin = ::std::os::raw::c_uint;
pub const EAdditionalRadioFeatures_AdditionalRadioFeatures_None: EAdditionalRadioFeatures = 0;
pub const EAdditionalRadioFeatures_AdditionalRadioFeatures_HTCLinkBox: EAdditionalRadioFeatures = 1;
pub const EAdditionalRadioFeatures_AdditionalRadioFeatures_InternalDongle:
    EAdditionalRadioFeatures = 2;
pub const EAdditionalRadioFeatures_AdditionalRadioFeatures_ExternalDongle:
    EAdditionalRadioFeatures = 4;
pub type EAdditionalRadioFeatures = ::std::os::raw::c_uint;
pub const ETrackedDeviceProperty_Prop_Invalid: ETrackedDeviceProperty = 0;
pub const ETrackedDeviceProperty_Prop_TrackingSystemName_String: ETrackedDeviceProperty = 1000;
pub const ETrackedDeviceProperty_Prop_ModelNumber_String: ETrackedDeviceProperty = 1001;
pub const ETrackedDeviceProperty_Prop_SerialNumber_String: ETrackedDeviceProperty = 1002;
pub const ETrackedDeviceProperty_Prop_RenderModelName_String: ETrackedDeviceProperty = 1003;
pub const ETrackedDeviceProperty_Prop_WillDriftInYaw_Bool: ETrackedDeviceProperty = 1004;
pub const ETrackedDeviceProperty_Prop_ManufacturerName_String: ETrackedDeviceProperty = 1005;
pub const ETrackedDeviceProperty_Prop_TrackingFirmwareVersion_String: ETrackedDeviceProperty = 1006;
pub const ETrackedDeviceProperty_Prop_HardwareRevision_String: ETrackedDeviceProperty = 1007;
pub const ETrackedDeviceProperty_Prop_AllWirelessDongleDescriptions_String: ETrackedDeviceProperty =
    1008;
pub const ETrackedDeviceProperty_Prop_ConnectedWirelessDongle_String: ETrackedDeviceProperty = 1009;
pub const ETrackedDeviceProperty_Prop_DeviceIsWireless_Bool: ETrackedDeviceProperty = 1010;
pub const ETrackedDeviceProperty_Prop_DeviceIsCharging_Bool: ETrackedDeviceProperty = 1011;
pub const ETrackedDeviceProperty_Prop_DeviceBatteryPercentage_Float: ETrackedDeviceProperty = 1012;
pub const ETrackedDeviceProperty_Prop_StatusDisplayTransform_Matrix34: ETrackedDeviceProperty =
    1013;
pub const ETrackedDeviceProperty_Prop_Firmware_UpdateAvailable_Bool: ETrackedDeviceProperty = 1014;
pub const ETrackedDeviceProperty_Prop_Firmware_ManualUpdate_Bool: ETrackedDeviceProperty = 1015;
pub const ETrackedDeviceProperty_Prop_Firmware_ManualUpdateURL_String: ETrackedDeviceProperty =
    1016;
pub const ETrackedDeviceProperty_Prop_HardwareRevision_Uint64: ETrackedDeviceProperty = 1017;
pub const ETrackedDeviceProperty_Prop_FirmwareVersion_Uint64: ETrackedDeviceProperty = 1018;
pub const ETrackedDeviceProperty_Prop_FPGAVersion_Uint64: ETrackedDeviceProperty = 1019;
pub const ETrackedDeviceProperty_Prop_VRCVersion_Uint64: ETrackedDeviceProperty = 1020;
pub const ETrackedDeviceProperty_Prop_RadioVersion_Uint64: ETrackedDeviceProperty = 1021;
pub const ETrackedDeviceProperty_Prop_DongleVersion_Uint64: ETrackedDeviceProperty = 1022;
pub const ETrackedDeviceProperty_Prop_BlockServerShutdown_Bool: ETrackedDeviceProperty = 1023;
pub const ETrackedDeviceProperty_Prop_CanUnifyCoordinateSystemWithHmd_Bool: ETrackedDeviceProperty =
    1024;
pub const ETrackedDeviceProperty_Prop_ContainsProximitySensor_Bool: ETrackedDeviceProperty = 1025;
pub const ETrackedDeviceProperty_Prop_DeviceProvidesBatteryStatus_Bool: ETrackedDeviceProperty =
    1026;
pub const ETrackedDeviceProperty_Prop_DeviceCanPowerOff_Bool: ETrackedDeviceProperty = 1027;
pub const ETrackedDeviceProperty_Prop_Firmware_ProgrammingTarget_String: ETrackedDeviceProperty =
    1028;
pub const ETrackedDeviceProperty_Prop_DeviceClass_Int32: ETrackedDeviceProperty = 1029;
pub const ETrackedDeviceProperty_Prop_HasCamera_Bool: ETrackedDeviceProperty = 1030;
pub const ETrackedDeviceProperty_Prop_DriverVersion_String: ETrackedDeviceProperty = 1031;
pub const ETrackedDeviceProperty_Prop_Firmware_ForceUpdateRequired_Bool: ETrackedDeviceProperty =
    1032;
pub const ETrackedDeviceProperty_Prop_ViveSystemButtonFixRequired_Bool: ETrackedDeviceProperty =
    1033;
pub const ETrackedDeviceProperty_Prop_ParentDriver_Uint64: ETrackedDeviceProperty = 1034;
pub const ETrackedDeviceProperty_Prop_ResourceRoot_String: ETrackedDeviceProperty = 1035;
pub const ETrackedDeviceProperty_Prop_RegisteredDeviceType_String: ETrackedDeviceProperty = 1036;
pub const ETrackedDeviceProperty_Prop_InputProfilePath_String: ETrackedDeviceProperty = 1037;
pub const ETrackedDeviceProperty_Prop_NeverTracked_Bool: ETrackedDeviceProperty = 1038;
pub const ETrackedDeviceProperty_Prop_NumCameras_Int32: ETrackedDeviceProperty = 1039;
pub const ETrackedDeviceProperty_Prop_CameraFrameLayout_Int32: ETrackedDeviceProperty = 1040;
pub const ETrackedDeviceProperty_Prop_CameraStreamFormat_Int32: ETrackedDeviceProperty = 1041;
pub const ETrackedDeviceProperty_Prop_AdditionalDeviceSettingsPath_String: ETrackedDeviceProperty =
    1042;
pub const ETrackedDeviceProperty_Prop_Identifiable_Bool: ETrackedDeviceProperty = 1043;
pub const ETrackedDeviceProperty_Prop_BootloaderVersion_Uint64: ETrackedDeviceProperty = 1044;
pub const ETrackedDeviceProperty_Prop_AdditionalSystemReportData_String: ETrackedDeviceProperty =
    1045;
pub const ETrackedDeviceProperty_Prop_CompositeFirmwareVersion_String: ETrackedDeviceProperty =
    1046;
pub const ETrackedDeviceProperty_Prop_Firmware_RemindUpdate_Bool: ETrackedDeviceProperty = 1047;
pub const ETrackedDeviceProperty_Prop_PeripheralApplicationVersion_Uint64: ETrackedDeviceProperty =
    1048;
pub const ETrackedDeviceProperty_Prop_ManufacturerSerialNumber_String: ETrackedDeviceProperty =
    1049;
pub const ETrackedDeviceProperty_Prop_ComputedSerialNumber_String: ETrackedDeviceProperty = 1050;
pub const ETrackedDeviceProperty_Prop_EstimatedDeviceFirstUseTime_Int32: ETrackedDeviceProperty =
    1051;
pub const ETrackedDeviceProperty_Prop_ReportsTimeSinceVSync_Bool: ETrackedDeviceProperty = 2000;
pub const ETrackedDeviceProperty_Prop_SecondsFromVsyncToPhotons_Float: ETrackedDeviceProperty =
    2001;
pub const ETrackedDeviceProperty_Prop_DisplayFrequency_Float: ETrackedDeviceProperty = 2002;
pub const ETrackedDeviceProperty_Prop_UserIpdMeters_Float: ETrackedDeviceProperty = 2003;
pub const ETrackedDeviceProperty_Prop_CurrentUniverseId_Uint64: ETrackedDeviceProperty = 2004;
pub const ETrackedDeviceProperty_Prop_PreviousUniverseId_Uint64: ETrackedDeviceProperty = 2005;
pub const ETrackedDeviceProperty_Prop_DisplayFirmwareVersion_Uint64: ETrackedDeviceProperty = 2006;
pub const ETrackedDeviceProperty_Prop_IsOnDesktop_Bool: ETrackedDeviceProperty = 2007;
pub const ETrackedDeviceProperty_Prop_DisplayMCType_Int32: ETrackedDeviceProperty = 2008;
pub const ETrackedDeviceProperty_Prop_DisplayMCOffset_Float: ETrackedDeviceProperty = 2009;
pub const ETrackedDeviceProperty_Prop_DisplayMCScale_Float: ETrackedDeviceProperty = 2010;
pub const ETrackedDeviceProperty_Prop_EdidVendorID_Int32: ETrackedDeviceProperty = 2011;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageLeft_String: ETrackedDeviceProperty = 2012;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageRight_String: ETrackedDeviceProperty = 2013;
pub const ETrackedDeviceProperty_Prop_DisplayGCBlackClamp_Float: ETrackedDeviceProperty = 2014;
pub const ETrackedDeviceProperty_Prop_EdidProductID_Int32: ETrackedDeviceProperty = 2015;
pub const ETrackedDeviceProperty_Prop_CameraToHeadTransform_Matrix34: ETrackedDeviceProperty = 2016;
pub const ETrackedDeviceProperty_Prop_DisplayGCType_Int32: ETrackedDeviceProperty = 2017;
pub const ETrackedDeviceProperty_Prop_DisplayGCOffset_Float: ETrackedDeviceProperty = 2018;
pub const ETrackedDeviceProperty_Prop_DisplayGCScale_Float: ETrackedDeviceProperty = 2019;
pub const ETrackedDeviceProperty_Prop_DisplayGCPrescale_Float: ETrackedDeviceProperty = 2020;
pub const ETrackedDeviceProperty_Prop_DisplayGCImage_String: ETrackedDeviceProperty = 2021;
pub const ETrackedDeviceProperty_Prop_LensCenterLeftU_Float: ETrackedDeviceProperty = 2022;
pub const ETrackedDeviceProperty_Prop_LensCenterLeftV_Float: ETrackedDeviceProperty = 2023;
pub const ETrackedDeviceProperty_Prop_LensCenterRightU_Float: ETrackedDeviceProperty = 2024;
pub const ETrackedDeviceProperty_Prop_LensCenterRightV_Float: ETrackedDeviceProperty = 2025;
pub const ETrackedDeviceProperty_Prop_UserHeadToEyeDepthMeters_Float: ETrackedDeviceProperty = 2026;
pub const ETrackedDeviceProperty_Prop_CameraFirmwareVersion_Uint64: ETrackedDeviceProperty = 2027;
pub const ETrackedDeviceProperty_Prop_CameraFirmwareDescription_String: ETrackedDeviceProperty =
    2028;
pub const ETrackedDeviceProperty_Prop_DisplayFPGAVersion_Uint64: ETrackedDeviceProperty = 2029;
pub const ETrackedDeviceProperty_Prop_DisplayBootloaderVersion_Uint64: ETrackedDeviceProperty =
    2030;
pub const ETrackedDeviceProperty_Prop_DisplayHardwareVersion_Uint64: ETrackedDeviceProperty = 2031;
pub const ETrackedDeviceProperty_Prop_AudioFirmwareVersion_Uint64: ETrackedDeviceProperty = 2032;
pub const ETrackedDeviceProperty_Prop_CameraCompatibilityMode_Int32: ETrackedDeviceProperty = 2033;
pub const ETrackedDeviceProperty_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float:
    ETrackedDeviceProperty = 2034;
pub const ETrackedDeviceProperty_Prop_ScreenshotVerticalFieldOfViewDegrees_Float:
    ETrackedDeviceProperty = 2035;
pub const ETrackedDeviceProperty_Prop_DisplaySuppressed_Bool: ETrackedDeviceProperty = 2036;
pub const ETrackedDeviceProperty_Prop_DisplayAllowNightMode_Bool: ETrackedDeviceProperty = 2037;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageWidth_Int32: ETrackedDeviceProperty = 2038;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageHeight_Int32: ETrackedDeviceProperty = 2039;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageNumChannels_Int32: ETrackedDeviceProperty =
    2040;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageData_Binary: ETrackedDeviceProperty = 2041;
pub const ETrackedDeviceProperty_Prop_SecondsFromPhotonsToVblank_Float: ETrackedDeviceProperty =
    2042;
pub const ETrackedDeviceProperty_Prop_DriverDirectModeSendsVsyncEvents_Bool:
    ETrackedDeviceProperty = 2043;
pub const ETrackedDeviceProperty_Prop_DisplayDebugMode_Bool: ETrackedDeviceProperty = 2044;
pub const ETrackedDeviceProperty_Prop_GraphicsAdapterLuid_Uint64: ETrackedDeviceProperty = 2045;
pub const ETrackedDeviceProperty_Prop_DriverProvidedChaperonePath_String: ETrackedDeviceProperty =
    2048;
pub const ETrackedDeviceProperty_Prop_ExpectedTrackingReferenceCount_Int32: ETrackedDeviceProperty =
    2049;
pub const ETrackedDeviceProperty_Prop_ExpectedControllerCount_Int32: ETrackedDeviceProperty = 2050;
pub const ETrackedDeviceProperty_Prop_NamedIconPathControllerLeftDeviceOff_String:
    ETrackedDeviceProperty = 2051;
pub const ETrackedDeviceProperty_Prop_NamedIconPathControllerRightDeviceOff_String:
    ETrackedDeviceProperty = 2052;
pub const ETrackedDeviceProperty_Prop_NamedIconPathTrackingReferenceDeviceOff_String:
    ETrackedDeviceProperty = 2053;
pub const ETrackedDeviceProperty_Prop_DoNotApplyPrediction_Bool: ETrackedDeviceProperty = 2054;
pub const ETrackedDeviceProperty_Prop_CameraToHeadTransforms_Matrix34_Array:
    ETrackedDeviceProperty = 2055;
pub const ETrackedDeviceProperty_Prop_DistortionMeshResolution_Int32: ETrackedDeviceProperty = 2056;
pub const ETrackedDeviceProperty_Prop_DriverIsDrawingControllers_Bool: ETrackedDeviceProperty =
    2057;
pub const ETrackedDeviceProperty_Prop_DriverRequestsApplicationPause_Bool: ETrackedDeviceProperty =
    2058;
pub const ETrackedDeviceProperty_Prop_DriverRequestsReducedRendering_Bool: ETrackedDeviceProperty =
    2059;
pub const ETrackedDeviceProperty_Prop_MinimumIpdStepMeters_Float: ETrackedDeviceProperty = 2060;
pub const ETrackedDeviceProperty_Prop_AudioBridgeFirmwareVersion_Uint64: ETrackedDeviceProperty =
    2061;
pub const ETrackedDeviceProperty_Prop_ImageBridgeFirmwareVersion_Uint64: ETrackedDeviceProperty =
    2062;
pub const ETrackedDeviceProperty_Prop_ImuToHeadTransform_Matrix34: ETrackedDeviceProperty = 2063;
pub const ETrackedDeviceProperty_Prop_ImuFactoryGyroBias_Vector3: ETrackedDeviceProperty = 2064;
pub const ETrackedDeviceProperty_Prop_ImuFactoryGyroScale_Vector3: ETrackedDeviceProperty = 2065;
pub const ETrackedDeviceProperty_Prop_ImuFactoryAccelerometerBias_Vector3: ETrackedDeviceProperty =
    2066;
pub const ETrackedDeviceProperty_Prop_ImuFactoryAccelerometerScale_Vector3: ETrackedDeviceProperty =
    2067;
pub const ETrackedDeviceProperty_Prop_ConfigurationIncludesLighthouse20Features_Bool:
    ETrackedDeviceProperty = 2069;
pub const ETrackedDeviceProperty_Prop_AdditionalRadioFeatures_Uint64: ETrackedDeviceProperty = 2070;
pub const ETrackedDeviceProperty_Prop_CameraWhiteBalance_Vector4_Array: ETrackedDeviceProperty =
    2071;
pub const ETrackedDeviceProperty_Prop_CameraDistortionFunction_Int32_Array: ETrackedDeviceProperty =
    2072;
pub const ETrackedDeviceProperty_Prop_CameraDistortionCoefficients_Float_Array:
    ETrackedDeviceProperty = 2073;
pub const ETrackedDeviceProperty_Prop_ExpectedControllerType_String: ETrackedDeviceProperty = 2074;
pub const ETrackedDeviceProperty_Prop_HmdTrackingStyle_Int32: ETrackedDeviceProperty = 2075;
pub const ETrackedDeviceProperty_Prop_DriverProvidedChaperoneVisibility_Bool:
    ETrackedDeviceProperty = 2076;
pub const ETrackedDeviceProperty_Prop_HmdColumnCorrectionSettingPrefix_String:
    ETrackedDeviceProperty = 2077;
pub const ETrackedDeviceProperty_Prop_CameraSupportsCompatibilityModes_Bool:
    ETrackedDeviceProperty = 2078;
pub const ETrackedDeviceProperty_Prop_SupportsRoomViewDepthProjection_Bool: ETrackedDeviceProperty =
    2079;
pub const ETrackedDeviceProperty_Prop_DisplayAvailableFrameRates_Float_Array:
    ETrackedDeviceProperty = 2080;
pub const ETrackedDeviceProperty_Prop_DisplaySupportsMultipleFramerates_Bool:
    ETrackedDeviceProperty = 2081;
pub const ETrackedDeviceProperty_Prop_DisplayColorMultLeft_Vector3: ETrackedDeviceProperty = 2082;
pub const ETrackedDeviceProperty_Prop_DisplayColorMultRight_Vector3: ETrackedDeviceProperty = 2083;
pub const ETrackedDeviceProperty_Prop_DisplaySupportsRuntimeFramerateChange_Bool:
    ETrackedDeviceProperty = 2084;
pub const ETrackedDeviceProperty_Prop_DisplaySupportsAnalogGain_Bool: ETrackedDeviceProperty = 2085;
pub const ETrackedDeviceProperty_Prop_DisplayMinAnalogGain_Float: ETrackedDeviceProperty = 2086;
pub const ETrackedDeviceProperty_Prop_DisplayMaxAnalogGain_Float: ETrackedDeviceProperty = 2087;
pub const ETrackedDeviceProperty_Prop_CameraExposureTime_Float: ETrackedDeviceProperty = 2088;
pub const ETrackedDeviceProperty_Prop_CameraGlobalGain_Float: ETrackedDeviceProperty = 2089;
pub const ETrackedDeviceProperty_Prop_DashboardScale_Float: ETrackedDeviceProperty = 2091;
pub const ETrackedDeviceProperty_Prop_IpdUIRangeMinMeters_Float: ETrackedDeviceProperty = 2100;
pub const ETrackedDeviceProperty_Prop_IpdUIRangeMaxMeters_Float: ETrackedDeviceProperty = 2101;
pub const ETrackedDeviceProperty_Prop_Hmd_SupportsHDCP14LegacyCompat_Bool: ETrackedDeviceProperty =
    2102;
pub const ETrackedDeviceProperty_Prop_Hmd_SupportsMicMonitoring_Bool: ETrackedDeviceProperty = 2103;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraCorrectionMode_Int32:
    ETrackedDeviceProperty = 2200;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerLeft_Int32:
    ETrackedDeviceProperty = 2201;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerRight_Int32:
    ETrackedDeviceProperty = 2202;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerTop_Int32:
    ETrackedDeviceProperty = 2203;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerBottom_Int32:
    ETrackedDeviceProperty = 2204;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterLeft_Int32:
    ETrackedDeviceProperty = 2205;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterRight_Int32:
    ETrackedDeviceProperty = 2206;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterTop_Int32:
    ETrackedDeviceProperty = 2207;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterBottom_Int32:
    ETrackedDeviceProperty = 2208;
pub const ETrackedDeviceProperty_Prop_Audio_DefaultPlaybackDeviceId_String: ETrackedDeviceProperty =
    2300;
pub const ETrackedDeviceProperty_Prop_Audio_DefaultRecordingDeviceId_String:
    ETrackedDeviceProperty = 2301;
pub const ETrackedDeviceProperty_Prop_Audio_DefaultPlaybackDeviceVolume_Float:
    ETrackedDeviceProperty = 2302;
pub const ETrackedDeviceProperty_Prop_Audio_SupportsDualSpeakerAndJackOutput_Bool:
    ETrackedDeviceProperty = 2303;
pub const ETrackedDeviceProperty_Prop_AttachedDeviceId_String: ETrackedDeviceProperty = 3000;
pub const ETrackedDeviceProperty_Prop_SupportedButtons_Uint64: ETrackedDeviceProperty = 3001;
pub const ETrackedDeviceProperty_Prop_Axis0Type_Int32: ETrackedDeviceProperty = 3002;
pub const ETrackedDeviceProperty_Prop_Axis1Type_Int32: ETrackedDeviceProperty = 3003;
pub const ETrackedDeviceProperty_Prop_Axis2Type_Int32: ETrackedDeviceProperty = 3004;
pub const ETrackedDeviceProperty_Prop_Axis3Type_Int32: ETrackedDeviceProperty = 3005;
pub const ETrackedDeviceProperty_Prop_Axis4Type_Int32: ETrackedDeviceProperty = 3006;
pub const ETrackedDeviceProperty_Prop_ControllerRoleHint_Int32: ETrackedDeviceProperty = 3007;
pub const ETrackedDeviceProperty_Prop_FieldOfViewLeftDegrees_Float: ETrackedDeviceProperty = 4000;
pub const ETrackedDeviceProperty_Prop_FieldOfViewRightDegrees_Float: ETrackedDeviceProperty = 4001;
pub const ETrackedDeviceProperty_Prop_FieldOfViewTopDegrees_Float: ETrackedDeviceProperty = 4002;
pub const ETrackedDeviceProperty_Prop_FieldOfViewBottomDegrees_Float: ETrackedDeviceProperty = 4003;
pub const ETrackedDeviceProperty_Prop_TrackingRangeMinimumMeters_Float: ETrackedDeviceProperty =
    4004;
pub const ETrackedDeviceProperty_Prop_TrackingRangeMaximumMeters_Float: ETrackedDeviceProperty =
    4005;
pub const ETrackedDeviceProperty_Prop_ModeLabel_String: ETrackedDeviceProperty = 4006;
pub const ETrackedDeviceProperty_Prop_CanWirelessIdentify_Bool: ETrackedDeviceProperty = 4007;
pub const ETrackedDeviceProperty_Prop_Nonce_Int32: ETrackedDeviceProperty = 4008;
pub const ETrackedDeviceProperty_Prop_IconPathName_String: ETrackedDeviceProperty = 5000;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceOff_String: ETrackedDeviceProperty = 5001;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceSearching_String: ETrackedDeviceProperty =
    5002;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceSearchingAlert_String:
    ETrackedDeviceProperty = 5003;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceReady_String: ETrackedDeviceProperty =
    5004;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceReadyAlert_String: ETrackedDeviceProperty =
    5005;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceNotReady_String: ETrackedDeviceProperty =
    5006;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceStandby_String: ETrackedDeviceProperty =
    5007;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceAlertLow_String: ETrackedDeviceProperty =
    5008;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceStandbyAlert_String:
    ETrackedDeviceProperty = 5009;
pub const ETrackedDeviceProperty_Prop_DisplayHiddenArea_Binary_Start: ETrackedDeviceProperty = 5100;
pub const ETrackedDeviceProperty_Prop_DisplayHiddenArea_Binary_End: ETrackedDeviceProperty = 5150;
pub const ETrackedDeviceProperty_Prop_ParentContainer: ETrackedDeviceProperty = 5151;
pub const ETrackedDeviceProperty_Prop_OverrideContainer_Uint64: ETrackedDeviceProperty = 5152;
pub const ETrackedDeviceProperty_Prop_UserConfigPath_String: ETrackedDeviceProperty = 6000;
pub const ETrackedDeviceProperty_Prop_InstallPath_String: ETrackedDeviceProperty = 6001;
pub const ETrackedDeviceProperty_Prop_HasDisplayComponent_Bool: ETrackedDeviceProperty = 6002;
pub const ETrackedDeviceProperty_Prop_HasControllerComponent_Bool: ETrackedDeviceProperty = 6003;
pub const ETrackedDeviceProperty_Prop_HasCameraComponent_Bool: ETrackedDeviceProperty = 6004;
pub const ETrackedDeviceProperty_Prop_HasDriverDirectModeComponent_Bool: ETrackedDeviceProperty =
    6005;
pub const ETrackedDeviceProperty_Prop_HasVirtualDisplayComponent_Bool: ETrackedDeviceProperty =
    6006;
pub const ETrackedDeviceProperty_Prop_HasSpatialAnchorsSupport_Bool: ETrackedDeviceProperty = 6007;
pub const ETrackedDeviceProperty_Prop_ControllerType_String: ETrackedDeviceProperty = 7000;
pub const ETrackedDeviceProperty_Prop_ControllerHandSelectionPriority_Int32:
    ETrackedDeviceProperty = 7002;
pub const ETrackedDeviceProperty_Prop_VendorSpecific_Reserved_Start: ETrackedDeviceProperty = 10000;
pub const ETrackedDeviceProperty_Prop_VendorSpecific_Reserved_End: ETrackedDeviceProperty = 10999;
pub const ETrackedDeviceProperty_Prop_TrackedDeviceProperty_Max: ETrackedDeviceProperty = 1000000;
pub type ETrackedDeviceProperty = ::std::os::raw::c_uint;
pub const ETrackedPropertyError_TrackedProp_Success: ETrackedPropertyError = 0;
pub const ETrackedPropertyError_TrackedProp_WrongDataType: ETrackedPropertyError = 1;
pub const ETrackedPropertyError_TrackedProp_WrongDeviceClass: ETrackedPropertyError = 2;
pub const ETrackedPropertyError_TrackedProp_BufferTooSmall: ETrackedPropertyError = 3;
pub const ETrackedPropertyError_TrackedProp_UnknownProperty: ETrackedPropertyError = 4;
pub const ETrackedPropertyError_TrackedProp_InvalidDevice: ETrackedPropertyError = 5;
pub const ETrackedPropertyError_TrackedProp_CouldNotContactServer: ETrackedPropertyError = 6;
pub const ETrackedPropertyError_TrackedProp_ValueNotProvidedByDevice: ETrackedPropertyError = 7;
pub const ETrackedPropertyError_TrackedProp_StringExceedsMaximumLength: ETrackedPropertyError = 8;
pub const ETrackedPropertyError_TrackedProp_NotYetAvailable: ETrackedPropertyError = 9;
pub const ETrackedPropertyError_TrackedProp_PermissionDenied: ETrackedPropertyError = 10;
pub const ETrackedPropertyError_TrackedProp_InvalidOperation: ETrackedPropertyError = 11;
pub const ETrackedPropertyError_TrackedProp_CannotWriteToWildcards: ETrackedPropertyError = 12;
pub const ETrackedPropertyError_TrackedProp_IPCReadFailure: ETrackedPropertyError = 13;
pub const ETrackedPropertyError_TrackedProp_OutOfMemory: ETrackedPropertyError = 14;
pub const ETrackedPropertyError_TrackedProp_InvalidContainer: ETrackedPropertyError = 15;
pub type ETrackedPropertyError = ::std::os::raw::c_uint;
pub const EHmdTrackingStyle_HmdTrackingStyle_Unknown: EHmdTrackingStyle = 0;
pub const EHmdTrackingStyle_HmdTrackingStyle_Lighthouse: EHmdTrackingStyle = 1;
pub const EHmdTrackingStyle_HmdTrackingStyle_OutsideInCameras: EHmdTrackingStyle = 2;
pub const EHmdTrackingStyle_HmdTrackingStyle_InsideOutCameras: EHmdTrackingStyle = 3;
pub type EHmdTrackingStyle = ::std::os::raw::c_uint;
pub const EVRSubmitFlags_Submit_Default: EVRSubmitFlags = 0;
pub const EVRSubmitFlags_Submit_LensDistortionAlreadyApplied: EVRSubmitFlags = 1;
pub const EVRSubmitFlags_Submit_GlRenderBuffer: EVRSubmitFlags = 2;
pub const EVRSubmitFlags_Submit_Reserved: EVRSubmitFlags = 4;
pub const EVRSubmitFlags_Submit_TextureWithPose: EVRSubmitFlags = 8;
pub const EVRSubmitFlags_Submit_TextureWithDepth: EVRSubmitFlags = 16;
pub const EVRSubmitFlags_Submit_FrameDiscontinuty: EVRSubmitFlags = 32;
pub const EVRSubmitFlags_Submit_VulkanTextureWithArrayData: EVRSubmitFlags = 64;
pub const EVRSubmitFlags_Submit_GlArrayTexture: EVRSubmitFlags = 128;
pub const EVRSubmitFlags_Submit_Reserved2: EVRSubmitFlags = 32768;
pub type EVRSubmitFlags = ::std::os::raw::c_uint;
pub const EVRState_VRState_Undefined: EVRState = -1;
pub const EVRState_VRState_Off: EVRState = 0;
pub const EVRState_VRState_Searching: EVRState = 1;
pub const EVRState_VRState_Searching_Alert: EVRState = 2;
pub const EVRState_VRState_Ready: EVRState = 3;
pub const EVRState_VRState_Ready_Alert: EVRState = 4;
pub const EVRState_VRState_NotReady: EVRState = 5;
pub const EVRState_VRState_Standby: EVRState = 6;
pub const EVRState_VRState_Ready_Alert_Low: EVRState = 7;
pub type EVRState = ::std::os::raw::c_int;
pub const EVREventType_VREvent_None: EVREventType = 0;
pub const EVREventType_VREvent_TrackedDeviceActivated: EVREventType = 100;
pub const EVREventType_VREvent_TrackedDeviceDeactivated: EVREventType = 101;
pub const EVREventType_VREvent_TrackedDeviceUpdated: EVREventType = 102;
pub const EVREventType_VREvent_TrackedDeviceUserInteractionStarted: EVREventType = 103;
pub const EVREventType_VREvent_TrackedDeviceUserInteractionEnded: EVREventType = 104;
pub const EVREventType_VREvent_IpdChanged: EVREventType = 105;
pub const EVREventType_VREvent_EnterStandbyMode: EVREventType = 106;
pub const EVREventType_VREvent_LeaveStandbyMode: EVREventType = 107;
pub const EVREventType_VREvent_TrackedDeviceRoleChanged: EVREventType = 108;
pub const EVREventType_VREvent_WatchdogWakeUpRequested: EVREventType = 109;
pub const EVREventType_VREvent_LensDistortionChanged: EVREventType = 110;
pub const EVREventType_VREvent_PropertyChanged: EVREventType = 111;
pub const EVREventType_VREvent_WirelessDisconnect: EVREventType = 112;
pub const EVREventType_VREvent_WirelessReconnect: EVREventType = 113;
pub const EVREventType_VREvent_ButtonPress: EVREventType = 200;
pub const EVREventType_VREvent_ButtonUnpress: EVREventType = 201;
pub const EVREventType_VREvent_ButtonTouch: EVREventType = 202;
pub const EVREventType_VREvent_ButtonUntouch: EVREventType = 203;
pub const EVREventType_VREvent_Modal_Cancel: EVREventType = 257;
pub const EVREventType_VREvent_MouseMove: EVREventType = 300;
pub const EVREventType_VREvent_MouseButtonDown: EVREventType = 301;
pub const EVREventType_VREvent_MouseButtonUp: EVREventType = 302;
pub const EVREventType_VREvent_FocusEnter: EVREventType = 303;
pub const EVREventType_VREvent_FocusLeave: EVREventType = 304;
pub const EVREventType_VREvent_ScrollDiscrete: EVREventType = 305;
pub const EVREventType_VREvent_TouchPadMove: EVREventType = 306;
pub const EVREventType_VREvent_OverlayFocusChanged: EVREventType = 307;
pub const EVREventType_VREvent_ReloadOverlays: EVREventType = 308;
pub const EVREventType_VREvent_ScrollSmooth: EVREventType = 309;
pub const EVREventType_VREvent_LockMousePosition: EVREventType = 310;
pub const EVREventType_VREvent_UnlockMousePosition: EVREventType = 311;
pub const EVREventType_VREvent_InputFocusCaptured: EVREventType = 400;
pub const EVREventType_VREvent_InputFocusReleased: EVREventType = 401;
pub const EVREventType_VREvent_SceneApplicationChanged: EVREventType = 404;
pub const EVREventType_VREvent_SceneFocusChanged: EVREventType = 405;
pub const EVREventType_VREvent_InputFocusChanged: EVREventType = 406;
pub const EVREventType_VREvent_SceneApplicationUsingWrongGraphicsAdapter: EVREventType = 408;
pub const EVREventType_VREvent_ActionBindingReloaded: EVREventType = 409;
pub const EVREventType_VREvent_HideRenderModels: EVREventType = 410;
pub const EVREventType_VREvent_ShowRenderModels: EVREventType = 411;
pub const EVREventType_VREvent_SceneApplicationStateChanged: EVREventType = 412;
pub const EVREventType_VREvent_ConsoleOpened: EVREventType = 420;
pub const EVREventType_VREvent_ConsoleClosed: EVREventType = 421;
pub const EVREventType_VREvent_OverlayShown: EVREventType = 500;
pub const EVREventType_VREvent_OverlayHidden: EVREventType = 501;
pub const EVREventType_VREvent_DashboardActivated: EVREventType = 502;
pub const EVREventType_VREvent_DashboardDeactivated: EVREventType = 503;
pub const EVREventType_VREvent_DashboardRequested: EVREventType = 505;
pub const EVREventType_VREvent_ResetDashboard: EVREventType = 506;
pub const EVREventType_VREvent_ImageLoaded: EVREventType = 508;
pub const EVREventType_VREvent_ShowKeyboard: EVREventType = 509;
pub const EVREventType_VREvent_HideKeyboard: EVREventType = 510;
pub const EVREventType_VREvent_OverlayGamepadFocusGained: EVREventType = 511;
pub const EVREventType_VREvent_OverlayGamepadFocusLost: EVREventType = 512;
pub const EVREventType_VREvent_OverlaySharedTextureChanged: EVREventType = 513;
pub const EVREventType_VREvent_ScreenshotTriggered: EVREventType = 516;
pub const EVREventType_VREvent_ImageFailed: EVREventType = 517;
pub const EVREventType_VREvent_DashboardOverlayCreated: EVREventType = 518;
pub const EVREventType_VREvent_SwitchGamepadFocus: EVREventType = 519;
pub const EVREventType_VREvent_RequestScreenshot: EVREventType = 520;
pub const EVREventType_VREvent_ScreenshotTaken: EVREventType = 521;
pub const EVREventType_VREvent_ScreenshotFailed: EVREventType = 522;
pub const EVREventType_VREvent_SubmitScreenshotToDashboard: EVREventType = 523;
pub const EVREventType_VREvent_ScreenshotProgressToDashboard: EVREventType = 524;
pub const EVREventType_VREvent_PrimaryDashboardDeviceChanged: EVREventType = 525;
pub const EVREventType_VREvent_RoomViewShown: EVREventType = 526;
pub const EVREventType_VREvent_RoomViewHidden: EVREventType = 527;
pub const EVREventType_VREvent_ShowUI: EVREventType = 528;
pub const EVREventType_VREvent_ShowDevTools: EVREventType = 529;
pub const EVREventType_VREvent_DesktopViewUpdating: EVREventType = 530;
pub const EVREventType_VREvent_DesktopViewReady: EVREventType = 531;
pub const EVREventType_VREvent_Notification_Shown: EVREventType = 600;
pub const EVREventType_VREvent_Notification_Hidden: EVREventType = 601;
pub const EVREventType_VREvent_Notification_BeginInteraction: EVREventType = 602;
pub const EVREventType_VREvent_Notification_Destroyed: EVREventType = 603;
pub const EVREventType_VREvent_Quit: EVREventType = 700;
pub const EVREventType_VREvent_ProcessQuit: EVREventType = 701;
pub const EVREventType_VREvent_QuitAcknowledged: EVREventType = 703;
pub const EVREventType_VREvent_DriverRequestedQuit: EVREventType = 704;
pub const EVREventType_VREvent_RestartRequested: EVREventType = 705;
pub const EVREventType_VREvent_ChaperoneDataHasChanged: EVREventType = 800;
pub const EVREventType_VREvent_ChaperoneUniverseHasChanged: EVREventType = 801;
pub const EVREventType_VREvent_ChaperoneTempDataHasChanged: EVREventType = 802;
pub const EVREventType_VREvent_ChaperoneSettingsHaveChanged: EVREventType = 803;
pub const EVREventType_VREvent_SeatedZeroPoseReset: EVREventType = 804;
pub const EVREventType_VREvent_ChaperoneFlushCache: EVREventType = 805;
pub const EVREventType_VREvent_ChaperoneRoomSetupStarting: EVREventType = 806;
pub const EVREventType_VREvent_ChaperoneRoomSetupFinished: EVREventType = 807;
pub const EVREventType_VREvent_StandingZeroPoseReset: EVREventType = 808;
pub const EVREventType_VREvent_AudioSettingsHaveChanged: EVREventType = 820;
pub const EVREventType_VREvent_BackgroundSettingHasChanged: EVREventType = 850;
pub const EVREventType_VREvent_CameraSettingsHaveChanged: EVREventType = 851;
pub const EVREventType_VREvent_ReprojectionSettingHasChanged: EVREventType = 852;
pub const EVREventType_VREvent_ModelSkinSettingsHaveChanged: EVREventType = 853;
pub const EVREventType_VREvent_EnvironmentSettingsHaveChanged: EVREventType = 854;
pub const EVREventType_VREvent_PowerSettingsHaveChanged: EVREventType = 855;
pub const EVREventType_VREvent_EnableHomeAppSettingsHaveChanged: EVREventType = 856;
pub const EVREventType_VREvent_SteamVRSectionSettingChanged: EVREventType = 857;
pub const EVREventType_VREvent_LighthouseSectionSettingChanged: EVREventType = 858;
pub const EVREventType_VREvent_NullSectionSettingChanged: EVREventType = 859;
pub const EVREventType_VREvent_UserInterfaceSectionSettingChanged: EVREventType = 860;
pub const EVREventType_VREvent_NotificationsSectionSettingChanged: EVREventType = 861;
pub const EVREventType_VREvent_KeyboardSectionSettingChanged: EVREventType = 862;
pub const EVREventType_VREvent_PerfSectionSettingChanged: EVREventType = 863;
pub const EVREventType_VREvent_DashboardSectionSettingChanged: EVREventType = 864;
pub const EVREventType_VREvent_WebInterfaceSectionSettingChanged: EVREventType = 865;
pub const EVREventType_VREvent_TrackersSectionSettingChanged: EVREventType = 866;
pub const EVREventType_VREvent_LastKnownSectionSettingChanged: EVREventType = 867;
pub const EVREventType_VREvent_DismissedWarningsSectionSettingChanged: EVREventType = 868;
pub const EVREventType_VREvent_GpuSpeedSectionSettingChanged: EVREventType = 869;
pub const EVREventType_VREvent_WindowsMRSectionSettingChanged: EVREventType = 870;
pub const EVREventType_VREvent_OtherSectionSettingChanged: EVREventType = 871;
pub const EVREventType_VREvent_StatusUpdate: EVREventType = 900;
pub const EVREventType_VREvent_WebInterface_InstallDriverCompleted: EVREventType = 950;
pub const EVREventType_VREvent_MCImageUpdated: EVREventType = 1000;
pub const EVREventType_VREvent_FirmwareUpdateStarted: EVREventType = 1100;
pub const EVREventType_VREvent_FirmwareUpdateFinished: EVREventType = 1101;
pub const EVREventType_VREvent_KeyboardClosed: EVREventType = 1200;
pub const EVREventType_VREvent_KeyboardCharInput: EVREventType = 1201;
pub const EVREventType_VREvent_KeyboardDone: EVREventType = 1202;
pub const EVREventType_VREvent_ApplicationListUpdated: EVREventType = 1303;
pub const EVREventType_VREvent_ApplicationMimeTypeLoad: EVREventType = 1304;
pub const EVREventType_VREvent_ProcessConnected: EVREventType = 1306;
pub const EVREventType_VREvent_ProcessDisconnected: EVREventType = 1307;
pub const EVREventType_VREvent_Compositor_ChaperoneBoundsShown: EVREventType = 1410;
pub const EVREventType_VREvent_Compositor_ChaperoneBoundsHidden: EVREventType = 1411;
pub const EVREventType_VREvent_Compositor_DisplayDisconnected: EVREventType = 1412;
pub const EVREventType_VREvent_Compositor_DisplayReconnected: EVREventType = 1413;
pub const EVREventType_VREvent_Compositor_HDCPError: EVREventType = 1414;
pub const EVREventType_VREvent_Compositor_ApplicationNotResponding: EVREventType = 1415;
pub const EVREventType_VREvent_Compositor_ApplicationResumed: EVREventType = 1416;
pub const EVREventType_VREvent_Compositor_OutOfVideoMemory: EVREventType = 1417;
pub const EVREventType_VREvent_Compositor_DisplayModeNotSupported: EVREventType = 1418;
pub const EVREventType_VREvent_Compositor_StageOverrideReady: EVREventType = 1419;
pub const EVREventType_VREvent_TrackedCamera_StartVideoStream: EVREventType = 1500;
pub const EVREventType_VREvent_TrackedCamera_StopVideoStream: EVREventType = 1501;
pub const EVREventType_VREvent_TrackedCamera_PauseVideoStream: EVREventType = 1502;
pub const EVREventType_VREvent_TrackedCamera_ResumeVideoStream: EVREventType = 1503;
pub const EVREventType_VREvent_TrackedCamera_EditingSurface: EVREventType = 1550;
pub const EVREventType_VREvent_PerformanceTest_EnableCapture: EVREventType = 1600;
pub const EVREventType_VREvent_PerformanceTest_DisableCapture: EVREventType = 1601;
pub const EVREventType_VREvent_PerformanceTest_FidelityLevel: EVREventType = 1602;
pub const EVREventType_VREvent_MessageOverlay_Closed: EVREventType = 1650;
pub const EVREventType_VREvent_MessageOverlayCloseRequested: EVREventType = 1651;
pub const EVREventType_VREvent_Input_HapticVibration: EVREventType = 1700;
pub const EVREventType_VREvent_Input_BindingLoadFailed: EVREventType = 1701;
pub const EVREventType_VREvent_Input_BindingLoadSuccessful: EVREventType = 1702;
pub const EVREventType_VREvent_Input_ActionManifestReloaded: EVREventType = 1703;
pub const EVREventType_VREvent_Input_ActionManifestLoadFailed: EVREventType = 1704;
pub const EVREventType_VREvent_Input_ProgressUpdate: EVREventType = 1705;
pub const EVREventType_VREvent_Input_TrackerActivated: EVREventType = 1706;
pub const EVREventType_VREvent_Input_BindingsUpdated: EVREventType = 1707;
pub const EVREventType_VREvent_Input_BindingSubscriptionChanged: EVREventType = 1708;
pub const EVREventType_VREvent_SpatialAnchors_PoseUpdated: EVREventType = 1800;
pub const EVREventType_VREvent_SpatialAnchors_DescriptorUpdated: EVREventType = 1801;
pub const EVREventType_VREvent_SpatialAnchors_RequestPoseUpdate: EVREventType = 1802;
pub const EVREventType_VREvent_SpatialAnchors_RequestDescriptorUpdate: EVREventType = 1803;
pub const EVREventType_VREvent_SystemReport_Started: EVREventType = 1900;
pub const EVREventType_VREvent_Monitor_ShowHeadsetView: EVREventType = 2000;
pub const EVREventType_VREvent_Monitor_HideHeadsetView: EVREventType = 2001;
pub const EVREventType_VREvent_VendorSpecific_Reserved_Start: EVREventType = 10000;
pub const EVREventType_VREvent_VendorSpecific_Reserved_End: EVREventType = 19999;
pub type EVREventType = ::std::os::raw::c_uint;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_Unknown: EDeviceActivityLevel = -1;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_Idle: EDeviceActivityLevel = 0;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_UserInteraction: EDeviceActivityLevel = 1;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_UserInteraction_Timeout:
    EDeviceActivityLevel = 2;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_Standby: EDeviceActivityLevel = 3;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_Idle_Timeout: EDeviceActivityLevel = 4;
pub type EDeviceActivityLevel = ::std::os::raw::c_int;
pub const EVRButtonId_k_EButton_System: EVRButtonId = 0;
pub const EVRButtonId_k_EButton_ApplicationMenu: EVRButtonId = 1;
pub const EVRButtonId_k_EButton_Grip: EVRButtonId = 2;
pub const EVRButtonId_k_EButton_DPad_Left: EVRButtonId = 3;
pub const EVRButtonId_k_EButton_DPad_Up: EVRButtonId = 4;
pub const EVRButtonId_k_EButton_DPad_Right: EVRButtonId = 5;
pub const EVRButtonId_k_EButton_DPad_Down: EVRButtonId = 6;
pub const EVRButtonId_k_EButton_A: EVRButtonId = 7;
pub const EVRButtonId_k_EButton_ProximitySensor: EVRButtonId = 31;
pub const EVRButtonId_k_EButton_Axis0: EVRButtonId = 32;
pub const EVRButtonId_k_EButton_Axis1: EVRButtonId = 33;
pub const EVRButtonId_k_EButton_Axis2: EVRButtonId = 34;
pub const EVRButtonId_k_EButton_Axis3: EVRButtonId = 35;
pub const EVRButtonId_k_EButton_Axis4: EVRButtonId = 36;
pub const EVRButtonId_k_EButton_SteamVR_Touchpad: EVRButtonId = 32;
pub const EVRButtonId_k_EButton_SteamVR_Trigger: EVRButtonId = 33;
pub const EVRButtonId_k_EButton_Dashboard_Back: EVRButtonId = 2;
pub const EVRButtonId_k_EButton_IndexController_A: EVRButtonId = 2;
pub const EVRButtonId_k_EButton_IndexController_B: EVRButtonId = 1;
pub const EVRButtonId_k_EButton_IndexController_JoyStick: EVRButtonId = 35;
pub const EVRButtonId_k_EButton_Max: EVRButtonId = 64;
pub type EVRButtonId = ::std::os::raw::c_uint;
pub const EVRMouseButton_VRMouseButton_Left: EVRMouseButton = 1;
pub const EVRMouseButton_VRMouseButton_Right: EVRMouseButton = 2;
pub const EVRMouseButton_VRMouseButton_Middle: EVRMouseButton = 4;
pub type EVRMouseButton = ::std::os::raw::c_uint;
pub const EShowUIType_ShowUI_ControllerBinding: EShowUIType = 0;
pub const EShowUIType_ShowUI_ManageTrackers: EShowUIType = 1;
pub const EShowUIType_ShowUI_Pairing: EShowUIType = 3;
pub const EShowUIType_ShowUI_Settings: EShowUIType = 4;
pub const EShowUIType_ShowUI_DebugCommands: EShowUIType = 5;
pub const EShowUIType_ShowUI_FullControllerBinding: EShowUIType = 6;
pub const EShowUIType_ShowUI_ManageDrivers: EShowUIType = 7;
pub type EShowUIType = ::std::os::raw::c_uint;
pub const EHDCPError_HDCPError_None: EHDCPError = 0;
pub const EHDCPError_HDCPError_LinkLost: EHDCPError = 1;
pub const EHDCPError_HDCPError_Tampered: EHDCPError = 2;
pub const EHDCPError_HDCPError_DeviceRevoked: EHDCPError = 3;
pub const EHDCPError_HDCPError_Unknown: EHDCPError = 4;
pub type EHDCPError = ::std::os::raw::c_uint;
pub const EVRComponentProperty_VRComponentProperty_IsStatic: EVRComponentProperty = 1;
pub const EVRComponentProperty_VRComponentProperty_IsVisible: EVRComponentProperty = 2;
pub const EVRComponentProperty_VRComponentProperty_IsTouched: EVRComponentProperty = 4;
pub const EVRComponentProperty_VRComponentProperty_IsPressed: EVRComponentProperty = 8;
pub const EVRComponentProperty_VRComponentProperty_IsScrolled: EVRComponentProperty = 16;
pub const EVRComponentProperty_VRComponentProperty_IsHighlighted: EVRComponentProperty = 32;
pub type EVRComponentProperty = ::std::os::raw::c_uint;
pub const EVRInputError_VRInputError_None: EVRInputError = 0;
pub const EVRInputError_VRInputError_NameNotFound: EVRInputError = 1;
pub const EVRInputError_VRInputError_WrongType: EVRInputError = 2;
pub const EVRInputError_VRInputError_InvalidHandle: EVRInputError = 3;
pub const EVRInputError_VRInputError_InvalidParam: EVRInputError = 4;
pub const EVRInputError_VRInputError_NoSteam: EVRInputError = 5;
pub const EVRInputError_VRInputError_MaxCapacityReached: EVRInputError = 6;
pub const EVRInputError_VRInputError_IPCError: EVRInputError = 7;
pub const EVRInputError_VRInputError_NoActiveActionSet: EVRInputError = 8;
pub const EVRInputError_VRInputError_InvalidDevice: EVRInputError = 9;
pub const EVRInputError_VRInputError_InvalidSkeleton: EVRInputError = 10;
pub const EVRInputError_VRInputError_InvalidBoneCount: EVRInputError = 11;
pub const EVRInputError_VRInputError_InvalidCompressedData: EVRInputError = 12;
pub const EVRInputError_VRInputError_NoData: EVRInputError = 13;
pub const EVRInputError_VRInputError_BufferTooSmall: EVRInputError = 14;
pub const EVRInputError_VRInputError_MismatchedActionManifest: EVRInputError = 15;
pub const EVRInputError_VRInputError_MissingSkeletonData: EVRInputError = 16;
pub const EVRInputError_VRInputError_InvalidBoneIndex: EVRInputError = 17;
pub const EVRInputError_VRInputError_InvalidPriority: EVRInputError = 18;
pub const EVRInputError_VRInputError_PermissionDenied: EVRInputError = 19;
pub const EVRInputError_VRInputError_InvalidRenderModel: EVRInputError = 20;
pub type EVRInputError = ::std::os::raw::c_uint;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_Success: EVRSpatialAnchorError = 0;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_Internal: EVRSpatialAnchorError = 1;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_UnknownHandle: EVRSpatialAnchorError = 2;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_ArrayTooSmall: EVRSpatialAnchorError = 3;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_InvalidDescriptorChar: EVRSpatialAnchorError =
    4;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_NotYetAvailable: EVRSpatialAnchorError = 5;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_NotAvailableInThisUniverse:
    EVRSpatialAnchorError = 6;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_PermanentlyUnavailable: EVRSpatialAnchorError =
    7;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_WrongDriver: EVRSpatialAnchorError = 8;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_DescriptorTooLong: EVRSpatialAnchorError = 9;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_Unknown: EVRSpatialAnchorError = 10;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_NoRoomCalibration: EVRSpatialAnchorError = 11;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_InvalidArgument: EVRSpatialAnchorError = 12;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_UnknownDriver: EVRSpatialAnchorError = 13;
pub type EVRSpatialAnchorError = ::std::os::raw::c_uint;
pub const EHiddenAreaMeshType_k_eHiddenAreaMesh_Standard: EHiddenAreaMeshType = 0;
pub const EHiddenAreaMeshType_k_eHiddenAreaMesh_Inverse: EHiddenAreaMeshType = 1;
pub const EHiddenAreaMeshType_k_eHiddenAreaMesh_LineLoop: EHiddenAreaMeshType = 2;
pub const EHiddenAreaMeshType_k_eHiddenAreaMesh_Max: EHiddenAreaMeshType = 3;
pub type EHiddenAreaMeshType = ::std::os::raw::c_uint;
pub const EVRControllerAxisType_k_eControllerAxis_None: EVRControllerAxisType = 0;
pub const EVRControllerAxisType_k_eControllerAxis_TrackPad: EVRControllerAxisType = 1;
pub const EVRControllerAxisType_k_eControllerAxis_Joystick: EVRControllerAxisType = 2;
pub const EVRControllerAxisType_k_eControllerAxis_Trigger: EVRControllerAxisType = 3;
pub type EVRControllerAxisType = ::std::os::raw::c_uint;
pub const EVRControllerEventOutputType_ControllerEventOutput_OSEvents:
    EVRControllerEventOutputType = 0;
pub const EVRControllerEventOutputType_ControllerEventOutput_VREvents:
    EVRControllerEventOutputType = 1;
pub type EVRControllerEventOutputType = ::std::os::raw::c_uint;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_BEGINNER: ECollisionBoundsStyle = 0;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_INTERMEDIATE: ECollisionBoundsStyle = 1;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_SQUARES: ECollisionBoundsStyle = 2;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_ADVANCED: ECollisionBoundsStyle = 3;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_NONE: ECollisionBoundsStyle = 4;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_COUNT: ECollisionBoundsStyle = 5;
pub type ECollisionBoundsStyle = ::std::os::raw::c_uint;
pub const EVROverlayError_VROverlayError_None: EVROverlayError = 0;
pub const EVROverlayError_VROverlayError_UnknownOverlay: EVROverlayError = 10;
pub const EVROverlayError_VROverlayError_InvalidHandle: EVROverlayError = 11;
pub const EVROverlayError_VROverlayError_PermissionDenied: EVROverlayError = 12;
pub const EVROverlayError_VROverlayError_OverlayLimitExceeded: EVROverlayError = 13;
pub const EVROverlayError_VROverlayError_WrongVisibilityType: EVROverlayError = 14;
pub const EVROverlayError_VROverlayError_KeyTooLong: EVROverlayError = 15;
pub const EVROverlayError_VROverlayError_NameTooLong: EVROverlayError = 16;
pub const EVROverlayError_VROverlayError_KeyInUse: EVROverlayError = 17;
pub const EVROverlayError_VROverlayError_WrongTransformType: EVROverlayError = 18;
pub const EVROverlayError_VROverlayError_InvalidTrackedDevice: EVROverlayError = 19;
pub const EVROverlayError_VROverlayError_InvalidParameter: EVROverlayError = 20;
pub const EVROverlayError_VROverlayError_ThumbnailCantBeDestroyed: EVROverlayError = 21;
pub const EVROverlayError_VROverlayError_ArrayTooSmall: EVROverlayError = 22;
pub const EVROverlayError_VROverlayError_RequestFailed: EVROverlayError = 23;
pub const EVROverlayError_VROverlayError_InvalidTexture: EVROverlayError = 24;
pub const EVROverlayError_VROverlayError_UnableToLoadFile: EVROverlayError = 25;
pub const EVROverlayError_VROverlayError_KeyboardAlreadyInUse: EVROverlayError = 26;
pub const EVROverlayError_VROverlayError_NoNeighbor: EVROverlayError = 27;
pub const EVROverlayError_VROverlayError_TooManyMaskPrimitives: EVROverlayError = 29;
pub const EVROverlayError_VROverlayError_BadMaskPrimitive: EVROverlayError = 30;
pub const EVROverlayError_VROverlayError_TextureAlreadyLocked: EVROverlayError = 31;
pub const EVROverlayError_VROverlayError_TextureLockCapacityReached: EVROverlayError = 32;
pub const EVROverlayError_VROverlayError_TextureNotLocked: EVROverlayError = 33;
pub type EVROverlayError = ::std::os::raw::c_uint;
pub const EVRApplicationType_VRApplication_Other: EVRApplicationType = 0;
pub const EVRApplicationType_VRApplication_Scene: EVRApplicationType = 1;
pub const EVRApplicationType_VRApplication_Overlay: EVRApplicationType = 2;
pub const EVRApplicationType_VRApplication_Background: EVRApplicationType = 3;
pub const EVRApplicationType_VRApplication_Utility: EVRApplicationType = 4;
pub const EVRApplicationType_VRApplication_VRMonitor: EVRApplicationType = 5;
pub const EVRApplicationType_VRApplication_SteamWatchdog: EVRApplicationType = 6;
pub const EVRApplicationType_VRApplication_Bootstrapper: EVRApplicationType = 7;
pub const EVRApplicationType_VRApplication_WebHelper: EVRApplicationType = 8;
pub const EVRApplicationType_VRApplication_OpenXRInstance: EVRApplicationType = 9;
pub const EVRApplicationType_VRApplication_OpenXRScene: EVRApplicationType = 10;
pub const EVRApplicationType_VRApplication_OpenXROverlay: EVRApplicationType = 11;
pub const EVRApplicationType_VRApplication_Prism: EVRApplicationType = 12;
pub const EVRApplicationType_VRApplication_Max: EVRApplicationType = 13;
pub type EVRApplicationType = ::std::os::raw::c_uint;
pub const EVRFirmwareError_VRFirmwareError_None: EVRFirmwareError = 0;
pub const EVRFirmwareError_VRFirmwareError_Success: EVRFirmwareError = 1;
pub const EVRFirmwareError_VRFirmwareError_Fail: EVRFirmwareError = 2;
pub type EVRFirmwareError = ::std::os::raw::c_uint;
pub const EVRNotificationError_VRNotificationError_OK: EVRNotificationError = 0;
pub const EVRNotificationError_VRNotificationError_InvalidNotificationId: EVRNotificationError =
    100;
pub const EVRNotificationError_VRNotificationError_NotificationQueueFull: EVRNotificationError =
    101;
pub const EVRNotificationError_VRNotificationError_InvalidOverlayHandle: EVRNotificationError = 102;
pub const EVRNotificationError_VRNotificationError_SystemWithUserValueAlreadyExists:
    EVRNotificationError = 103;
pub type EVRNotificationError = ::std::os::raw::c_uint;
pub const EVRSkeletalMotionRange_VRSkeletalMotionRange_WithController: EVRSkeletalMotionRange = 0;
pub const EVRSkeletalMotionRange_VRSkeletalMotionRange_WithoutController: EVRSkeletalMotionRange =
    1;
pub type EVRSkeletalMotionRange = ::std::os::raw::c_uint;
pub const EVRSkeletalTrackingLevel_VRSkeletalTracking_Estimated: EVRSkeletalTrackingLevel = 0;
pub const EVRSkeletalTrackingLevel_VRSkeletalTracking_Partial: EVRSkeletalTrackingLevel = 1;
pub const EVRSkeletalTrackingLevel_VRSkeletalTracking_Full: EVRSkeletalTrackingLevel = 2;
pub const EVRSkeletalTrackingLevel_VRSkeletalTrackingLevel_Count: EVRSkeletalTrackingLevel = 3;
pub const EVRSkeletalTrackingLevel_VRSkeletalTrackingLevel_Max: EVRSkeletalTrackingLevel = 2;
pub type EVRSkeletalTrackingLevel = ::std::os::raw::c_uint;
pub const EVRInitError_VRInitError_None: EVRInitError = 0;
pub const EVRInitError_VRInitError_Unknown: EVRInitError = 1;
pub const EVRInitError_VRInitError_Init_InstallationNotFound: EVRInitError = 100;
pub const EVRInitError_VRInitError_Init_InstallationCorrupt: EVRInitError = 101;
pub const EVRInitError_VRInitError_Init_VRClientDLLNotFound: EVRInitError = 102;
pub const EVRInitError_VRInitError_Init_FileNotFound: EVRInitError = 103;
pub const EVRInitError_VRInitError_Init_FactoryNotFound: EVRInitError = 104;
pub const EVRInitError_VRInitError_Init_InterfaceNotFound: EVRInitError = 105;
pub const EVRInitError_VRInitError_Init_InvalidInterface: EVRInitError = 106;
pub const EVRInitError_VRInitError_Init_UserConfigDirectoryInvalid: EVRInitError = 107;
pub const EVRInitError_VRInitError_Init_HmdNotFound: EVRInitError = 108;
pub const EVRInitError_VRInitError_Init_NotInitialized: EVRInitError = 109;
pub const EVRInitError_VRInitError_Init_PathRegistryNotFound: EVRInitError = 110;
pub const EVRInitError_VRInitError_Init_NoConfigPath: EVRInitError = 111;
pub const EVRInitError_VRInitError_Init_NoLogPath: EVRInitError = 112;
pub const EVRInitError_VRInitError_Init_PathRegistryNotWritable: EVRInitError = 113;
pub const EVRInitError_VRInitError_Init_AppInfoInitFailed: EVRInitError = 114;
pub const EVRInitError_VRInitError_Init_Retry: EVRInitError = 115;
pub const EVRInitError_VRInitError_Init_InitCanceledByUser: EVRInitError = 116;
pub const EVRInitError_VRInitError_Init_AnotherAppLaunching: EVRInitError = 117;
pub const EVRInitError_VRInitError_Init_SettingsInitFailed: EVRInitError = 118;
pub const EVRInitError_VRInitError_Init_ShuttingDown: EVRInitError = 119;
pub const EVRInitError_VRInitError_Init_TooManyObjects: EVRInitError = 120;
pub const EVRInitError_VRInitError_Init_NoServerForBackgroundApp: EVRInitError = 121;
pub const EVRInitError_VRInitError_Init_NotSupportedWithCompositor: EVRInitError = 122;
pub const EVRInitError_VRInitError_Init_NotAvailableToUtilityApps: EVRInitError = 123;
pub const EVRInitError_VRInitError_Init_Internal: EVRInitError = 124;
pub const EVRInitError_VRInitError_Init_HmdDriverIdIsNone: EVRInitError = 125;
pub const EVRInitError_VRInitError_Init_HmdNotFoundPresenceFailed: EVRInitError = 126;
pub const EVRInitError_VRInitError_Init_VRMonitorNotFound: EVRInitError = 127;
pub const EVRInitError_VRInitError_Init_VRMonitorStartupFailed: EVRInitError = 128;
pub const EVRInitError_VRInitError_Init_LowPowerWatchdogNotSupported: EVRInitError = 129;
pub const EVRInitError_VRInitError_Init_InvalidApplicationType: EVRInitError = 130;
pub const EVRInitError_VRInitError_Init_NotAvailableToWatchdogApps: EVRInitError = 131;
pub const EVRInitError_VRInitError_Init_WatchdogDisabledInSettings: EVRInitError = 132;
pub const EVRInitError_VRInitError_Init_VRDashboardNotFound: EVRInitError = 133;
pub const EVRInitError_VRInitError_Init_VRDashboardStartupFailed: EVRInitError = 134;
pub const EVRInitError_VRInitError_Init_VRHomeNotFound: EVRInitError = 135;
pub const EVRInitError_VRInitError_Init_VRHomeStartupFailed: EVRInitError = 136;
pub const EVRInitError_VRInitError_Init_RebootingBusy: EVRInitError = 137;
pub const EVRInitError_VRInitError_Init_FirmwareUpdateBusy: EVRInitError = 138;
pub const EVRInitError_VRInitError_Init_FirmwareRecoveryBusy: EVRInitError = 139;
pub const EVRInitError_VRInitError_Init_USBServiceBusy: EVRInitError = 140;
pub const EVRInitError_VRInitError_Init_VRWebHelperStartupFailed: EVRInitError = 141;
pub const EVRInitError_VRInitError_Init_TrackerManagerInitFailed: EVRInitError = 142;
pub const EVRInitError_VRInitError_Init_AlreadyRunning: EVRInitError = 143;
pub const EVRInitError_VRInitError_Init_FailedForVrMonitor: EVRInitError = 144;
pub const EVRInitError_VRInitError_Init_PropertyManagerInitFailed: EVRInitError = 145;
pub const EVRInitError_VRInitError_Init_WebServerFailed: EVRInitError = 146;
pub const EVRInitError_VRInitError_Init_IllegalTypeTransition: EVRInitError = 147;
pub const EVRInitError_VRInitError_Init_MismatchedRuntimes: EVRInitError = 148;
pub const EVRInitError_VRInitError_Init_InvalidProcessId: EVRInitError = 149;
pub const EVRInitError_VRInitError_Init_VRServiceStartupFailed: EVRInitError = 150;
pub const EVRInitError_VRInitError_Init_PrismNeedsNewDrivers: EVRInitError = 151;
pub const EVRInitError_VRInitError_Init_PrismStartupTimedOut: EVRInitError = 152;
pub const EVRInitError_VRInitError_Init_CouldNotStartPrism: EVRInitError = 153;
pub const EVRInitError_VRInitError_Init_CreateDriverDirectDeviceFailed: EVRInitError = 154;
pub const EVRInitError_VRInitError_Init_PrismExitedUnexpectedly: EVRInitError = 155;
pub const EVRInitError_VRInitError_Driver_Failed: EVRInitError = 200;
pub const EVRInitError_VRInitError_Driver_Unknown: EVRInitError = 201;
pub const EVRInitError_VRInitError_Driver_HmdUnknown: EVRInitError = 202;
pub const EVRInitError_VRInitError_Driver_NotLoaded: EVRInitError = 203;
pub const EVRInitError_VRInitError_Driver_RuntimeOutOfDate: EVRInitError = 204;
pub const EVRInitError_VRInitError_Driver_HmdInUse: EVRInitError = 205;
pub const EVRInitError_VRInitError_Driver_NotCalibrated: EVRInitError = 206;
pub const EVRInitError_VRInitError_Driver_CalibrationInvalid: EVRInitError = 207;
pub const EVRInitError_VRInitError_Driver_HmdDisplayNotFound: EVRInitError = 208;
pub const EVRInitError_VRInitError_Driver_TrackedDeviceInterfaceUnknown: EVRInitError = 209;
pub const EVRInitError_VRInitError_Driver_HmdDriverIdOutOfBounds: EVRInitError = 211;
pub const EVRInitError_VRInitError_Driver_HmdDisplayMirrored: EVRInitError = 212;
pub const EVRInitError_VRInitError_Driver_HmdDisplayNotFoundLaptop: EVRInitError = 213;
pub const EVRInitError_VRInitError_IPC_ServerInitFailed: EVRInitError = 300;
pub const EVRInitError_VRInitError_IPC_ConnectFailed: EVRInitError = 301;
pub const EVRInitError_VRInitError_IPC_SharedStateInitFailed: EVRInitError = 302;
pub const EVRInitError_VRInitError_IPC_CompositorInitFailed: EVRInitError = 303;
pub const EVRInitError_VRInitError_IPC_MutexInitFailed: EVRInitError = 304;
pub const EVRInitError_VRInitError_IPC_Failed: EVRInitError = 305;
pub const EVRInitError_VRInitError_IPC_CompositorConnectFailed: EVRInitError = 306;
pub const EVRInitError_VRInitError_IPC_CompositorInvalidConnectResponse: EVRInitError = 307;
pub const EVRInitError_VRInitError_IPC_ConnectFailedAfterMultipleAttempts: EVRInitError = 308;
pub const EVRInitError_VRInitError_IPC_ConnectFailedAfterTargetExited: EVRInitError = 309;
pub const EVRInitError_VRInitError_IPC_NamespaceUnavailable: EVRInitError = 310;
pub const EVRInitError_VRInitError_Compositor_Failed: EVRInitError = 400;
pub const EVRInitError_VRInitError_Compositor_D3D11HardwareRequired: EVRInitError = 401;
pub const EVRInitError_VRInitError_Compositor_FirmwareRequiresUpdate: EVRInitError = 402;
pub const EVRInitError_VRInitError_Compositor_OverlayInitFailed: EVRInitError = 403;
pub const EVRInitError_VRInitError_Compositor_ScreenshotsInitFailed: EVRInitError = 404;
pub const EVRInitError_VRInitError_Compositor_UnableToCreateDevice: EVRInitError = 405;
pub const EVRInitError_VRInitError_Compositor_SharedStateIsNull: EVRInitError = 406;
pub const EVRInitError_VRInitError_Compositor_NotificationManagerIsNull: EVRInitError = 407;
pub const EVRInitError_VRInitError_Compositor_ResourceManagerClientIsNull: EVRInitError = 408;
pub const EVRInitError_VRInitError_Compositor_MessageOverlaySharedStateInitFailure: EVRInitError =
    409;
pub const EVRInitError_VRInitError_Compositor_PropertiesInterfaceIsNull: EVRInitError = 410;
pub const EVRInitError_VRInitError_Compositor_CreateFullscreenWindowFailed: EVRInitError = 411;
pub const EVRInitError_VRInitError_Compositor_SettingsInterfaceIsNull: EVRInitError = 412;
pub const EVRInitError_VRInitError_Compositor_FailedToShowWindow: EVRInitError = 413;
pub const EVRInitError_VRInitError_Compositor_DistortInterfaceIsNull: EVRInitError = 414;
pub const EVRInitError_VRInitError_Compositor_DisplayFrequencyFailure: EVRInitError = 415;
pub const EVRInitError_VRInitError_Compositor_RendererInitializationFailed: EVRInitError = 416;
pub const EVRInitError_VRInitError_Compositor_DXGIFactoryInterfaceIsNull: EVRInitError = 417;
pub const EVRInitError_VRInitError_Compositor_DXGIFactoryCreateFailed: EVRInitError = 418;
pub const EVRInitError_VRInitError_Compositor_DXGIFactoryQueryFailed: EVRInitError = 419;
pub const EVRInitError_VRInitError_Compositor_InvalidAdapterDesktop: EVRInitError = 420;
pub const EVRInitError_VRInitError_Compositor_InvalidHmdAttachment: EVRInitError = 421;
pub const EVRInitError_VRInitError_Compositor_InvalidOutputDesktop: EVRInitError = 422;
pub const EVRInitError_VRInitError_Compositor_InvalidDeviceProvided: EVRInitError = 423;
pub const EVRInitError_VRInitError_Compositor_D3D11RendererInitializationFailed: EVRInitError = 424;
pub const EVRInitError_VRInitError_Compositor_FailedToFindDisplayMode: EVRInitError = 425;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateSwapChain: EVRInitError = 426;
pub const EVRInitError_VRInitError_Compositor_FailedToGetBackBuffer: EVRInitError = 427;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateRenderTarget: EVRInitError = 428;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateDXGI2SwapChain: EVRInitError = 429;
pub const EVRInitError_VRInitError_Compositor_FailedtoGetDXGI2BackBuffer: EVRInitError = 430;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateDXGI2RenderTarget: EVRInitError = 431;
pub const EVRInitError_VRInitError_Compositor_FailedToGetDXGIDeviceInterface: EVRInitError = 432;
pub const EVRInitError_VRInitError_Compositor_SelectDisplayMode: EVRInitError = 433;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateNvAPIRenderTargets: EVRInitError = 434;
pub const EVRInitError_VRInitError_Compositor_NvAPISetDisplayMode: EVRInitError = 435;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateDirectModeDisplay: EVRInitError = 436;
pub const EVRInitError_VRInitError_Compositor_InvalidHmdPropertyContainer: EVRInitError = 437;
pub const EVRInitError_VRInitError_Compositor_UpdateDisplayFrequency: EVRInitError = 438;
pub const EVRInitError_VRInitError_Compositor_CreateRasterizerState: EVRInitError = 439;
pub const EVRInitError_VRInitError_Compositor_CreateWireframeRasterizerState: EVRInitError = 440;
pub const EVRInitError_VRInitError_Compositor_CreateSamplerState: EVRInitError = 441;
pub const EVRInitError_VRInitError_Compositor_CreateClampToBorderSamplerState: EVRInitError = 442;
pub const EVRInitError_VRInitError_Compositor_CreateAnisoSamplerState: EVRInitError = 443;
pub const EVRInitError_VRInitError_Compositor_CreateOverlaySamplerState: EVRInitError = 444;
pub const EVRInitError_VRInitError_Compositor_CreatePanoramaSamplerState: EVRInitError = 445;
pub const EVRInitError_VRInitError_Compositor_CreateFontSamplerState: EVRInitError = 446;
pub const EVRInitError_VRInitError_Compositor_CreateNoBlendState: EVRInitError = 447;
pub const EVRInitError_VRInitError_Compositor_CreateBlendState: EVRInitError = 448;
pub const EVRInitError_VRInitError_Compositor_CreateAlphaBlendState: EVRInitError = 449;
pub const EVRInitError_VRInitError_Compositor_CreateBlendStateMaskR: EVRInitError = 450;
pub const EVRInitError_VRInitError_Compositor_CreateBlendStateMaskG: EVRInitError = 451;
pub const EVRInitError_VRInitError_Compositor_CreateBlendStateMaskB: EVRInitError = 452;
pub const EVRInitError_VRInitError_Compositor_CreateDepthStencilState: EVRInitError = 453;
pub const EVRInitError_VRInitError_Compositor_CreateDepthStencilStateNoWrite: EVRInitError = 454;
pub const EVRInitError_VRInitError_Compositor_CreateDepthStencilStateNoDepth: EVRInitError = 455;
pub const EVRInitError_VRInitError_Compositor_CreateFlushTexture: EVRInitError = 456;
pub const EVRInitError_VRInitError_Compositor_CreateDistortionSurfaces: EVRInitError = 457;
pub const EVRInitError_VRInitError_Compositor_CreateConstantBuffer: EVRInitError = 458;
pub const EVRInitError_VRInitError_Compositor_CreateHmdPoseConstantBuffer: EVRInitError = 459;
pub const EVRInitError_VRInitError_Compositor_CreateHmdPoseStagingConstantBuffer: EVRInitError =
    460;
pub const EVRInitError_VRInitError_Compositor_CreateSharedFrameInfoConstantBuffer: EVRInitError =
    461;
pub const EVRInitError_VRInitError_Compositor_CreateOverlayConstantBuffer: EVRInitError = 462;
pub const EVRInitError_VRInitError_Compositor_CreateSceneTextureIndexConstantBuffer: EVRInitError =
    463;
pub const EVRInitError_VRInitError_Compositor_CreateReadableSceneTextureIndexConstantBuffer:
    EVRInitError = 464;
pub const EVRInitError_VRInitError_Compositor_CreateLayerGraphicsTextureIndexConstantBuffer:
    EVRInitError = 465;
pub const EVRInitError_VRInitError_Compositor_CreateLayerComputeTextureIndexConstantBuffer:
    EVRInitError = 466;
pub const EVRInitError_VRInitError_Compositor_CreateLayerComputeSceneTextureIndexConstantBuffer:
    EVRInitError = 467;
pub const EVRInitError_VRInitError_Compositor_CreateComputeHmdPoseConstantBuffer: EVRInitError =
    468;
pub const EVRInitError_VRInitError_Compositor_CreateGeomConstantBuffer: EVRInitError = 469;
pub const EVRInitError_VRInitError_Compositor_CreatePanelMaskConstantBuffer: EVRInitError = 470;
pub const EVRInitError_VRInitError_Compositor_CreatePixelSimUBO: EVRInitError = 471;
pub const EVRInitError_VRInitError_Compositor_CreateMSAARenderTextures: EVRInitError = 472;
pub const EVRInitError_VRInitError_Compositor_CreateResolveRenderTextures: EVRInitError = 473;
pub const EVRInitError_VRInitError_Compositor_CreateComputeResolveRenderTextures: EVRInitError =
    474;
pub const EVRInitError_VRInitError_Compositor_CreateDriverDirectModeResolveTextures: EVRInitError =
    475;
pub const EVRInitError_VRInitError_Compositor_OpenDriverDirectModeResolveTextures: EVRInitError =
    476;
pub const EVRInitError_VRInitError_Compositor_CreateFallbackSyncTexture: EVRInitError = 477;
pub const EVRInitError_VRInitError_Compositor_ShareFallbackSyncTexture: EVRInitError = 478;
pub const EVRInitError_VRInitError_Compositor_CreateOverlayIndexBuffer: EVRInitError = 479;
pub const EVRInitError_VRInitError_Compositor_CreateOverlayVertexBuffer: EVRInitError = 480;
pub const EVRInitError_VRInitError_Compositor_CreateTextVertexBuffer: EVRInitError = 481;
pub const EVRInitError_VRInitError_Compositor_CreateTextIndexBuffer: EVRInitError = 482;
pub const EVRInitError_VRInitError_Compositor_CreateMirrorTextures: EVRInitError = 483;
pub const EVRInitError_VRInitError_Compositor_CreateLastFrameRenderTexture: EVRInitError = 484;
pub const EVRInitError_VRInitError_Compositor_CreateMirrorOverlay: EVRInitError = 485;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateVirtualDisplayBackbuffer: EVRInitError =
    486;
pub const EVRInitError_VRInitError_Compositor_DisplayModeNotSupported: EVRInitError = 487;
pub const EVRInitError_VRInitError_Compositor_CreateOverlayInvalidCall: EVRInitError = 488;
pub const EVRInitError_VRInitError_Compositor_CreateOverlayAlreadyInitialized: EVRInitError = 489;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateMailbox: EVRInitError = 490;
pub const EVRInitError_VRInitError_Compositor_WindowInterfaceIsNull: EVRInitError = 491;
pub const EVRInitError_VRInitError_Compositor_SystemLayerCreateInstance: EVRInitError = 492;
pub const EVRInitError_VRInitError_Compositor_SystemLayerCreateSession: EVRInitError = 493;
pub const EVRInitError_VRInitError_VendorSpecific_UnableToConnectToOculusRuntime: EVRInitError =
    1000;
pub const EVRInitError_VRInitError_VendorSpecific_WindowsNotInDevMode: EVRInitError = 1001;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_CantOpenDevice: EVRInitError = 1101;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToRequestConfigStart:
    EVRInitError = 1102;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_NoStoredConfig: EVRInitError = 1103;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_ConfigTooBig: EVRInitError = 1104;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_ConfigTooSmall: EVRInitError = 1105;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToInitZLib: EVRInitError = 1106;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_CantReadFirmwareVersion: EVRInitError =
    1107;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToSendUserDataStart: EVRInitError =
    1108;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataStart: EVRInitError =
    1109;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataNext: EVRInitError =
    1110;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UserDataAddressRange: EVRInitError =
    1111;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UserDataError: EVRInitError = 1112;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_ConfigFailedSanityCheck: EVRInitError =
    1113;
pub const EVRInitError_VRInitError_VendorSpecific_OculusRuntimeBadInstall: EVRInitError = 1114;
pub const EVRInitError_VRInitError_Steam_SteamInstallationNotFound: EVRInitError = 2000;
pub const EVRInitError_VRInitError_LastError: EVRInitError = 2001;
pub type EVRInitError = ::std::os::raw::c_uint;
pub const EVRScreenshotType_VRScreenshotType_None: EVRScreenshotType = 0;
pub const EVRScreenshotType_VRScreenshotType_Mono: EVRScreenshotType = 1;
pub const EVRScreenshotType_VRScreenshotType_Stereo: EVRScreenshotType = 2;
pub const EVRScreenshotType_VRScreenshotType_Cubemap: EVRScreenshotType = 3;
pub const EVRScreenshotType_VRScreenshotType_MonoPanorama: EVRScreenshotType = 4;
pub const EVRScreenshotType_VRScreenshotType_StereoPanorama: EVRScreenshotType = 5;
pub type EVRScreenshotType = ::std::os::raw::c_uint;
pub const EVRScreenshotPropertyFilenames_VRScreenshotPropertyFilenames_Preview:
    EVRScreenshotPropertyFilenames = 0;
pub const EVRScreenshotPropertyFilenames_VRScreenshotPropertyFilenames_VR:
    EVRScreenshotPropertyFilenames = 1;
pub type EVRScreenshotPropertyFilenames = ::std::os::raw::c_uint;
pub const EVRTrackedCameraError_VRTrackedCameraError_None: EVRTrackedCameraError = 0;
pub const EVRTrackedCameraError_VRTrackedCameraError_OperationFailed: EVRTrackedCameraError = 100;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidHandle: EVRTrackedCameraError = 101;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidFrameHeaderVersion:
    EVRTrackedCameraError = 102;
pub const EVRTrackedCameraError_VRTrackedCameraError_OutOfHandles: EVRTrackedCameraError = 103;
pub const EVRTrackedCameraError_VRTrackedCameraError_IPCFailure: EVRTrackedCameraError = 104;
pub const EVRTrackedCameraError_VRTrackedCameraError_NotSupportedForThisDevice:
    EVRTrackedCameraError = 105;
pub const EVRTrackedCameraError_VRTrackedCameraError_SharedMemoryFailure: EVRTrackedCameraError =
    106;
pub const EVRTrackedCameraError_VRTrackedCameraError_FrameBufferingFailure: EVRTrackedCameraError =
    107;
pub const EVRTrackedCameraError_VRTrackedCameraError_StreamSetupFailure: EVRTrackedCameraError =
    108;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidGLTextureId: EVRTrackedCameraError =
    109;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidSharedTextureHandle:
    EVRTrackedCameraError = 110;
pub const EVRTrackedCameraError_VRTrackedCameraError_FailedToGetGLTextureId: EVRTrackedCameraError =
    111;
pub const EVRTrackedCameraError_VRTrackedCameraError_SharedTextureFailure: EVRTrackedCameraError =
    112;
pub const EVRTrackedCameraError_VRTrackedCameraError_NoFrameAvailable: EVRTrackedCameraError = 113;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidArgument: EVRTrackedCameraError = 114;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidFrameBufferSize: EVRTrackedCameraError =
    115;
pub type EVRTrackedCameraError = ::std::os::raw::c_uint;
pub const EVRTrackedCameraFrameLayout_Mono: EVRTrackedCameraFrameLayout = 1;
pub const EVRTrackedCameraFrameLayout_Stereo: EVRTrackedCameraFrameLayout = 2;
pub const EVRTrackedCameraFrameLayout_VerticalLayout: EVRTrackedCameraFrameLayout = 16;
pub const EVRTrackedCameraFrameLayout_HorizontalLayout: EVRTrackedCameraFrameLayout = 32;
pub type EVRTrackedCameraFrameLayout = ::std::os::raw::c_uint;
pub const EVRTrackedCameraFrameType_VRTrackedCameraFrameType_Distorted: EVRTrackedCameraFrameType =
    0;
pub const EVRTrackedCameraFrameType_VRTrackedCameraFrameType_Undistorted:
    EVRTrackedCameraFrameType = 1;
pub const EVRTrackedCameraFrameType_VRTrackedCameraFrameType_MaximumUndistorted:
    EVRTrackedCameraFrameType = 2;
pub const EVRTrackedCameraFrameType_MAX_CAMERA_FRAME_TYPES: EVRTrackedCameraFrameType = 3;
pub type EVRTrackedCameraFrameType = ::std::os::raw::c_uint;
pub const EVRDistortionFunctionType_VRDistortionFunctionType_None: EVRDistortionFunctionType = 0;
pub const EVRDistortionFunctionType_VRDistortionFunctionType_FTheta: EVRDistortionFunctionType = 1;
pub const EVRDistortionFunctionType_VRDistortionFunctionType_Extended_FTheta:
    EVRDistortionFunctionType = 2;
pub const EVRDistortionFunctionType_MAX_DISTORTION_FUNCTION_TYPES: EVRDistortionFunctionType = 3;
pub type EVRDistortionFunctionType = ::std::os::raw::c_uint;
pub const EVSync_VSync_None: EVSync = 0;
pub const EVSync_VSync_WaitRender: EVSync = 1;
pub const EVSync_VSync_NoWaitRender: EVSync = 2;
pub type EVSync = ::std::os::raw::c_uint;
pub const EVRMuraCorrectionMode_Default: EVRMuraCorrectionMode = 0;
pub const EVRMuraCorrectionMode_NoCorrection: EVRMuraCorrectionMode = 1;
pub type EVRMuraCorrectionMode = ::std::os::raw::c_uint;
pub const Imu_OffScaleFlags_OffScale_AccelX: Imu_OffScaleFlags = 1;
pub const Imu_OffScaleFlags_OffScale_AccelY: Imu_OffScaleFlags = 2;
pub const Imu_OffScaleFlags_OffScale_AccelZ: Imu_OffScaleFlags = 4;
pub const Imu_OffScaleFlags_OffScale_GyroX: Imu_OffScaleFlags = 8;
pub const Imu_OffScaleFlags_OffScale_GyroY: Imu_OffScaleFlags = 16;
pub const Imu_OffScaleFlags_OffScale_GyroZ: Imu_OffScaleFlags = 32;
pub type Imu_OffScaleFlags = ::std::os::raw::c_uint;
pub const EVRApplicationError_VRApplicationError_None: EVRApplicationError = 0;
pub const EVRApplicationError_VRApplicationError_AppKeyAlreadyExists: EVRApplicationError = 100;
pub const EVRApplicationError_VRApplicationError_NoManifest: EVRApplicationError = 101;
pub const EVRApplicationError_VRApplicationError_NoApplication: EVRApplicationError = 102;
pub const EVRApplicationError_VRApplicationError_InvalidIndex: EVRApplicationError = 103;
pub const EVRApplicationError_VRApplicationError_UnknownApplication: EVRApplicationError = 104;
pub const EVRApplicationError_VRApplicationError_IPCFailed: EVRApplicationError = 105;
pub const EVRApplicationError_VRApplicationError_ApplicationAlreadyRunning: EVRApplicationError =
    106;
pub const EVRApplicationError_VRApplicationError_InvalidManifest: EVRApplicationError = 107;
pub const EVRApplicationError_VRApplicationError_InvalidApplication: EVRApplicationError = 108;
pub const EVRApplicationError_VRApplicationError_LaunchFailed: EVRApplicationError = 109;
pub const EVRApplicationError_VRApplicationError_ApplicationAlreadyStarting: EVRApplicationError =
    110;
pub const EVRApplicationError_VRApplicationError_LaunchInProgress: EVRApplicationError = 111;
pub const EVRApplicationError_VRApplicationError_OldApplicationQuitting: EVRApplicationError = 112;
pub const EVRApplicationError_VRApplicationError_TransitionAborted: EVRApplicationError = 113;
pub const EVRApplicationError_VRApplicationError_IsTemplate: EVRApplicationError = 114;
pub const EVRApplicationError_VRApplicationError_SteamVRIsExiting: EVRApplicationError = 115;
pub const EVRApplicationError_VRApplicationError_BufferTooSmall: EVRApplicationError = 200;
pub const EVRApplicationError_VRApplicationError_PropertyNotSet: EVRApplicationError = 201;
pub const EVRApplicationError_VRApplicationError_UnknownProperty: EVRApplicationError = 202;
pub const EVRApplicationError_VRApplicationError_InvalidParameter: EVRApplicationError = 203;
pub const EVRApplicationError_VRApplicationError_NotImplemented: EVRApplicationError = 300;
pub type EVRApplicationError = ::std::os::raw::c_uint;
pub const EVRApplicationProperty_VRApplicationProperty_Name_String: EVRApplicationProperty = 0;
pub const EVRApplicationProperty_VRApplicationProperty_LaunchType_String: EVRApplicationProperty =
    11;
pub const EVRApplicationProperty_VRApplicationProperty_WorkingDirectory_String:
    EVRApplicationProperty = 12;
pub const EVRApplicationProperty_VRApplicationProperty_BinaryPath_String: EVRApplicationProperty =
    13;
pub const EVRApplicationProperty_VRApplicationProperty_Arguments_String: EVRApplicationProperty =
    14;
pub const EVRApplicationProperty_VRApplicationProperty_URL_String: EVRApplicationProperty = 15;
pub const EVRApplicationProperty_VRApplicationProperty_Description_String: EVRApplicationProperty =
    50;
pub const EVRApplicationProperty_VRApplicationProperty_NewsURL_String: EVRApplicationProperty = 51;
pub const EVRApplicationProperty_VRApplicationProperty_ImagePath_String: EVRApplicationProperty =
    52;
pub const EVRApplicationProperty_VRApplicationProperty_Source_String: EVRApplicationProperty = 53;
pub const EVRApplicationProperty_VRApplicationProperty_ActionManifestURL_String:
    EVRApplicationProperty = 54;
pub const EVRApplicationProperty_VRApplicationProperty_IsDashboardOverlay_Bool:
    EVRApplicationProperty = 60;
pub const EVRApplicationProperty_VRApplicationProperty_IsTemplate_Bool: EVRApplicationProperty = 61;
pub const EVRApplicationProperty_VRApplicationProperty_IsInstanced_Bool: EVRApplicationProperty =
    62;
pub const EVRApplicationProperty_VRApplicationProperty_IsInternal_Bool: EVRApplicationProperty = 63;
pub const EVRApplicationProperty_VRApplicationProperty_WantsCompositorPauseInStandby_Bool:
    EVRApplicationProperty = 64;
pub const EVRApplicationProperty_VRApplicationProperty_IsHidden_Bool: EVRApplicationProperty = 65;
pub const EVRApplicationProperty_VRApplicationProperty_LastLaunchTime_Uint64:
    EVRApplicationProperty = 70;
pub type EVRApplicationProperty = ::std::os::raw::c_uint;
pub const EVRSceneApplicationState_None: EVRSceneApplicationState = 0;
pub const EVRSceneApplicationState_Starting: EVRSceneApplicationState = 1;
pub const EVRSceneApplicationState_Quitting: EVRSceneApplicationState = 2;
pub const EVRSceneApplicationState_Running: EVRSceneApplicationState = 3;
pub const EVRSceneApplicationState_Waiting: EVRSceneApplicationState = 4;
pub type EVRSceneApplicationState = ::std::os::raw::c_uint;
pub const ChaperoneCalibrationState_OK: ChaperoneCalibrationState = 1;
pub const ChaperoneCalibrationState_Warning: ChaperoneCalibrationState = 100;
pub const ChaperoneCalibrationState_Warning_BaseStationMayHaveMoved: ChaperoneCalibrationState =
    101;
pub const ChaperoneCalibrationState_Warning_BaseStationRemoved: ChaperoneCalibrationState = 102;
pub const ChaperoneCalibrationState_Warning_SeatedBoundsInvalid: ChaperoneCalibrationState = 103;
pub const ChaperoneCalibrationState_Error: ChaperoneCalibrationState = 200;
pub const ChaperoneCalibrationState_Error_BaseStationUninitialized: ChaperoneCalibrationState = 201;
pub const ChaperoneCalibrationState_Error_BaseStationConflict: ChaperoneCalibrationState = 202;
pub const ChaperoneCalibrationState_Error_PlayAreaInvalid: ChaperoneCalibrationState = 203;
pub const ChaperoneCalibrationState_Error_CollisionBoundsInvalid: ChaperoneCalibrationState = 204;
pub type ChaperoneCalibrationState = ::std::os::raw::c_uint;
pub const EChaperoneConfigFile_Live: EChaperoneConfigFile = 1;
pub const EChaperoneConfigFile_Temp: EChaperoneConfigFile = 2;
pub type EChaperoneConfigFile = ::std::os::raw::c_uint;
pub const EChaperoneImportFlags_EChaperoneImport_BoundsOnly: EChaperoneImportFlags = 1;
pub type EChaperoneImportFlags = ::std::os::raw::c_uint;
pub const EVRCompositorError_VRCompositorError_None: EVRCompositorError = 0;
pub const EVRCompositorError_VRCompositorError_RequestFailed: EVRCompositorError = 1;
pub const EVRCompositorError_VRCompositorError_IncompatibleVersion: EVRCompositorError = 100;
pub const EVRCompositorError_VRCompositorError_DoNotHaveFocus: EVRCompositorError = 101;
pub const EVRCompositorError_VRCompositorError_InvalidTexture: EVRCompositorError = 102;
pub const EVRCompositorError_VRCompositorError_IsNotSceneApplication: EVRCompositorError = 103;
pub const EVRCompositorError_VRCompositorError_TextureIsOnWrongDevice: EVRCompositorError = 104;
pub const EVRCompositorError_VRCompositorError_TextureUsesUnsupportedFormat: EVRCompositorError =
    105;
pub const EVRCompositorError_VRCompositorError_SharedTexturesNotSupported: EVRCompositorError = 106;
pub const EVRCompositorError_VRCompositorError_IndexOutOfRange: EVRCompositorError = 107;
pub const EVRCompositorError_VRCompositorError_AlreadySubmitted: EVRCompositorError = 108;
pub const EVRCompositorError_VRCompositorError_InvalidBounds: EVRCompositorError = 109;
pub const EVRCompositorError_VRCompositorError_AlreadySet: EVRCompositorError = 110;
pub type EVRCompositorError = ::std::os::raw::c_uint;
pub const EVRCompositorTimingMode_VRCompositorTimingMode_Implicit: EVRCompositorTimingMode = 0;
pub const EVRCompositorTimingMode_VRCompositorTimingMode_Explicit_RuntimePerformsPostPresentHandoff : EVRCompositorTimingMode = 1 ;
pub const EVRCompositorTimingMode_VRCompositorTimingMode_Explicit_ApplicationPerformsPostPresentHandoff : EVRCompositorTimingMode = 2 ;
pub type EVRCompositorTimingMode = ::std::os::raw::c_uint;
pub const VROverlayInputMethod_None: VROverlayInputMethod = 0;
pub const VROverlayInputMethod_Mouse: VROverlayInputMethod = 1;
pub type VROverlayInputMethod = ::std::os::raw::c_uint;
pub const VROverlayTransformType_VROverlayTransform_Invalid: VROverlayTransformType = -1;
pub const VROverlayTransformType_VROverlayTransform_Absolute: VROverlayTransformType = 0;
pub const VROverlayTransformType_VROverlayTransform_TrackedDeviceRelative: VROverlayTransformType =
    1;
pub const VROverlayTransformType_VROverlayTransform_SystemOverlay: VROverlayTransformType = 2;
pub const VROverlayTransformType_VROverlayTransform_TrackedComponent: VROverlayTransformType = 3;
pub const VROverlayTransformType_VROverlayTransform_Cursor: VROverlayTransformType = 4;
pub const VROverlayTransformType_VROverlayTransform_DashboardTab: VROverlayTransformType = 5;
pub const VROverlayTransformType_VROverlayTransform_DashboardThumb: VROverlayTransformType = 6;
pub const VROverlayTransformType_VROverlayTransform_Mountable: VROverlayTransformType = 7;
pub const VROverlayTransformType_VROverlayTransform_Projection: VROverlayTransformType = 8;
pub type VROverlayTransformType = ::std::os::raw::c_int;
pub const VROverlayFlags_NoDashboardTab: VROverlayFlags = 8;
pub const VROverlayFlags_SendVRDiscreteScrollEvents: VROverlayFlags = 64;
pub const VROverlayFlags_SendVRTouchpadEvents: VROverlayFlags = 128;
pub const VROverlayFlags_ShowTouchPadScrollWheel: VROverlayFlags = 256;
pub const VROverlayFlags_TransferOwnershipToInternalProcess: VROverlayFlags = 512;
pub const VROverlayFlags_SideBySide_Parallel: VROverlayFlags = 1024;
pub const VROverlayFlags_SideBySide_Crossed: VROverlayFlags = 2048;
pub const VROverlayFlags_Panorama: VROverlayFlags = 4096;
pub const VROverlayFlags_StereoPanorama: VROverlayFlags = 8192;
pub const VROverlayFlags_SortWithNonSceneOverlays: VROverlayFlags = 16384;
pub const VROverlayFlags_VisibleInDashboard: VROverlayFlags = 32768;
pub const VROverlayFlags_MakeOverlaysInteractiveIfVisible: VROverlayFlags = 65536;
pub const VROverlayFlags_SendVRSmoothScrollEvents: VROverlayFlags = 131072;
pub const VROverlayFlags_ProtectedContent: VROverlayFlags = 262144;
pub const VROverlayFlags_HideLaserIntersection: VROverlayFlags = 524288;
pub const VROverlayFlags_WantsModalBehavior: VROverlayFlags = 1048576;
pub const VROverlayFlags_IsPremultiplied: VROverlayFlags = 2097152;
pub type VROverlayFlags = ::std::os::raw::c_uint;
pub const VRMessageOverlayResponse_ButtonPress_0: VRMessageOverlayResponse = 0;
pub const VRMessageOverlayResponse_ButtonPress_1: VRMessageOverlayResponse = 1;
pub const VRMessageOverlayResponse_ButtonPress_2: VRMessageOverlayResponse = 2;
pub const VRMessageOverlayResponse_ButtonPress_3: VRMessageOverlayResponse = 3;
pub const VRMessageOverlayResponse_CouldntFindSystemOverlay: VRMessageOverlayResponse = 4;
pub const VRMessageOverlayResponse_CouldntFindOrCreateClientOverlay: VRMessageOverlayResponse = 5;
pub const VRMessageOverlayResponse_ApplicationQuit: VRMessageOverlayResponse = 6;
pub type VRMessageOverlayResponse = ::std::os::raw::c_uint;
pub const EGamepadTextInputMode_k_EGamepadTextInputModeNormal: EGamepadTextInputMode = 0;
pub const EGamepadTextInputMode_k_EGamepadTextInputModePassword: EGamepadTextInputMode = 1;
pub const EGamepadTextInputMode_k_EGamepadTextInputModeSubmit: EGamepadTextInputMode = 2;
pub type EGamepadTextInputMode = ::std::os::raw::c_uint;
pub const EGamepadTextInputLineMode_k_EGamepadTextInputLineModeSingleLine:
    EGamepadTextInputLineMode = 0;
pub const EGamepadTextInputLineMode_k_EGamepadTextInputLineModeMultipleLines:
    EGamepadTextInputLineMode = 1;
pub type EGamepadTextInputLineMode = ::std::os::raw::c_uint;
pub const EVROverlayIntersectionMaskPrimitiveType_OverlayIntersectionPrimitiveType_Rectangle:
    EVROverlayIntersectionMaskPrimitiveType = 0;
pub const EVROverlayIntersectionMaskPrimitiveType_OverlayIntersectionPrimitiveType_Circle:
    EVROverlayIntersectionMaskPrimitiveType = 1;
pub type EVROverlayIntersectionMaskPrimitiveType = ::std::os::raw::c_uint;
pub const EKeyboardFlags_KeyboardFlag_Minimal: EKeyboardFlags = 1;
pub const EKeyboardFlags_KeyboardFlag_Modal: EKeyboardFlags = 2;
pub type EKeyboardFlags = ::std::os::raw::c_uint;
pub const EDeviceType_DeviceType_Invalid: EDeviceType = -1;
pub const EDeviceType_DeviceType_DirectX11: EDeviceType = 0;
pub const EDeviceType_DeviceType_Vulkan: EDeviceType = 1;
pub type EDeviceType = ::std::os::raw::c_int;
pub const HeadsetViewMode_t_HeadsetViewMode_Left: HeadsetViewMode_t = 0;
pub const HeadsetViewMode_t_HeadsetViewMode_Right: HeadsetViewMode_t = 1;
pub const HeadsetViewMode_t_HeadsetViewMode_Both: HeadsetViewMode_t = 2;
pub type HeadsetViewMode_t = ::std::os::raw::c_uint;
pub const EVRRenderModelError_VRRenderModelError_None: EVRRenderModelError = 0;
pub const EVRRenderModelError_VRRenderModelError_Loading: EVRRenderModelError = 100;
pub const EVRRenderModelError_VRRenderModelError_NotSupported: EVRRenderModelError = 200;
pub const EVRRenderModelError_VRRenderModelError_InvalidArg: EVRRenderModelError = 300;
pub const EVRRenderModelError_VRRenderModelError_InvalidModel: EVRRenderModelError = 301;
pub const EVRRenderModelError_VRRenderModelError_NoShapes: EVRRenderModelError = 302;
pub const EVRRenderModelError_VRRenderModelError_MultipleShapes: EVRRenderModelError = 303;
pub const EVRRenderModelError_VRRenderModelError_TooManyVertices: EVRRenderModelError = 304;
pub const EVRRenderModelError_VRRenderModelError_MultipleTextures: EVRRenderModelError = 305;
pub const EVRRenderModelError_VRRenderModelError_BufferTooSmall: EVRRenderModelError = 306;
pub const EVRRenderModelError_VRRenderModelError_NotEnoughNormals: EVRRenderModelError = 307;
pub const EVRRenderModelError_VRRenderModelError_NotEnoughTexCoords: EVRRenderModelError = 308;
pub const EVRRenderModelError_VRRenderModelError_InvalidTexture: EVRRenderModelError = 400;
pub type EVRRenderModelError = ::std::os::raw::c_uint;
pub const EVRRenderModelTextureFormat_VRRenderModelTextureFormat_RGBA8_SRGB:
    EVRRenderModelTextureFormat = 0;
pub const EVRRenderModelTextureFormat_VRRenderModelTextureFormat_BC2: EVRRenderModelTextureFormat =
    1;
pub const EVRRenderModelTextureFormat_VRRenderModelTextureFormat_BC4: EVRRenderModelTextureFormat =
    2;
pub const EVRRenderModelTextureFormat_VRRenderModelTextureFormat_BC7: EVRRenderModelTextureFormat =
    3;
pub const EVRRenderModelTextureFormat_VRRenderModelTextureFormat_BC7_SRGB:
    EVRRenderModelTextureFormat = 4;
pub type EVRRenderModelTextureFormat = ::std::os::raw::c_uint;
pub const EVRNotificationType_Transient: EVRNotificationType = 0;
pub const EVRNotificationType_Persistent: EVRNotificationType = 1;
pub const EVRNotificationType_Transient_SystemWithUserValue: EVRNotificationType = 2;
pub type EVRNotificationType = ::std::os::raw::c_uint;
pub const EVRNotificationStyle_None: EVRNotificationStyle = 0;
pub const EVRNotificationStyle_Application: EVRNotificationStyle = 100;
pub const EVRNotificationStyle_Contact_Disabled: EVRNotificationStyle = 200;
pub const EVRNotificationStyle_Contact_Enabled: EVRNotificationStyle = 201;
pub const EVRNotificationStyle_Contact_Active: EVRNotificationStyle = 202;
pub type EVRNotificationStyle = ::std::os::raw::c_uint;
pub const EVRSettingsError_VRSettingsError_None: EVRSettingsError = 0;
pub const EVRSettingsError_VRSettingsError_IPCFailed: EVRSettingsError = 1;
pub const EVRSettingsError_VRSettingsError_WriteFailed: EVRSettingsError = 2;
pub const EVRSettingsError_VRSettingsError_ReadFailed: EVRSettingsError = 3;
pub const EVRSettingsError_VRSettingsError_JsonParseFailed: EVRSettingsError = 4;
pub const EVRSettingsError_VRSettingsError_UnsetSettingHasNoDefault: EVRSettingsError = 5;
pub type EVRSettingsError = ::std::os::raw::c_uint;
pub const EVRScreenshotError_VRScreenshotError_None: EVRScreenshotError = 0;
pub const EVRScreenshotError_VRScreenshotError_RequestFailed: EVRScreenshotError = 1;
pub const EVRScreenshotError_VRScreenshotError_IncompatibleVersion: EVRScreenshotError = 100;
pub const EVRScreenshotError_VRScreenshotError_NotFound: EVRScreenshotError = 101;
pub const EVRScreenshotError_VRScreenshotError_BufferTooSmall: EVRScreenshotError = 102;
pub const EVRScreenshotError_VRScreenshotError_ScreenshotAlreadyInProgress: EVRScreenshotError =
    108;
pub type EVRScreenshotError = ::std::os::raw::c_uint;
pub const EVRSkeletalTransformSpace_VRSkeletalTransformSpace_Model: EVRSkeletalTransformSpace = 0;
pub const EVRSkeletalTransformSpace_VRSkeletalTransformSpace_Parent: EVRSkeletalTransformSpace = 1;
pub type EVRSkeletalTransformSpace = ::std::os::raw::c_uint;
pub const EVRSkeletalReferencePose_VRSkeletalReferencePose_BindPose: EVRSkeletalReferencePose = 0;
pub const EVRSkeletalReferencePose_VRSkeletalReferencePose_OpenHand: EVRSkeletalReferencePose = 1;
pub const EVRSkeletalReferencePose_VRSkeletalReferencePose_Fist: EVRSkeletalReferencePose = 2;
pub const EVRSkeletalReferencePose_VRSkeletalReferencePose_GripLimit: EVRSkeletalReferencePose = 3;
pub type EVRSkeletalReferencePose = ::std::os::raw::c_uint;
pub const EVRFinger_VRFinger_Thumb: EVRFinger = 0;
pub const EVRFinger_VRFinger_Index: EVRFinger = 1;
pub const EVRFinger_VRFinger_Middle: EVRFinger = 2;
pub const EVRFinger_VRFinger_Ring: EVRFinger = 3;
pub const EVRFinger_VRFinger_Pinky: EVRFinger = 4;
pub const EVRFinger_VRFinger_Count: EVRFinger = 5;
pub type EVRFinger = ::std::os::raw::c_uint;
pub const EVRFingerSplay_VRFingerSplay_Thumb_Index: EVRFingerSplay = 0;
pub const EVRFingerSplay_VRFingerSplay_Index_Middle: EVRFingerSplay = 1;
pub const EVRFingerSplay_VRFingerSplay_Middle_Ring: EVRFingerSplay = 2;
pub const EVRFingerSplay_VRFingerSplay_Ring_Pinky: EVRFingerSplay = 3;
pub const EVRFingerSplay_VRFingerSplay_Count: EVRFingerSplay = 4;
pub type EVRFingerSplay = ::std::os::raw::c_uint;
pub const EVRSummaryType_VRSummaryType_FromAnimation: EVRSummaryType = 0;
pub const EVRSummaryType_VRSummaryType_FromDevice: EVRSummaryType = 1;
pub type EVRSummaryType = ::std::os::raw::c_uint;
pub const EVRInputFilterCancelType_VRInputFilterCancel_Timers: EVRInputFilterCancelType = 0;
pub const EVRInputFilterCancelType_VRInputFilterCancel_Momentum: EVRInputFilterCancelType = 1;
pub type EVRInputFilterCancelType = ::std::os::raw::c_uint;
pub const EVRInputStringBits_VRInputString_Hand: EVRInputStringBits = 1;
pub const EVRInputStringBits_VRInputString_ControllerType: EVRInputStringBits = 2;
pub const EVRInputStringBits_VRInputString_InputSource: EVRInputStringBits = 4;
pub const EVRInputStringBits_VRInputString_All: EVRInputStringBits = -1;
pub type EVRInputStringBits = ::std::os::raw::c_int;
pub const EIOBufferError_IOBuffer_Success: EIOBufferError = 0;
pub const EIOBufferError_IOBuffer_OperationFailed: EIOBufferError = 100;
pub const EIOBufferError_IOBuffer_InvalidHandle: EIOBufferError = 101;
pub const EIOBufferError_IOBuffer_InvalidArgument: EIOBufferError = 102;
pub const EIOBufferError_IOBuffer_PathExists: EIOBufferError = 103;
pub const EIOBufferError_IOBuffer_PathDoesNotExist: EIOBufferError = 104;
pub const EIOBufferError_IOBuffer_Permission: EIOBufferError = 105;
pub type EIOBufferError = ::std::os::raw::c_uint;
pub const EIOBufferMode_IOBufferMode_Read: EIOBufferMode = 1;
pub const EIOBufferMode_IOBufferMode_Write: EIOBufferMode = 2;
pub const EIOBufferMode_IOBufferMode_Create: EIOBufferMode = 512;
pub type EIOBufferMode = ::std::os::raw::c_uint;
pub const EVRDebugError_VRDebugError_Success: EVRDebugError = 0;
pub const EVRDebugError_VRDebugError_BadParameter: EVRDebugError = 1;
pub type EVRDebugError = ::std::os::raw::c_uint;
pub const EPropertyWriteType_PropertyWrite_Set: EPropertyWriteType = 0;
pub const EPropertyWriteType_PropertyWrite_Erase: EPropertyWriteType = 1;
pub const EPropertyWriteType_PropertyWrite_SetError: EPropertyWriteType = 2;
pub type EPropertyWriteType = ::std::os::raw::c_uint;
pub const EBlockQueueError_BlockQueueError_None: EBlockQueueError = 0;
pub const EBlockQueueError_BlockQueueError_QueueAlreadyExists: EBlockQueueError = 1;
pub const EBlockQueueError_BlockQueueError_QueueNotFound: EBlockQueueError = 2;
pub const EBlockQueueError_BlockQueueError_BlockNotAvailable: EBlockQueueError = 3;
pub const EBlockQueueError_BlockQueueError_InvalidHandle: EBlockQueueError = 4;
pub const EBlockQueueError_BlockQueueError_InvalidParam: EBlockQueueError = 5;
pub const EBlockQueueError_BlockQueueError_ParamMismatch: EBlockQueueError = 6;
pub const EBlockQueueError_BlockQueueError_InternalError: EBlockQueueError = 7;
pub const EBlockQueueError_BlockQueueError_AlreadyInitialized: EBlockQueueError = 8;
pub const EBlockQueueError_BlockQueueError_OperationIsServerOnly: EBlockQueueError = 9;
pub const EBlockQueueError_BlockQueueError_TooManyConnections: EBlockQueueError = 10;
pub type EBlockQueueError = ::std::os::raw::c_uint;
pub const EBlockQueueReadType_BlockQueueRead_Latest: EBlockQueueReadType = 0;
pub const EBlockQueueReadType_BlockQueueRead_New: EBlockQueueReadType = 1;
pub const EBlockQueueReadType_BlockQueueRead_Next: EBlockQueueReadType = 2;
pub type EBlockQueueReadType = ::std::os::raw::c_uint;
pub type TrackedDeviceIndex_t = u32;
pub type VRNotificationId = u32;
pub type VROverlayHandle_t = u64;
pub type SpatialAnchorHandle_t = u32;
pub type glSharedTextureHandle_t = *mut ::std::os::raw::c_void;
pub type glInt_t = i32;
pub type glUInt_t = u32;
pub type SharedTextureHandle_t = u64;
pub type DriverId_t = u32;
pub type WebConsoleHandle_t = u64;
pub type DriverHandle_t = PropertyContainerHandle_t;
pub type VRComponentProperties = u32;
pub type BoneIndex_t = i32;
pub type TrackedCameraHandle_t = u64;
pub type ScreenshotHandle_t = u32;
pub type TextureID_t = i32;
pub type IOBufferHandle_t = u64;
pub type VrProfilerEventHandle_t = u64;
pub use self::ECollisionBoundsStyle as CollisionBoundsStyle_t;
pub use self::EColorSpace as ColorSpace;
pub use self::ETrackedDeviceClass as TrackedDeviceClass;
pub use self::ETrackedDeviceProperty as TrackedDeviceProperty;
pub use self::ETrackedPropertyError as TrackedPropertyError;
pub use self::ETrackingResult as HmdTrackingResult;
pub use self::ETrackingUniverseOrigin as TrackingUniverseOrigin;
pub use self::EVRCompositorError as VRCompositorError;
pub use self::EVREye as Hmd_Eye;
pub use self::EVRFirmwareError as VRFirmwareError;
pub use self::EVRInitError as HmdError;
pub use self::EVROverlayError as VROverlayError;
pub use self::EVRScreenshotError as VRScreenshotsError;
pub use self::EVRState as VRState_t;
pub use self::EVRSubmitFlags as VRSubmitFlags_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdMatrix34_t {
    pub m: [[f32; 4usize]; 3usize],
}
#[test]
fn bindgen_test_layout_HmdMatrix34_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdMatrix34_t>(),
        48usize,
        concat!("Size of: ", stringify!(HmdMatrix34_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdMatrix34_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdMatrix34_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdMatrix34_t>())).m as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdMatrix34_t),
            "::",
            stringify!(m)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdMatrix33_t {
    pub m: [[f32; 3usize]; 3usize],
}
#[test]
fn bindgen_test_layout_HmdMatrix33_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdMatrix33_t>(),
        36usize,
        concat!("Size of: ", stringify!(HmdMatrix33_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdMatrix33_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdMatrix33_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdMatrix33_t>())).m as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdMatrix33_t),
            "::",
            stringify!(m)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdMatrix44_t {
    pub m: [[f32; 4usize]; 4usize],
}
#[test]
fn bindgen_test_layout_HmdMatrix44_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdMatrix44_t>(),
        64usize,
        concat!("Size of: ", stringify!(HmdMatrix44_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdMatrix44_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdMatrix44_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdMatrix44_t>())).m as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdMatrix44_t),
            "::",
            stringify!(m)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdVector3_t {
    pub v: [f32; 3usize],
}
#[test]
fn bindgen_test_layout_HmdVector3_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdVector3_t>(),
        12usize,
        concat!("Size of: ", stringify!(HmdVector3_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdVector3_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdVector3_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdVector3_t>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdVector3_t),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdVector4_t {
    pub v: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_HmdVector4_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdVector4_t>(),
        16usize,
        concat!("Size of: ", stringify!(HmdVector4_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdVector4_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdVector4_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdVector4_t>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdVector4_t),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdVector3d_t {
    pub v: [f64; 3usize],
}
#[test]
fn bindgen_test_layout_HmdVector3d_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdVector3d_t>(),
        24usize,
        concat!("Size of: ", stringify!(HmdVector3d_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdVector3d_t>(),
        8usize,
        concat!("Alignment of ", stringify!(HmdVector3d_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdVector3d_t>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdVector3d_t),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdVector2_t {
    pub v: [f32; 2usize],
}
#[test]
fn bindgen_test_layout_HmdVector2_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdVector2_t>(),
        8usize,
        concat!("Size of: ", stringify!(HmdVector2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdVector2_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdVector2_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdVector2_t>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdVector2_t),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdQuaternion_t {
    pub w: f64,
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[test]
fn bindgen_test_layout_HmdQuaternion_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdQuaternion_t>(),
        32usize,
        concat!("Size of: ", stringify!(HmdQuaternion_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdQuaternion_t>(),
        8usize,
        concat!("Alignment of ", stringify!(HmdQuaternion_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdQuaternion_t>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdQuaternion_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdQuaternion_t>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdQuaternion_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdQuaternion_t>())).y as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdQuaternion_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdQuaternion_t>())).z as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdQuaternion_t),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdQuaternionf_t {
    pub w: f32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_HmdQuaternionf_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdQuaternionf_t>(),
        16usize,
        concat!("Size of: ", stringify!(HmdQuaternionf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdQuaternionf_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdQuaternionf_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdQuaternionf_t>())).w as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdQuaternionf_t),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdQuaternionf_t>())).x as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdQuaternionf_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdQuaternionf_t>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdQuaternionf_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdQuaternionf_t>())).z as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdQuaternionf_t),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdColor_t {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[test]
fn bindgen_test_layout_HmdColor_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdColor_t>(),
        16usize,
        concat!("Size of: ", stringify!(HmdColor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdColor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdColor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdColor_t>())).r as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdColor_t),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdColor_t>())).g as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdColor_t),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdColor_t>())).b as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdColor_t),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdColor_t>())).a as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdColor_t),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdQuad_t {
    pub vCorners: [HmdVector3_t; 4usize],
}
#[test]
fn bindgen_test_layout_HmdQuad_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdQuad_t>(),
        48usize,
        concat!("Size of: ", stringify!(HmdQuad_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdQuad_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdQuad_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdQuad_t>())).vCorners as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdQuad_t),
            "::",
            stringify!(vCorners)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdRect2_t {
    pub vTopLeft: HmdVector2_t,
    pub vBottomRight: HmdVector2_t,
}
#[test]
fn bindgen_test_layout_HmdRect2_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdRect2_t>(),
        16usize,
        concat!("Size of: ", stringify!(HmdRect2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdRect2_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdRect2_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdRect2_t>())).vTopLeft as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdRect2_t),
            "::",
            stringify!(vTopLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HmdRect2_t>())).vBottomRight as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HmdRect2_t),
            "::",
            stringify!(vBottomRight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRBoneTransform_t {
    pub position: HmdVector4_t,
    pub orientation: HmdQuaternionf_t,
}
#[test]
fn bindgen_test_layout_VRBoneTransform_t() {
    assert_eq!(
        ::std::mem::size_of::<VRBoneTransform_t>(),
        32usize,
        concat!("Size of: ", stringify!(VRBoneTransform_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRBoneTransform_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VRBoneTransform_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRBoneTransform_t>())).position as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VRBoneTransform_t),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRBoneTransform_t>())).orientation as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VRBoneTransform_t),
            "::",
            stringify!(orientation)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DistortionCoordinates_t {
    pub rfRed: [f32; 2usize],
    pub rfGreen: [f32; 2usize],
    pub rfBlue: [f32; 2usize],
}
#[test]
fn bindgen_test_layout_DistortionCoordinates_t() {
    assert_eq!(
        ::std::mem::size_of::<DistortionCoordinates_t>(),
        24usize,
        concat!("Size of: ", stringify!(DistortionCoordinates_t))
    );
    assert_eq!(
        ::std::mem::align_of::<DistortionCoordinates_t>(),
        4usize,
        concat!("Alignment of ", stringify!(DistortionCoordinates_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DistortionCoordinates_t>())).rfRed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DistortionCoordinates_t),
            "::",
            stringify!(rfRed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DistortionCoordinates_t>())).rfGreen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DistortionCoordinates_t),
            "::",
            stringify!(rfGreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DistortionCoordinates_t>())).rfBlue as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DistortionCoordinates_t),
            "::",
            stringify!(rfBlue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub eType: ETextureType,
    pub eColorSpace: EColorSpace,
}
#[test]
fn bindgen_test_layout_Texture_t() {
    assert_eq!(
        ::std::mem::size_of::<Texture_t>(),
        16usize,
        concat!("Size of: ", stringify!(Texture_t))
    );
    assert_eq!(
        ::std::mem::align_of::<Texture_t>(),
        8usize,
        concat!("Alignment of ", stringify!(Texture_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Texture_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Texture_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Texture_t>())).eType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Texture_t),
            "::",
            stringify!(eType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Texture_t>())).eColorSpace as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Texture_t),
            "::",
            stringify!(eColorSpace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TrackedDevicePose_t {
    pub mDeviceToAbsoluteTracking: HmdMatrix34_t,
    pub vVelocity: HmdVector3_t,
    pub vAngularVelocity: HmdVector3_t,
    pub eTrackingResult: ETrackingResult,
    pub bPoseIsValid: bool,
    pub bDeviceIsConnected: bool,
}
#[test]
fn bindgen_test_layout_TrackedDevicePose_t() {
    assert_eq!(
        ::std::mem::size_of::<TrackedDevicePose_t>(),
        80usize,
        concat!("Size of: ", stringify!(TrackedDevicePose_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TrackedDevicePose_t>(),
        4usize,
        concat!("Alignment of ", stringify!(TrackedDevicePose_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TrackedDevicePose_t>())).mDeviceToAbsoluteTracking as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TrackedDevicePose_t),
            "::",
            stringify!(mDeviceToAbsoluteTracking)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TrackedDevicePose_t>())).vVelocity as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TrackedDevicePose_t),
            "::",
            stringify!(vVelocity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TrackedDevicePose_t>())).vAngularVelocity as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(TrackedDevicePose_t),
            "::",
            stringify!(vAngularVelocity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TrackedDevicePose_t>())).eTrackingResult as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TrackedDevicePose_t),
            "::",
            stringify!(eTrackingResult)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TrackedDevicePose_t>())).bPoseIsValid as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(TrackedDevicePose_t),
            "::",
            stringify!(bPoseIsValid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TrackedDevicePose_t>())).bDeviceIsConnected as *const _ as usize
        },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(TrackedDevicePose_t),
            "::",
            stringify!(bDeviceIsConnected)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureBounds_t {
    pub uMin: f32,
    pub vMin: f32,
    pub uMax: f32,
    pub vMax: f32,
}
#[test]
fn bindgen_test_layout_VRTextureBounds_t() {
    assert_eq!(
        ::std::mem::size_of::<VRTextureBounds_t>(),
        16usize,
        concat!("Size of: ", stringify!(VRTextureBounds_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRTextureBounds_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VRTextureBounds_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRTextureBounds_t>())).uMin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureBounds_t),
            "::",
            stringify!(uMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRTextureBounds_t>())).vMin as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureBounds_t),
            "::",
            stringify!(vMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRTextureBounds_t>())).uMax as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureBounds_t),
            "::",
            stringify!(uMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRTextureBounds_t>())).vMax as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureBounds_t),
            "::",
            stringify!(vMax)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureWithPose_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub eType: ETextureType,
    pub eColorSpace: EColorSpace,
    pub mDeviceToAbsoluteTracking: HmdMatrix34_t,
}
#[test]
fn bindgen_test_layout_VRTextureWithPose_t() {
    assert_eq!(
        ::std::mem::size_of::<VRTextureWithPose_t>(),
        64usize,
        concat!("Size of: ", stringify!(VRTextureWithPose_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRTextureWithPose_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VRTextureWithPose_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRTextureWithPose_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureWithPose_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRTextureWithPose_t>())).eType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureWithPose_t),
            "::",
            stringify!(eType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRTextureWithPose_t>())).eColorSpace as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureWithPose_t),
            "::",
            stringify!(eColorSpace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRTextureWithPose_t>())).mDeviceToAbsoluteTracking as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureWithPose_t),
            "::",
            stringify!(mDeviceToAbsoluteTracking)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureDepthInfo_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub mProjection: HmdMatrix44_t,
    pub vRange: HmdVector2_t,
}
#[test]
fn bindgen_test_layout_VRTextureDepthInfo_t() {
    assert_eq!(
        ::std::mem::size_of::<VRTextureDepthInfo_t>(),
        80usize,
        concat!("Size of: ", stringify!(VRTextureDepthInfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRTextureDepthInfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VRTextureDepthInfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRTextureDepthInfo_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureDepthInfo_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRTextureDepthInfo_t>())).mProjection as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureDepthInfo_t),
            "::",
            stringify!(mProjection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRTextureDepthInfo_t>())).vRange as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureDepthInfo_t),
            "::",
            stringify!(vRange)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureWithDepth_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub eType: ETextureType,
    pub eColorSpace: EColorSpace,
    pub depth: VRTextureDepthInfo_t,
}
#[test]
fn bindgen_test_layout_VRTextureWithDepth_t() {
    assert_eq!(
        ::std::mem::size_of::<VRTextureWithDepth_t>(),
        96usize,
        concat!("Size of: ", stringify!(VRTextureWithDepth_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRTextureWithDepth_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VRTextureWithDepth_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRTextureWithDepth_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureWithDepth_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRTextureWithDepth_t>())).eType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureWithDepth_t),
            "::",
            stringify!(eType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRTextureWithDepth_t>())).eColorSpace as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureWithDepth_t),
            "::",
            stringify!(eColorSpace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRTextureWithDepth_t>())).depth as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureWithDepth_t),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureWithPoseAndDepth_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub eType: ETextureType,
    pub eColorSpace: EColorSpace,
    pub mDeviceToAbsoluteTracking: HmdMatrix34_t,
    pub depth: VRTextureDepthInfo_t,
}
#[test]
fn bindgen_test_layout_VRTextureWithPoseAndDepth_t() {
    assert_eq!(
        ::std::mem::size_of::<VRTextureWithPoseAndDepth_t>(),
        144usize,
        concat!("Size of: ", stringify!(VRTextureWithPoseAndDepth_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRTextureWithPoseAndDepth_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VRTextureWithPoseAndDepth_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRTextureWithPoseAndDepth_t>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureWithPoseAndDepth_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRTextureWithPoseAndDepth_t>())).eType as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureWithPoseAndDepth_t),
            "::",
            stringify!(eType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRTextureWithPoseAndDepth_t>())).eColorSpace as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureWithPoseAndDepth_t),
            "::",
            stringify!(eColorSpace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRTextureWithPoseAndDepth_t>())).mDeviceToAbsoluteTracking
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureWithPoseAndDepth_t),
            "::",
            stringify!(mDeviceToAbsoluteTracking)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRTextureWithPoseAndDepth_t>())).depth as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VRTextureWithPoseAndDepth_t),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRVulkanTextureData_t {
    pub m_nImage: u64,
    pub m_pDevice: *mut VkDevice_T,
    pub m_pPhysicalDevice: *mut VkPhysicalDevice_T,
    pub m_pInstance: *mut VkInstance_T,
    pub m_pQueue: *mut VkQueue_T,
    pub m_nQueueFamilyIndex: u32,
    pub m_nWidth: u32,
    pub m_nHeight: u32,
    pub m_nFormat: u32,
    pub m_nSampleCount: u32,
}
#[test]
fn bindgen_test_layout_VRVulkanTextureData_t() {
    assert_eq!(
        ::std::mem::size_of::<VRVulkanTextureData_t>(),
        64usize,
        concat!("Size of: ", stringify!(VRVulkanTextureData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRVulkanTextureData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VRVulkanTextureData_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRVulkanTextureData_t>())).m_nImage as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanTextureData_t),
            "::",
            stringify!(m_nImage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRVulkanTextureData_t>())).m_pDevice as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanTextureData_t),
            "::",
            stringify!(m_pDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRVulkanTextureData_t>())).m_pPhysicalDevice as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanTextureData_t),
            "::",
            stringify!(m_pPhysicalDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRVulkanTextureData_t>())).m_pInstance as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanTextureData_t),
            "::",
            stringify!(m_pInstance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRVulkanTextureData_t>())).m_pQueue as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanTextureData_t),
            "::",
            stringify!(m_pQueue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRVulkanTextureData_t>())).m_nQueueFamilyIndex as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanTextureData_t),
            "::",
            stringify!(m_nQueueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRVulkanTextureData_t>())).m_nWidth as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanTextureData_t),
            "::",
            stringify!(m_nWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRVulkanTextureData_t>())).m_nHeight as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanTextureData_t),
            "::",
            stringify!(m_nHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRVulkanTextureData_t>())).m_nFormat as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanTextureData_t),
            "::",
            stringify!(m_nFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRVulkanTextureData_t>())).m_nSampleCount as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanTextureData_t),
            "::",
            stringify!(m_nSampleCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRVulkanTextureArrayData_t {
    pub m_unArrayIndex: u32,
    pub m_unArraySize: u32,
}
#[test]
fn bindgen_test_layout_VRVulkanTextureArrayData_t() {
    assert_eq!(
        ::std::mem::size_of::<VRVulkanTextureArrayData_t>(),
        8usize,
        concat!("Size of: ", stringify!(VRVulkanTextureArrayData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRVulkanTextureArrayData_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VRVulkanTextureArrayData_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRVulkanTextureArrayData_t>())).m_unArrayIndex as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanTextureArrayData_t),
            "::",
            stringify!(m_unArrayIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRVulkanTextureArrayData_t>())).m_unArraySize as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanTextureArrayData_t),
            "::",
            stringify!(m_unArraySize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct D3D12TextureData_t {
    pub m_pResource: *mut ID3D12Resource,
    pub m_pCommandQueue: *mut ID3D12CommandQueue,
    pub m_nNodeMask: u32,
}
#[test]
fn bindgen_test_layout_D3D12TextureData_t() {
    assert_eq!(
        ::std::mem::size_of::<D3D12TextureData_t>(),
        24usize,
        concat!("Size of: ", stringify!(D3D12TextureData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<D3D12TextureData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(D3D12TextureData_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<D3D12TextureData_t>())).m_pResource as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(D3D12TextureData_t),
            "::",
            stringify!(m_pResource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<D3D12TextureData_t>())).m_pCommandQueue as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(D3D12TextureData_t),
            "::",
            stringify!(m_pCommandQueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<D3D12TextureData_t>())).m_nNodeMask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(D3D12TextureData_t),
            "::",
            stringify!(m_nNodeMask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Controller_t {
    pub button: u32,
}
#[test]
fn bindgen_test_layout_VREvent_Controller_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Controller_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_Controller_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Controller_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_Controller_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Controller_t>())).button as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Controller_t),
            "::",
            stringify!(button)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Mouse_t {
    pub x: f32,
    pub y: f32,
    pub button: u32,
}
#[test]
fn bindgen_test_layout_VREvent_Mouse_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Mouse_t>(),
        12usize,
        concat!("Size of: ", stringify!(VREvent_Mouse_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Mouse_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_Mouse_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Mouse_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Mouse_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Mouse_t>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Mouse_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Mouse_t>())).button as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Mouse_t),
            "::",
            stringify!(button)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Scroll_t {
    pub xdelta: f32,
    pub ydelta: f32,
    pub unused: u32,
    pub viewportscale: f32,
}
#[test]
fn bindgen_test_layout_VREvent_Scroll_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Scroll_t>(),
        16usize,
        concat!("Size of: ", stringify!(VREvent_Scroll_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Scroll_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_Scroll_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Scroll_t>())).xdelta as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Scroll_t),
            "::",
            stringify!(xdelta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Scroll_t>())).ydelta as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Scroll_t),
            "::",
            stringify!(ydelta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Scroll_t>())).unused as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Scroll_t),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Scroll_t>())).viewportscale as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Scroll_t),
            "::",
            stringify!(viewportscale)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_TouchPadMove_t {
    pub bFingerDown: bool,
    pub flSecondsFingerDown: f32,
    pub fValueXFirst: f32,
    pub fValueYFirst: f32,
    pub fValueXRaw: f32,
    pub fValueYRaw: f32,
}
#[test]
fn bindgen_test_layout_VREvent_TouchPadMove_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_TouchPadMove_t>(),
        24usize,
        concat!("Size of: ", stringify!(VREvent_TouchPadMove_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_TouchPadMove_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_TouchPadMove_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_TouchPadMove_t>())).bFingerDown as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_TouchPadMove_t),
            "::",
            stringify!(bFingerDown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_TouchPadMove_t>())).flSecondsFingerDown as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_TouchPadMove_t),
            "::",
            stringify!(flSecondsFingerDown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_TouchPadMove_t>())).fValueXFirst as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_TouchPadMove_t),
            "::",
            stringify!(fValueXFirst)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_TouchPadMove_t>())).fValueYFirst as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_TouchPadMove_t),
            "::",
            stringify!(fValueYFirst)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_TouchPadMove_t>())).fValueXRaw as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_TouchPadMove_t),
            "::",
            stringify!(fValueXRaw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_TouchPadMove_t>())).fValueYRaw as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_TouchPadMove_t),
            "::",
            stringify!(fValueYRaw)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Notification_t {
    pub ulUserValue: u64,
    pub notificationId: u32,
}
#[test]
fn bindgen_test_layout_VREvent_Notification_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Notification_t>(),
        16usize,
        concat!("Size of: ", stringify!(VREvent_Notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Notification_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_Notification_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_Notification_t>())).ulUserValue as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Notification_t),
            "::",
            stringify!(ulUserValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_Notification_t>())).notificationId as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Notification_t),
            "::",
            stringify!(notificationId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Process_t {
    pub pid: u32,
    pub oldPid: u32,
    pub bForced: bool,
    pub bConnectionLost: bool,
}
#[test]
fn bindgen_test_layout_VREvent_Process_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Process_t>(),
        12usize,
        concat!("Size of: ", stringify!(VREvent_Process_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Process_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_Process_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Process_t>())).pid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Process_t),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Process_t>())).oldPid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Process_t),
            "::",
            stringify!(oldPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Process_t>())).bForced as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Process_t),
            "::",
            stringify!(bForced)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_Process_t>())).bConnectionLost as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Process_t),
            "::",
            stringify!(bConnectionLost)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Overlay_t {
    pub overlayHandle: u64,
    pub devicePath: u64,
    pub memoryBlockId: u64,
}
#[test]
fn bindgen_test_layout_VREvent_Overlay_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Overlay_t>(),
        24usize,
        concat!("Size of: ", stringify!(VREvent_Overlay_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Overlay_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_Overlay_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Overlay_t>())).overlayHandle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Overlay_t),
            "::",
            stringify!(overlayHandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Overlay_t>())).devicePath as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Overlay_t),
            "::",
            stringify!(devicePath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Overlay_t>())).memoryBlockId as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Overlay_t),
            "::",
            stringify!(memoryBlockId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Status_t {
    pub statusState: u32,
}
#[test]
fn bindgen_test_layout_VREvent_Status_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Status_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_Status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Status_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_Status_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Status_t>())).statusState as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Status_t),
            "::",
            stringify!(statusState)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Keyboard_t {
    pub cNewInput: [::std::os::raw::c_char; 8usize],
    pub uUserValue: u64,
}
#[test]
fn bindgen_test_layout_VREvent_Keyboard_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Keyboard_t>(),
        16usize,
        concat!("Size of: ", stringify!(VREvent_Keyboard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Keyboard_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_Keyboard_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Keyboard_t>())).cNewInput as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Keyboard_t),
            "::",
            stringify!(cNewInput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Keyboard_t>())).uUserValue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Keyboard_t),
            "::",
            stringify!(uUserValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Ipd_t {
    pub ipdMeters: f32,
}
#[test]
fn bindgen_test_layout_VREvent_Ipd_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Ipd_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_Ipd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Ipd_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_Ipd_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Ipd_t>())).ipdMeters as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Ipd_t),
            "::",
            stringify!(ipdMeters)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Chaperone_t {
    pub m_nPreviousUniverse: u64,
    pub m_nCurrentUniverse: u64,
}
#[test]
fn bindgen_test_layout_VREvent_Chaperone_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Chaperone_t>(),
        16usize,
        concat!("Size of: ", stringify!(VREvent_Chaperone_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Chaperone_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_Chaperone_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_Chaperone_t>())).m_nPreviousUniverse as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Chaperone_t),
            "::",
            stringify!(m_nPreviousUniverse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_Chaperone_t>())).m_nCurrentUniverse as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Chaperone_t),
            "::",
            stringify!(m_nCurrentUniverse)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Reserved_t {
    pub reserved0: u64,
    pub reserved1: u64,
    pub reserved2: u64,
    pub reserved3: u64,
    pub reserved4: u64,
    pub reserved5: u64,
}
#[test]
fn bindgen_test_layout_VREvent_Reserved_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Reserved_t>(),
        48usize,
        concat!("Size of: ", stringify!(VREvent_Reserved_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Reserved_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_Reserved_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Reserved_t>())).reserved0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Reserved_t),
            "::",
            stringify!(reserved0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Reserved_t>())).reserved1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Reserved_t),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Reserved_t>())).reserved2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Reserved_t),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Reserved_t>())).reserved3 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Reserved_t),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Reserved_t>())).reserved4 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Reserved_t),
            "::",
            stringify!(reserved4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Reserved_t>())).reserved5 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Reserved_t),
            "::",
            stringify!(reserved5)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_PerformanceTest_t {
    pub m_nFidelityLevel: u32,
}
#[test]
fn bindgen_test_layout_VREvent_PerformanceTest_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_PerformanceTest_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_PerformanceTest_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_PerformanceTest_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_PerformanceTest_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_PerformanceTest_t>())).m_nFidelityLevel as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_PerformanceTest_t),
            "::",
            stringify!(m_nFidelityLevel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_SeatedZeroPoseReset_t {
    pub bResetBySystemMenu: bool,
}
#[test]
fn bindgen_test_layout_VREvent_SeatedZeroPoseReset_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_SeatedZeroPoseReset_t>(),
        1usize,
        concat!("Size of: ", stringify!(VREvent_SeatedZeroPoseReset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_SeatedZeroPoseReset_t>(),
        1usize,
        concat!("Alignment of ", stringify!(VREvent_SeatedZeroPoseReset_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_SeatedZeroPoseReset_t>())).bResetBySystemMenu as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_SeatedZeroPoseReset_t),
            "::",
            stringify!(bResetBySystemMenu)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Screenshot_t {
    pub handle: u32,
    pub type_: u32,
}
#[test]
fn bindgen_test_layout_VREvent_Screenshot_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Screenshot_t>(),
        8usize,
        concat!("Size of: ", stringify!(VREvent_Screenshot_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Screenshot_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_Screenshot_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Screenshot_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Screenshot_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Screenshot_t>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Screenshot_t),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_ScreenshotProgress_t {
    pub progress: f32,
}
#[test]
fn bindgen_test_layout_VREvent_ScreenshotProgress_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_ScreenshotProgress_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_ScreenshotProgress_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_ScreenshotProgress_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_ScreenshotProgress_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_ScreenshotProgress_t>())).progress as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_ScreenshotProgress_t),
            "::",
            stringify!(progress)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_ApplicationLaunch_t {
    pub pid: u32,
    pub unArgsHandle: u32,
}
#[test]
fn bindgen_test_layout_VREvent_ApplicationLaunch_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_ApplicationLaunch_t>(),
        8usize,
        concat!("Size of: ", stringify!(VREvent_ApplicationLaunch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_ApplicationLaunch_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_ApplicationLaunch_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_ApplicationLaunch_t>())).pid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_ApplicationLaunch_t),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_ApplicationLaunch_t>())).unArgsHandle as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_ApplicationLaunch_t),
            "::",
            stringify!(unArgsHandle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_EditingCameraSurface_t {
    pub overlayHandle: u64,
    pub nVisualMode: u32,
}
#[test]
fn bindgen_test_layout_VREvent_EditingCameraSurface_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_EditingCameraSurface_t>(),
        16usize,
        concat!("Size of: ", stringify!(VREvent_EditingCameraSurface_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_EditingCameraSurface_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_EditingCameraSurface_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_EditingCameraSurface_t>())).overlayHandle as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_EditingCameraSurface_t),
            "::",
            stringify!(overlayHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_EditingCameraSurface_t>())).nVisualMode as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_EditingCameraSurface_t),
            "::",
            stringify!(nVisualMode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_MessageOverlay_t {
    pub unVRMessageOverlayResponse: u32,
}
#[test]
fn bindgen_test_layout_VREvent_MessageOverlay_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_MessageOverlay_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_MessageOverlay_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_MessageOverlay_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_MessageOverlay_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_MessageOverlay_t>())).unVRMessageOverlayResponse
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_MessageOverlay_t),
            "::",
            stringify!(unVRMessageOverlayResponse)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Property_t {
    pub container: PropertyContainerHandle_t,
    pub prop: ETrackedDeviceProperty,
}
#[test]
fn bindgen_test_layout_VREvent_Property_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Property_t>(),
        16usize,
        concat!("Size of: ", stringify!(VREvent_Property_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Property_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_Property_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Property_t>())).container as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Property_t),
            "::",
            stringify!(container)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Property_t>())).prop as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Property_t),
            "::",
            stringify!(prop)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_HapticVibration_t {
    pub containerHandle: u64,
    pub componentHandle: u64,
    pub fDurationSeconds: f32,
    pub fFrequency: f32,
    pub fAmplitude: f32,
}
#[test]
fn bindgen_test_layout_VREvent_HapticVibration_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_HapticVibration_t>(),
        32usize,
        concat!("Size of: ", stringify!(VREvent_HapticVibration_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_HapticVibration_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_HapticVibration_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_HapticVibration_t>())).containerHandle as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_HapticVibration_t),
            "::",
            stringify!(containerHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_HapticVibration_t>())).componentHandle as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_HapticVibration_t),
            "::",
            stringify!(componentHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_HapticVibration_t>())).fDurationSeconds as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_HapticVibration_t),
            "::",
            stringify!(fDurationSeconds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_HapticVibration_t>())).fFrequency as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_HapticVibration_t),
            "::",
            stringify!(fFrequency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_HapticVibration_t>())).fAmplitude as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_HapticVibration_t),
            "::",
            stringify!(fAmplitude)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_WebConsole_t {
    pub webConsoleHandle: WebConsoleHandle_t,
}
#[test]
fn bindgen_test_layout_VREvent_WebConsole_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_WebConsole_t>(),
        8usize,
        concat!("Size of: ", stringify!(VREvent_WebConsole_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_WebConsole_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_WebConsole_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_WebConsole_t>())).webConsoleHandle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_WebConsole_t),
            "::",
            stringify!(webConsoleHandle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_InputBindingLoad_t {
    pub ulAppContainer: PropertyContainerHandle_t,
    pub pathMessage: u64,
    pub pathUrl: u64,
    pub pathControllerType: u64,
}
#[test]
fn bindgen_test_layout_VREvent_InputBindingLoad_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_InputBindingLoad_t>(),
        32usize,
        concat!("Size of: ", stringify!(VREvent_InputBindingLoad_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_InputBindingLoad_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_InputBindingLoad_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_InputBindingLoad_t>())).ulAppContainer as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_InputBindingLoad_t),
            "::",
            stringify!(ulAppContainer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_InputBindingLoad_t>())).pathMessage as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_InputBindingLoad_t),
            "::",
            stringify!(pathMessage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_InputBindingLoad_t>())).pathUrl as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_InputBindingLoad_t),
            "::",
            stringify!(pathUrl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_InputBindingLoad_t>())).pathControllerType as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_InputBindingLoad_t),
            "::",
            stringify!(pathControllerType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_InputActionManifestLoad_t {
    pub pathAppKey: u64,
    pub pathMessage: u64,
    pub pathMessageParam: u64,
    pub pathManifestPath: u64,
}
#[test]
fn bindgen_test_layout_VREvent_InputActionManifestLoad_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_InputActionManifestLoad_t>(),
        32usize,
        concat!("Size of: ", stringify!(VREvent_InputActionManifestLoad_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_InputActionManifestLoad_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VREvent_InputActionManifestLoad_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_InputActionManifestLoad_t>())).pathAppKey as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_InputActionManifestLoad_t),
            "::",
            stringify!(pathAppKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_InputActionManifestLoad_t>())).pathMessage as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_InputActionManifestLoad_t),
            "::",
            stringify!(pathMessage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_InputActionManifestLoad_t>())).pathMessageParam
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_InputActionManifestLoad_t),
            "::",
            stringify!(pathMessageParam)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_InputActionManifestLoad_t>())).pathManifestPath
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_InputActionManifestLoad_t),
            "::",
            stringify!(pathManifestPath)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_SpatialAnchor_t {
    pub unHandle: SpatialAnchorHandle_t,
}
#[test]
fn bindgen_test_layout_VREvent_SpatialAnchor_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_SpatialAnchor_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_SpatialAnchor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_SpatialAnchor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_SpatialAnchor_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_SpatialAnchor_t>())).unHandle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_SpatialAnchor_t),
            "::",
            stringify!(unHandle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_ProgressUpdate_t {
    pub ulApplicationPropertyContainer: u64,
    pub pathDevice: u64,
    pub pathInputSource: u64,
    pub pathProgressAction: u64,
    pub pathIcon: u64,
    pub fProgress: f32,
}
#[test]
fn bindgen_test_layout_VREvent_ProgressUpdate_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_ProgressUpdate_t>(),
        48usize,
        concat!("Size of: ", stringify!(VREvent_ProgressUpdate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_ProgressUpdate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_ProgressUpdate_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_ProgressUpdate_t>())).ulApplicationPropertyContainer
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_ProgressUpdate_t),
            "::",
            stringify!(ulApplicationPropertyContainer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_ProgressUpdate_t>())).pathDevice as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_ProgressUpdate_t),
            "::",
            stringify!(pathDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_ProgressUpdate_t>())).pathInputSource as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_ProgressUpdate_t),
            "::",
            stringify!(pathInputSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_ProgressUpdate_t>())).pathProgressAction as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_ProgressUpdate_t),
            "::",
            stringify!(pathProgressAction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_ProgressUpdate_t>())).pathIcon as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_ProgressUpdate_t),
            "::",
            stringify!(pathIcon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_ProgressUpdate_t>())).fProgress as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_ProgressUpdate_t),
            "::",
            stringify!(fProgress)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_ShowUI_t {
    pub eType: EShowUIType,
}
#[test]
fn bindgen_test_layout_VREvent_ShowUI_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_ShowUI_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_ShowUI_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_ShowUI_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_ShowUI_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_ShowUI_t>())).eType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_ShowUI_t),
            "::",
            stringify!(eType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_ShowDevTools_t {
    pub nBrowserIdentifier: i32,
}
#[test]
fn bindgen_test_layout_VREvent_ShowDevTools_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_ShowDevTools_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_ShowDevTools_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_ShowDevTools_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_ShowDevTools_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_ShowDevTools_t>())).nBrowserIdentifier as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_ShowDevTools_t),
            "::",
            stringify!(nBrowserIdentifier)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_HDCPError_t {
    pub eCode: EHDCPError,
}
#[test]
fn bindgen_test_layout_VREvent_HDCPError_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_HDCPError_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_HDCPError_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_HDCPError_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_HDCPError_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_HDCPError_t>())).eCode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_HDCPError_t),
            "::",
            stringify!(eCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderModel_ComponentState_t {
    pub mTrackingToComponentRenderModel: HmdMatrix34_t,
    pub mTrackingToComponentLocal: HmdMatrix34_t,
    pub uProperties: VRComponentProperties,
}
#[test]
fn bindgen_test_layout_RenderModel_ComponentState_t() {
    assert_eq!(
        ::std::mem::size_of::<RenderModel_ComponentState_t>(),
        100usize,
        concat!("Size of: ", stringify!(RenderModel_ComponentState_t))
    );
    assert_eq!(
        ::std::mem::align_of::<RenderModel_ComponentState_t>(),
        4usize,
        concat!("Alignment of ", stringify!(RenderModel_ComponentState_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RenderModel_ComponentState_t>())).mTrackingToComponentRenderModel
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_ComponentState_t),
            "::",
            stringify!(mTrackingToComponentRenderModel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RenderModel_ComponentState_t>())).mTrackingToComponentLocal
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_ComponentState_t),
            "::",
            stringify!(mTrackingToComponentLocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RenderModel_ComponentState_t>())).uProperties as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_ComponentState_t),
            "::",
            stringify!(uProperties)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HiddenAreaMesh_t {
    pub pVertexData: *mut HmdVector2_t,
    pub unTriangleCount: u32,
}
#[test]
fn bindgen_test_layout_HiddenAreaMesh_t() {
    assert_eq!(
        ::std::mem::size_of::<HiddenAreaMesh_t>(),
        16usize,
        concat!("Size of: ", stringify!(HiddenAreaMesh_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HiddenAreaMesh_t>(),
        8usize,
        concat!("Alignment of ", stringify!(HiddenAreaMesh_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HiddenAreaMesh_t>())).pVertexData as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HiddenAreaMesh_t),
            "::",
            stringify!(pVertexData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HiddenAreaMesh_t>())).unTriangleCount as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HiddenAreaMesh_t),
            "::",
            stringify!(unTriangleCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRControllerAxis_t {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_VRControllerAxis_t() {
    assert_eq!(
        ::std::mem::size_of::<VRControllerAxis_t>(),
        8usize,
        concat!("Size of: ", stringify!(VRControllerAxis_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRControllerAxis_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VRControllerAxis_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRControllerAxis_t>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VRControllerAxis_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRControllerAxis_t>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VRControllerAxis_t),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRControllerState_t {
    pub unPacketNum: u32,
    pub ulButtonPressed: u64,
    pub ulButtonTouched: u64,
    pub rAxis: [VRControllerAxis_t; 5usize],
}
#[test]
fn bindgen_test_layout_VRControllerState_t() {
    assert_eq!(
        ::std::mem::size_of::<VRControllerState_t>(),
        64usize,
        concat!("Size of: ", stringify!(VRControllerState_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRControllerState_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VRControllerState_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRControllerState_t>())).unPacketNum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VRControllerState_t),
            "::",
            stringify!(unPacketNum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRControllerState_t>())).ulButtonPressed as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VRControllerState_t),
            "::",
            stringify!(ulButtonPressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRControllerState_t>())).ulButtonTouched as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VRControllerState_t),
            "::",
            stringify!(ulButtonTouched)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRControllerState_t>())).rAxis as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VRControllerState_t),
            "::",
            stringify!(rAxis)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CameraVideoStreamFrameHeader_t {
    pub eFrameType: EVRTrackedCameraFrameType,
    pub nWidth: u32,
    pub nHeight: u32,
    pub nBytesPerPixel: u32,
    pub nFrameSequence: u32,
    pub trackedDevicePose: TrackedDevicePose_t,
    pub ulFrameExposureTime: u64,
}
#[test]
fn bindgen_test_layout_CameraVideoStreamFrameHeader_t() {
    assert_eq!(
        ::std::mem::size_of::<CameraVideoStreamFrameHeader_t>(),
        112usize,
        concat!("Size of: ", stringify!(CameraVideoStreamFrameHeader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<CameraVideoStreamFrameHeader_t>(),
        8usize,
        concat!("Alignment of ", stringify!(CameraVideoStreamFrameHeader_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CameraVideoStreamFrameHeader_t>())).eFrameType as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CameraVideoStreamFrameHeader_t),
            "::",
            stringify!(eFrameType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CameraVideoStreamFrameHeader_t>())).nWidth as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CameraVideoStreamFrameHeader_t),
            "::",
            stringify!(nWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CameraVideoStreamFrameHeader_t>())).nHeight as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CameraVideoStreamFrameHeader_t),
            "::",
            stringify!(nHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CameraVideoStreamFrameHeader_t>())).nBytesPerPixel as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CameraVideoStreamFrameHeader_t),
            "::",
            stringify!(nBytesPerPixel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CameraVideoStreamFrameHeader_t>())).nFrameSequence as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CameraVideoStreamFrameHeader_t),
            "::",
            stringify!(nFrameSequence)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CameraVideoStreamFrameHeader_t>())).trackedDevicePose as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CameraVideoStreamFrameHeader_t),
            "::",
            stringify!(trackedDevicePose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CameraVideoStreamFrameHeader_t>())).ulFrameExposureTime
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CameraVideoStreamFrameHeader_t),
            "::",
            stringify!(ulFrameExposureTime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Compositor_FrameTiming {
    pub m_nSize: u32,
    pub m_nFrameIndex: u32,
    pub m_nNumFramePresents: u32,
    pub m_nNumMisPresented: u32,
    pub m_nNumDroppedFrames: u32,
    pub m_nReprojectionFlags: u32,
    pub m_flSystemTimeInSeconds: f64,
    pub m_flPreSubmitGpuMs: f32,
    pub m_flPostSubmitGpuMs: f32,
    pub m_flTotalRenderGpuMs: f32,
    pub m_flCompositorRenderGpuMs: f32,
    pub m_flCompositorRenderCpuMs: f32,
    pub m_flCompositorIdleCpuMs: f32,
    pub m_flClientFrameIntervalMs: f32,
    pub m_flPresentCallCpuMs: f32,
    pub m_flWaitForPresentCpuMs: f32,
    pub m_flSubmitFrameMs: f32,
    pub m_flWaitGetPosesCalledMs: f32,
    pub m_flNewPosesReadyMs: f32,
    pub m_flNewFrameReadyMs: f32,
    pub m_flCompositorUpdateStartMs: f32,
    pub m_flCompositorUpdateEndMs: f32,
    pub m_flCompositorRenderStartMs: f32,
    pub m_HmdPose: TrackedDevicePose_t,
    pub m_nNumVSyncsReadyForUse: u32,
    pub m_nNumVSyncsToFirstView: u32,
}
#[test]
fn bindgen_test_layout_Compositor_FrameTiming() {
    assert_eq!(
        ::std::mem::size_of::<Compositor_FrameTiming>(),
        184usize,
        concat!("Size of: ", stringify!(Compositor_FrameTiming))
    );
    assert_eq!(
        ::std::mem::align_of::<Compositor_FrameTiming>(),
        8usize,
        concat!("Alignment of ", stringify!(Compositor_FrameTiming))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_nSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_nSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_nFrameIndex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_nFrameIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_nNumFramePresents as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_nNumFramePresents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_nNumMisPresented as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_nNumMisPresented)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_nNumDroppedFrames as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_nNumDroppedFrames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_nReprojectionFlags as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_nReprojectionFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flSystemTimeInSeconds as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flSystemTimeInSeconds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flPreSubmitGpuMs as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flPreSubmitGpuMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flPostSubmitGpuMs as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flPostSubmitGpuMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flTotalRenderGpuMs as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flTotalRenderGpuMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flCompositorRenderGpuMs as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flCompositorRenderGpuMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flCompositorRenderCpuMs as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flCompositorRenderCpuMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flCompositorIdleCpuMs as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flCompositorIdleCpuMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flClientFrameIntervalMs as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flClientFrameIntervalMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flPresentCallCpuMs as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flPresentCallCpuMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flWaitForPresentCpuMs as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flWaitForPresentCpuMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flSubmitFrameMs as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flSubmitFrameMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flWaitGetPosesCalledMs as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flWaitGetPosesCalledMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flNewPosesReadyMs as *const _
                as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flNewPosesReadyMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flNewFrameReadyMs as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flNewFrameReadyMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flCompositorUpdateStartMs
                as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flCompositorUpdateStartMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flCompositorUpdateEndMs as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flCompositorUpdateEndMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_flCompositorRenderStartMs
                as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_flCompositorRenderStartMs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_HmdPose as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_HmdPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_nNumVSyncsReadyForUse as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_nNumVSyncsReadyForUse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_FrameTiming>())).m_nNumVSyncsToFirstView as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_FrameTiming),
            "::",
            stringify!(m_nNumVSyncsToFirstView)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Compositor_BenchmarkResults {
    pub m_flMegaPixelsPerSecond: f32,
    pub m_flHmdRecommendedMegaPixelsPerSecond: f32,
}
#[test]
fn bindgen_test_layout_Compositor_BenchmarkResults() {
    assert_eq!(
        ::std::mem::size_of::<Compositor_BenchmarkResults>(),
        8usize,
        concat!("Size of: ", stringify!(Compositor_BenchmarkResults))
    );
    assert_eq!(
        ::std::mem::align_of::<Compositor_BenchmarkResults>(),
        4usize,
        concat!("Alignment of ", stringify!(Compositor_BenchmarkResults))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_BenchmarkResults>())).m_flMegaPixelsPerSecond
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_BenchmarkResults),
            "::",
            stringify!(m_flMegaPixelsPerSecond)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_BenchmarkResults>()))
                .m_flHmdRecommendedMegaPixelsPerSecond as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_BenchmarkResults),
            "::",
            stringify!(m_flHmdRecommendedMegaPixelsPerSecond)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DriverDirectMode_FrameTiming {
    pub m_nSize: u32,
    pub m_nNumFramePresents: u32,
    pub m_nNumMisPresented: u32,
    pub m_nNumDroppedFrames: u32,
    pub m_nReprojectionFlags: u32,
}
#[test]
fn bindgen_test_layout_DriverDirectMode_FrameTiming() {
    assert_eq!(
        ::std::mem::size_of::<DriverDirectMode_FrameTiming>(),
        20usize,
        concat!("Size of: ", stringify!(DriverDirectMode_FrameTiming))
    );
    assert_eq!(
        ::std::mem::align_of::<DriverDirectMode_FrameTiming>(),
        4usize,
        concat!("Alignment of ", stringify!(DriverDirectMode_FrameTiming))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DriverDirectMode_FrameTiming>())).m_nSize as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DriverDirectMode_FrameTiming),
            "::",
            stringify!(m_nSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DriverDirectMode_FrameTiming>())).m_nNumFramePresents as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DriverDirectMode_FrameTiming),
            "::",
            stringify!(m_nNumFramePresents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DriverDirectMode_FrameTiming>())).m_nNumMisPresented as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DriverDirectMode_FrameTiming),
            "::",
            stringify!(m_nNumMisPresented)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DriverDirectMode_FrameTiming>())).m_nNumDroppedFrames as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DriverDirectMode_FrameTiming),
            "::",
            stringify!(m_nNumDroppedFrames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DriverDirectMode_FrameTiming>())).m_nReprojectionFlags
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DriverDirectMode_FrameTiming),
            "::",
            stringify!(m_nReprojectionFlags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImuSample_t {
    pub fSampleTime: f64,
    pub vAccel: HmdVector3d_t,
    pub vGyro: HmdVector3d_t,
    pub unOffScaleFlags: u32,
}
#[test]
fn bindgen_test_layout_ImuSample_t() {
    assert_eq!(
        ::std::mem::size_of::<ImuSample_t>(),
        64usize,
        concat!("Size of: ", stringify!(ImuSample_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImuSample_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImuSample_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImuSample_t>())).fSampleTime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImuSample_t),
            "::",
            stringify!(fSampleTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImuSample_t>())).vAccel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImuSample_t),
            "::",
            stringify!(vAccel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImuSample_t>())).vGyro as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImuSample_t),
            "::",
            stringify!(vGyro)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ImuSample_t>())).unOffScaleFlags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImuSample_t),
            "::",
            stringify!(unOffScaleFlags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AppOverrideKeys_t {
    pub pchKey: *mut ::std::os::raw::c_char,
    pub pchValue: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AppOverrideKeys_t() {
    assert_eq!(
        ::std::mem::size_of::<AppOverrideKeys_t>(),
        16usize,
        concat!("Size of: ", stringify!(AppOverrideKeys_t))
    );
    assert_eq!(
        ::std::mem::align_of::<AppOverrideKeys_t>(),
        8usize,
        concat!("Alignment of ", stringify!(AppOverrideKeys_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppOverrideKeys_t>())).pchKey as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AppOverrideKeys_t),
            "::",
            stringify!(pchKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AppOverrideKeys_t>())).pchValue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AppOverrideKeys_t),
            "::",
            stringify!(pchValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Compositor_CumulativeStats {
    pub m_nPid: u32,
    pub m_nNumFramePresents: u32,
    pub m_nNumDroppedFrames: u32,
    pub m_nNumReprojectedFrames: u32,
    pub m_nNumFramePresentsOnStartup: u32,
    pub m_nNumDroppedFramesOnStartup: u32,
    pub m_nNumReprojectedFramesOnStartup: u32,
    pub m_nNumLoading: u32,
    pub m_nNumFramePresentsLoading: u32,
    pub m_nNumDroppedFramesLoading: u32,
    pub m_nNumReprojectedFramesLoading: u32,
    pub m_nNumTimedOut: u32,
    pub m_nNumFramePresentsTimedOut: u32,
    pub m_nNumDroppedFramesTimedOut: u32,
    pub m_nNumReprojectedFramesTimedOut: u32,
}
#[test]
fn bindgen_test_layout_Compositor_CumulativeStats() {
    assert_eq!(
        ::std::mem::size_of::<Compositor_CumulativeStats>(),
        60usize,
        concat!("Size of: ", stringify!(Compositor_CumulativeStats))
    );
    assert_eq!(
        ::std::mem::align_of::<Compositor_CumulativeStats>(),
        4usize,
        concat!("Alignment of ", stringify!(Compositor_CumulativeStats))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_CumulativeStats>())).m_nPid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_CumulativeStats),
            "::",
            stringify!(m_nPid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_CumulativeStats>())).m_nNumFramePresents as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_CumulativeStats),
            "::",
            stringify!(m_nNumFramePresents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_CumulativeStats>())).m_nNumDroppedFrames as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_CumulativeStats),
            "::",
            stringify!(m_nNumDroppedFrames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_CumulativeStats>())).m_nNumReprojectedFrames
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_CumulativeStats),
            "::",
            stringify!(m_nNumReprojectedFrames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_CumulativeStats>())).m_nNumFramePresentsOnStartup
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_CumulativeStats),
            "::",
            stringify!(m_nNumFramePresentsOnStartup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_CumulativeStats>())).m_nNumDroppedFramesOnStartup
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_CumulativeStats),
            "::",
            stringify!(m_nNumDroppedFramesOnStartup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_CumulativeStats>())).m_nNumReprojectedFramesOnStartup
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_CumulativeStats),
            "::",
            stringify!(m_nNumReprojectedFramesOnStartup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_CumulativeStats>())).m_nNumLoading as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_CumulativeStats),
            "::",
            stringify!(m_nNumLoading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_CumulativeStats>())).m_nNumFramePresentsLoading
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_CumulativeStats),
            "::",
            stringify!(m_nNumFramePresentsLoading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_CumulativeStats>())).m_nNumDroppedFramesLoading
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_CumulativeStats),
            "::",
            stringify!(m_nNumDroppedFramesLoading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_CumulativeStats>())).m_nNumReprojectedFramesLoading
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_CumulativeStats),
            "::",
            stringify!(m_nNumReprojectedFramesLoading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_CumulativeStats>())).m_nNumTimedOut as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_CumulativeStats),
            "::",
            stringify!(m_nNumTimedOut)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_CumulativeStats>())).m_nNumFramePresentsTimedOut
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_CumulativeStats),
            "::",
            stringify!(m_nNumFramePresentsTimedOut)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_CumulativeStats>())).m_nNumDroppedFramesTimedOut
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_CumulativeStats),
            "::",
            stringify!(m_nNumDroppedFramesTimedOut)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_CumulativeStats>())).m_nNumReprojectedFramesTimedOut
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_CumulativeStats),
            "::",
            stringify!(m_nNumReprojectedFramesTimedOut)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Compositor_StageRenderSettings {
    pub m_PrimaryColor: HmdColor_t,
    pub m_SecondaryColor: HmdColor_t,
    pub m_flVignetteInnerRadius: f32,
    pub m_flVignetteOuterRadius: f32,
    pub m_flFresnelStrength: f32,
    pub m_bBackfaceCulling: bool,
    pub m_bGreyscale: bool,
    pub m_bWireframe: bool,
}
#[test]
fn bindgen_test_layout_Compositor_StageRenderSettings() {
    assert_eq!(
        ::std::mem::size_of::<Compositor_StageRenderSettings>(),
        48usize,
        concat!("Size of: ", stringify!(Compositor_StageRenderSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<Compositor_StageRenderSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(Compositor_StageRenderSettings))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_StageRenderSettings>())).m_PrimaryColor as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_StageRenderSettings),
            "::",
            stringify!(m_PrimaryColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_StageRenderSettings>())).m_SecondaryColor as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_StageRenderSettings),
            "::",
            stringify!(m_SecondaryColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_StageRenderSettings>())).m_flVignetteInnerRadius
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_StageRenderSettings),
            "::",
            stringify!(m_flVignetteInnerRadius)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_StageRenderSettings>())).m_flVignetteOuterRadius
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_StageRenderSettings),
            "::",
            stringify!(m_flVignetteOuterRadius)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_StageRenderSettings>())).m_flFresnelStrength
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_StageRenderSettings),
            "::",
            stringify!(m_flFresnelStrength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_StageRenderSettings>())).m_bBackfaceCulling
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_StageRenderSettings),
            "::",
            stringify!(m_bBackfaceCulling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_StageRenderSettings>())).m_bGreyscale as *const _
                as usize
        },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_StageRenderSettings),
            "::",
            stringify!(m_bGreyscale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Compositor_StageRenderSettings>())).m_bWireframe as *const _
                as usize
        },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(Compositor_StageRenderSettings),
            "::",
            stringify!(m_bWireframe)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VROverlayIntersectionParams_t {
    pub vSource: HmdVector3_t,
    pub vDirection: HmdVector3_t,
    pub eOrigin: ETrackingUniverseOrigin,
}
#[test]
fn bindgen_test_layout_VROverlayIntersectionParams_t() {
    assert_eq!(
        ::std::mem::size_of::<VROverlayIntersectionParams_t>(),
        28usize,
        concat!("Size of: ", stringify!(VROverlayIntersectionParams_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VROverlayIntersectionParams_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VROverlayIntersectionParams_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VROverlayIntersectionParams_t>())).vSource as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayIntersectionParams_t),
            "::",
            stringify!(vSource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VROverlayIntersectionParams_t>())).vDirection as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayIntersectionParams_t),
            "::",
            stringify!(vDirection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VROverlayIntersectionParams_t>())).eOrigin as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayIntersectionParams_t),
            "::",
            stringify!(eOrigin)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VROverlayIntersectionResults_t {
    pub vPoint: HmdVector3_t,
    pub vNormal: HmdVector3_t,
    pub vUVs: HmdVector2_t,
    pub fDistance: f32,
}
#[test]
fn bindgen_test_layout_VROverlayIntersectionResults_t() {
    assert_eq!(
        ::std::mem::size_of::<VROverlayIntersectionResults_t>(),
        36usize,
        concat!("Size of: ", stringify!(VROverlayIntersectionResults_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VROverlayIntersectionResults_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VROverlayIntersectionResults_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VROverlayIntersectionResults_t>())).vPoint as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayIntersectionResults_t),
            "::",
            stringify!(vPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VROverlayIntersectionResults_t>())).vNormal as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayIntersectionResults_t),
            "::",
            stringify!(vNormal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VROverlayIntersectionResults_t>())).vUVs as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayIntersectionResults_t),
            "::",
            stringify!(vUVs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VROverlayIntersectionResults_t>())).fDistance as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayIntersectionResults_t),
            "::",
            stringify!(fDistance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IntersectionMaskRectangle_t {
    pub m_flTopLeftX: f32,
    pub m_flTopLeftY: f32,
    pub m_flWidth: f32,
    pub m_flHeight: f32,
}
#[test]
fn bindgen_test_layout_IntersectionMaskRectangle_t() {
    assert_eq!(
        ::std::mem::size_of::<IntersectionMaskRectangle_t>(),
        16usize,
        concat!("Size of: ", stringify!(IntersectionMaskRectangle_t))
    );
    assert_eq!(
        ::std::mem::align_of::<IntersectionMaskRectangle_t>(),
        4usize,
        concat!("Alignment of ", stringify!(IntersectionMaskRectangle_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IntersectionMaskRectangle_t>())).m_flTopLeftX as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IntersectionMaskRectangle_t),
            "::",
            stringify!(m_flTopLeftX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IntersectionMaskRectangle_t>())).m_flTopLeftY as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IntersectionMaskRectangle_t),
            "::",
            stringify!(m_flTopLeftY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IntersectionMaskRectangle_t>())).m_flWidth as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IntersectionMaskRectangle_t),
            "::",
            stringify!(m_flWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IntersectionMaskRectangle_t>())).m_flHeight as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IntersectionMaskRectangle_t),
            "::",
            stringify!(m_flHeight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IntersectionMaskCircle_t {
    pub m_flCenterX: f32,
    pub m_flCenterY: f32,
    pub m_flRadius: f32,
}
#[test]
fn bindgen_test_layout_IntersectionMaskCircle_t() {
    assert_eq!(
        ::std::mem::size_of::<IntersectionMaskCircle_t>(),
        12usize,
        concat!("Size of: ", stringify!(IntersectionMaskCircle_t))
    );
    assert_eq!(
        ::std::mem::align_of::<IntersectionMaskCircle_t>(),
        4usize,
        concat!("Alignment of ", stringify!(IntersectionMaskCircle_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IntersectionMaskCircle_t>())).m_flCenterX as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IntersectionMaskCircle_t),
            "::",
            stringify!(m_flCenterX)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IntersectionMaskCircle_t>())).m_flCenterY as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IntersectionMaskCircle_t),
            "::",
            stringify!(m_flCenterY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IntersectionMaskCircle_t>())).m_flRadius as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IntersectionMaskCircle_t),
            "::",
            stringify!(m_flRadius)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VROverlayProjection_t {
    pub fLeft: f32,
    pub fRight: f32,
    pub fTop: f32,
    pub fBottom: f32,
}
#[test]
fn bindgen_test_layout_VROverlayProjection_t() {
    assert_eq!(
        ::std::mem::size_of::<VROverlayProjection_t>(),
        16usize,
        concat!("Size of: ", stringify!(VROverlayProjection_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VROverlayProjection_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VROverlayProjection_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VROverlayProjection_t>())).fLeft as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayProjection_t),
            "::",
            stringify!(fLeft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VROverlayProjection_t>())).fRight as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayProjection_t),
            "::",
            stringify!(fRight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VROverlayProjection_t>())).fTop as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayProjection_t),
            "::",
            stringify!(fTop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VROverlayProjection_t>())).fBottom as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayProjection_t),
            "::",
            stringify!(fBottom)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VROverlayView_t {
    pub overlayHandle: VROverlayHandle_t,
    pub texture: Texture_t,
    pub textureBounds: VRTextureBounds_t,
}
#[test]
fn bindgen_test_layout_VROverlayView_t() {
    assert_eq!(
        ::std::mem::size_of::<VROverlayView_t>(),
        40usize,
        concat!("Size of: ", stringify!(VROverlayView_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VROverlayView_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VROverlayView_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VROverlayView_t>())).overlayHandle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayView_t),
            "::",
            stringify!(overlayHandle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VROverlayView_t>())).texture as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayView_t),
            "::",
            stringify!(texture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VROverlayView_t>())).textureBounds as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayView_t),
            "::",
            stringify!(textureBounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRVulkanDevice_t {
    pub m_pInstance: *mut VkInstance_T,
    pub m_pDevice: *mut VkDevice_T,
    pub m_pPhysicalDevice: *mut VkPhysicalDevice_T,
    pub m_pQueue: *mut VkQueue_T,
    pub m_uQueueFamilyIndex: u32,
}
#[test]
fn bindgen_test_layout_VRVulkanDevice_t() {
    assert_eq!(
        ::std::mem::size_of::<VRVulkanDevice_t>(),
        40usize,
        concat!("Size of: ", stringify!(VRVulkanDevice_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRVulkanDevice_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VRVulkanDevice_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRVulkanDevice_t>())).m_pInstance as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanDevice_t),
            "::",
            stringify!(m_pInstance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRVulkanDevice_t>())).m_pDevice as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanDevice_t),
            "::",
            stringify!(m_pDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRVulkanDevice_t>())).m_pPhysicalDevice as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanDevice_t),
            "::",
            stringify!(m_pPhysicalDevice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRVulkanDevice_t>())).m_pQueue as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanDevice_t),
            "::",
            stringify!(m_pQueue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRVulkanDevice_t>())).m_uQueueFamilyIndex as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VRVulkanDevice_t),
            "::",
            stringify!(m_uQueueFamilyIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRNativeDevice_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub eType: EDeviceType,
}
#[test]
fn bindgen_test_layout_VRNativeDevice_t() {
    assert_eq!(
        ::std::mem::size_of::<VRNativeDevice_t>(),
        16usize,
        concat!("Size of: ", stringify!(VRNativeDevice_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRNativeDevice_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VRNativeDevice_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRNativeDevice_t>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VRNativeDevice_t),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRNativeDevice_t>())).eType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VRNativeDevice_t),
            "::",
            stringify!(eType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderModel_Vertex_t {
    pub vPosition: HmdVector3_t,
    pub vNormal: HmdVector3_t,
    pub rfTextureCoord: [f32; 2usize],
}
#[test]
fn bindgen_test_layout_RenderModel_Vertex_t() {
    assert_eq!(
        ::std::mem::size_of::<RenderModel_Vertex_t>(),
        32usize,
        concat!("Size of: ", stringify!(RenderModel_Vertex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<RenderModel_Vertex_t>(),
        4usize,
        concat!("Alignment of ", stringify!(RenderModel_Vertex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenderModel_Vertex_t>())).vPosition as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_Vertex_t),
            "::",
            stringify!(vPosition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenderModel_Vertex_t>())).vNormal as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_Vertex_t),
            "::",
            stringify!(vNormal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RenderModel_Vertex_t>())).rfTextureCoord as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_Vertex_t),
            "::",
            stringify!(rfTextureCoord)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct RenderModel_TextureMap_t {
    pub unWidth: u16,
    pub unHeight: u16,
    pub rubTextureMapData: *mut u8,
    pub format: EVRRenderModelTextureFormat,
}
#[test]
fn bindgen_test_layout_RenderModel_TextureMap_t() {
    assert_eq!(
        ::std::mem::size_of::<RenderModel_TextureMap_t>(),
        16usize,
        concat!("Size of: ", stringify!(RenderModel_TextureMap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<RenderModel_TextureMap_t>(),
        4usize,
        concat!("Alignment of ", stringify!(RenderModel_TextureMap_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RenderModel_TextureMap_t>())).unWidth as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_TextureMap_t),
            "::",
            stringify!(unWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RenderModel_TextureMap_t>())).unHeight as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_TextureMap_t),
            "::",
            stringify!(unHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RenderModel_TextureMap_t>())).rubTextureMapData as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_TextureMap_t),
            "::",
            stringify!(rubTextureMapData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenderModel_TextureMap_t>())).format as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_TextureMap_t),
            "::",
            stringify!(format)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct RenderModel_t {
    pub rVertexData: *mut RenderModel_Vertex_t,
    pub unVertexCount: u32,
    pub rIndexData: *mut u16,
    pub unTriangleCount: u32,
    pub diffuseTextureId: TextureID_t,
}
#[test]
fn bindgen_test_layout_RenderModel_t() {
    assert_eq!(
        ::std::mem::size_of::<RenderModel_t>(),
        28usize,
        concat!("Size of: ", stringify!(RenderModel_t))
    );
    assert_eq!(
        ::std::mem::align_of::<RenderModel_t>(),
        4usize,
        concat!("Alignment of ", stringify!(RenderModel_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenderModel_t>())).rVertexData as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_t),
            "::",
            stringify!(rVertexData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenderModel_t>())).unVertexCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_t),
            "::",
            stringify!(unVertexCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenderModel_t>())).rIndexData as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_t),
            "::",
            stringify!(rIndexData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenderModel_t>())).unTriangleCount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_t),
            "::",
            stringify!(unTriangleCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RenderModel_t>())).diffuseTextureId as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_t),
            "::",
            stringify!(diffuseTextureId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderModel_ControllerMode_State_t {
    pub bScrollWheelVisible: bool,
}
#[test]
fn bindgen_test_layout_RenderModel_ControllerMode_State_t() {
    assert_eq!(
        ::std::mem::size_of::<RenderModel_ControllerMode_State_t>(),
        1usize,
        concat!("Size of: ", stringify!(RenderModel_ControllerMode_State_t))
    );
    assert_eq!(
        ::std::mem::align_of::<RenderModel_ControllerMode_State_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(RenderModel_ControllerMode_State_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<RenderModel_ControllerMode_State_t>())).bScrollWheelVisible
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RenderModel_ControllerMode_State_t),
            "::",
            stringify!(bScrollWheelVisible)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NotificationBitmap_t {
    pub m_pImageData: *mut ::std::os::raw::c_void,
    pub m_nWidth: i32,
    pub m_nHeight: i32,
    pub m_nBytesPerPixel: i32,
}
#[test]
fn bindgen_test_layout_NotificationBitmap_t() {
    assert_eq!(
        ::std::mem::size_of::<NotificationBitmap_t>(),
        24usize,
        concat!("Size of: ", stringify!(NotificationBitmap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NotificationBitmap_t>(),
        8usize,
        concat!("Alignment of ", stringify!(NotificationBitmap_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NotificationBitmap_t>())).m_pImageData as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NotificationBitmap_t),
            "::",
            stringify!(m_pImageData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NotificationBitmap_t>())).m_nWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NotificationBitmap_t),
            "::",
            stringify!(m_nWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NotificationBitmap_t>())).m_nHeight as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NotificationBitmap_t),
            "::",
            stringify!(m_nHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NotificationBitmap_t>())).m_nBytesPerPixel as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NotificationBitmap_t),
            "::",
            stringify!(m_nBytesPerPixel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CVRSettingHelper {
    pub m_pSettings: isize,
}
#[test]
fn bindgen_test_layout_CVRSettingHelper() {
    assert_eq!(
        ::std::mem::size_of::<CVRSettingHelper>(),
        8usize,
        concat!("Size of: ", stringify!(CVRSettingHelper))
    );
    assert_eq!(
        ::std::mem::align_of::<CVRSettingHelper>(),
        8usize,
        concat!("Alignment of ", stringify!(CVRSettingHelper))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CVRSettingHelper>())).m_pSettings as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CVRSettingHelper),
            "::",
            stringify!(m_pSettings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputAnalogActionData_t {
    pub bActive: bool,
    pub activeOrigin: VRInputValueHandle_t,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub deltaX: f32,
    pub deltaY: f32,
    pub deltaZ: f32,
    pub fUpdateTime: f32,
}
#[test]
fn bindgen_test_layout_InputAnalogActionData_t() {
    assert_eq!(
        ::std::mem::size_of::<InputAnalogActionData_t>(),
        48usize,
        concat!("Size of: ", stringify!(InputAnalogActionData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<InputAnalogActionData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(InputAnalogActionData_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InputAnalogActionData_t>())).bActive as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InputAnalogActionData_t),
            "::",
            stringify!(bActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<InputAnalogActionData_t>())).activeOrigin as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(InputAnalogActionData_t),
            "::",
            stringify!(activeOrigin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InputAnalogActionData_t>())).x as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(InputAnalogActionData_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InputAnalogActionData_t>())).y as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(InputAnalogActionData_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InputAnalogActionData_t>())).z as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(InputAnalogActionData_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InputAnalogActionData_t>())).deltaX as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(InputAnalogActionData_t),
            "::",
            stringify!(deltaX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InputAnalogActionData_t>())).deltaY as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(InputAnalogActionData_t),
            "::",
            stringify!(deltaY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InputAnalogActionData_t>())).deltaZ as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(InputAnalogActionData_t),
            "::",
            stringify!(deltaZ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<InputAnalogActionData_t>())).fUpdateTime as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(InputAnalogActionData_t),
            "::",
            stringify!(fUpdateTime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputDigitalActionData_t {
    pub bActive: bool,
    pub activeOrigin: VRInputValueHandle_t,
    pub bState: bool,
    pub bChanged: bool,
    pub fUpdateTime: f32,
}
#[test]
fn bindgen_test_layout_InputDigitalActionData_t() {
    assert_eq!(
        ::std::mem::size_of::<InputDigitalActionData_t>(),
        24usize,
        concat!("Size of: ", stringify!(InputDigitalActionData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<InputDigitalActionData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(InputDigitalActionData_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<InputDigitalActionData_t>())).bActive as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InputDigitalActionData_t),
            "::",
            stringify!(bActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<InputDigitalActionData_t>())).activeOrigin as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(InputDigitalActionData_t),
            "::",
            stringify!(activeOrigin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InputDigitalActionData_t>())).bState as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(InputDigitalActionData_t),
            "::",
            stringify!(bState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<InputDigitalActionData_t>())).bChanged as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(InputDigitalActionData_t),
            "::",
            stringify!(bChanged)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<InputDigitalActionData_t>())).fUpdateTime as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(InputDigitalActionData_t),
            "::",
            stringify!(fUpdateTime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputPoseActionData_t {
    pub bActive: bool,
    pub activeOrigin: VRInputValueHandle_t,
    pub pose: TrackedDevicePose_t,
}
#[test]
fn bindgen_test_layout_InputPoseActionData_t() {
    assert_eq!(
        ::std::mem::size_of::<InputPoseActionData_t>(),
        96usize,
        concat!("Size of: ", stringify!(InputPoseActionData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<InputPoseActionData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(InputPoseActionData_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InputPoseActionData_t>())).bActive as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InputPoseActionData_t),
            "::",
            stringify!(bActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<InputPoseActionData_t>())).activeOrigin as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(InputPoseActionData_t),
            "::",
            stringify!(activeOrigin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InputPoseActionData_t>())).pose as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(InputPoseActionData_t),
            "::",
            stringify!(pose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputSkeletalActionData_t {
    pub bActive: bool,
    pub activeOrigin: VRInputValueHandle_t,
}
#[test]
fn bindgen_test_layout_InputSkeletalActionData_t() {
    assert_eq!(
        ::std::mem::size_of::<InputSkeletalActionData_t>(),
        16usize,
        concat!("Size of: ", stringify!(InputSkeletalActionData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<InputSkeletalActionData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(InputSkeletalActionData_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<InputSkeletalActionData_t>())).bActive as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InputSkeletalActionData_t),
            "::",
            stringify!(bActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<InputSkeletalActionData_t>())).activeOrigin as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(InputSkeletalActionData_t),
            "::",
            stringify!(activeOrigin)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputOriginInfo_t {
    pub devicePath: VRInputValueHandle_t,
    pub trackedDeviceIndex: TrackedDeviceIndex_t,
    pub rchRenderModelComponentName: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_InputOriginInfo_t() {
    assert_eq!(
        ::std::mem::size_of::<InputOriginInfo_t>(),
        144usize,
        concat!("Size of: ", stringify!(InputOriginInfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<InputOriginInfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(InputOriginInfo_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InputOriginInfo_t>())).devicePath as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InputOriginInfo_t),
            "::",
            stringify!(devicePath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<InputOriginInfo_t>())).trackedDeviceIndex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(InputOriginInfo_t),
            "::",
            stringify!(trackedDeviceIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<InputOriginInfo_t>())).rchRenderModelComponentName as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(InputOriginInfo_t),
            "::",
            stringify!(rchRenderModelComponentName)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputBindingInfo_t {
    pub rchDevicePathName: [::std::os::raw::c_char; 128usize],
    pub rchInputPathName: [::std::os::raw::c_char; 128usize],
    pub rchModeName: [::std::os::raw::c_char; 128usize],
    pub rchSlotName: [::std::os::raw::c_char; 128usize],
    pub rchInputSourceType: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_InputBindingInfo_t() {
    assert_eq!(
        ::std::mem::size_of::<InputBindingInfo_t>(),
        544usize,
        concat!("Size of: ", stringify!(InputBindingInfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<InputBindingInfo_t>(),
        1usize,
        concat!("Alignment of ", stringify!(InputBindingInfo_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<InputBindingInfo_t>())).rchDevicePathName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InputBindingInfo_t),
            "::",
            stringify!(rchDevicePathName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<InputBindingInfo_t>())).rchInputPathName as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(InputBindingInfo_t),
            "::",
            stringify!(rchInputPathName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InputBindingInfo_t>())).rchModeName as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(InputBindingInfo_t),
            "::",
            stringify!(rchModeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<InputBindingInfo_t>())).rchSlotName as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(InputBindingInfo_t),
            "::",
            stringify!(rchSlotName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<InputBindingInfo_t>())).rchInputSourceType as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(InputBindingInfo_t),
            "::",
            stringify!(rchInputSourceType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRActiveActionSet_t {
    pub ulActionSet: VRActionSetHandle_t,
    pub ulRestrictedToDevice: VRInputValueHandle_t,
    pub ulSecondaryActionSet: VRActionSetHandle_t,
    pub unPadding: u32,
    pub nPriority: i32,
}
#[test]
fn bindgen_test_layout_VRActiveActionSet_t() {
    assert_eq!(
        ::std::mem::size_of::<VRActiveActionSet_t>(),
        32usize,
        concat!("Size of: ", stringify!(VRActiveActionSet_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRActiveActionSet_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VRActiveActionSet_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRActiveActionSet_t>())).ulActionSet as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VRActiveActionSet_t),
            "::",
            stringify!(ulActionSet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRActiveActionSet_t>())).ulRestrictedToDevice as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VRActiveActionSet_t),
            "::",
            stringify!(ulRestrictedToDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRActiveActionSet_t>())).ulSecondaryActionSet as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VRActiveActionSet_t),
            "::",
            stringify!(ulSecondaryActionSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRActiveActionSet_t>())).unPadding as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VRActiveActionSet_t),
            "::",
            stringify!(unPadding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VRActiveActionSet_t>())).nPriority as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VRActiveActionSet_t),
            "::",
            stringify!(nPriority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRSkeletalSummaryData_t {
    pub flFingerCurl: [f32; 5usize],
    pub flFingerSplay: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_VRSkeletalSummaryData_t() {
    assert_eq!(
        ::std::mem::size_of::<VRSkeletalSummaryData_t>(),
        36usize,
        concat!("Size of: ", stringify!(VRSkeletalSummaryData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRSkeletalSummaryData_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VRSkeletalSummaryData_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRSkeletalSummaryData_t>())).flFingerCurl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VRSkeletalSummaryData_t),
            "::",
            stringify!(flFingerCurl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VRSkeletalSummaryData_t>())).flFingerSplay as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VRSkeletalSummaryData_t),
            "::",
            stringify!(flFingerSplay)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpatialAnchorPose_t {
    pub mAnchorToAbsoluteTracking: HmdMatrix34_t,
}
#[test]
fn bindgen_test_layout_SpatialAnchorPose_t() {
    assert_eq!(
        ::std::mem::size_of::<SpatialAnchorPose_t>(),
        48usize,
        concat!("Size of: ", stringify!(SpatialAnchorPose_t))
    );
    assert_eq!(
        ::std::mem::align_of::<SpatialAnchorPose_t>(),
        4usize,
        concat!("Alignment of ", stringify!(SpatialAnchorPose_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SpatialAnchorPose_t>())).mAnchorToAbsoluteTracking as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SpatialAnchorPose_t),
            "::",
            stringify!(mAnchorToAbsoluteTracking)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct COpenVRContext {
    pub m_pVRSystem: isize,
    pub m_pVRChaperone: isize,
    pub m_pVRChaperoneSetup: isize,
    pub m_pVRCompositor: isize,
    pub m_pVRHeadsetView: isize,
    pub m_pVROverlay: isize,
    pub m_pVROverlayView: isize,
    pub m_pVRResources: isize,
    pub m_pVRRenderModels: isize,
    pub m_pVRExtendedDisplay: isize,
    pub m_pVRSettings: isize,
    pub m_pVRApplications: isize,
    pub m_pVRTrackedCamera: isize,
    pub m_pVRScreenshots: isize,
    pub m_pVRDriverManager: isize,
    pub m_pVRInput: isize,
    pub m_pVRIOBuffer: isize,
    pub m_pVRSpatialAnchors: isize,
    pub m_pVRDebug: isize,
    pub m_pVRNotifications: isize,
}
#[test]
fn bindgen_test_layout_COpenVRContext() {
    assert_eq!(
        ::std::mem::size_of::<COpenVRContext>(),
        160usize,
        concat!("Size of: ", stringify!(COpenVRContext))
    );
    assert_eq!(
        ::std::mem::align_of::<COpenVRContext>(),
        8usize,
        concat!("Alignment of ", stringify!(COpenVRContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COpenVRContext>())).m_pVRSystem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRSystem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COpenVRContext>())).m_pVRChaperone as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRChaperone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<COpenVRContext>())).m_pVRChaperoneSetup as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRChaperoneSetup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COpenVRContext>())).m_pVRCompositor as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRCompositor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COpenVRContext>())).m_pVRHeadsetView as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRHeadsetView)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COpenVRContext>())).m_pVROverlay as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVROverlay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COpenVRContext>())).m_pVROverlayView as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVROverlayView)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COpenVRContext>())).m_pVRResources as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRResources)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<COpenVRContext>())).m_pVRRenderModels as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRRenderModels)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<COpenVRContext>())).m_pVRExtendedDisplay as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRExtendedDisplay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COpenVRContext>())).m_pVRSettings as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRSettings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<COpenVRContext>())).m_pVRApplications as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRApplications)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<COpenVRContext>())).m_pVRTrackedCamera as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRTrackedCamera)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COpenVRContext>())).m_pVRScreenshots as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRScreenshots)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<COpenVRContext>())).m_pVRDriverManager as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRDriverManager)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COpenVRContext>())).m_pVRInput as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRInput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COpenVRContext>())).m_pVRIOBuffer as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRIOBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<COpenVRContext>())).m_pVRSpatialAnchors as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRSpatialAnchors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<COpenVRContext>())).m_pVRDebug as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRDebug)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<COpenVRContext>())).m_pVRNotifications as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(COpenVRContext),
            "::",
            stringify!(m_pVRNotifications)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PropertyWrite_t {
    pub prop: ETrackedDeviceProperty,
    pub writeType: EPropertyWriteType,
    pub eSetError: ETrackedPropertyError,
    pub pvBuffer: *mut ::std::os::raw::c_void,
    pub unBufferSize: u32,
    pub unTag: PropertyTypeTag_t,
    pub eError: ETrackedPropertyError,
}
#[test]
fn bindgen_test_layout_PropertyWrite_t() {
    assert_eq!(
        ::std::mem::size_of::<PropertyWrite_t>(),
        40usize,
        concat!("Size of: ", stringify!(PropertyWrite_t))
    );
    assert_eq!(
        ::std::mem::align_of::<PropertyWrite_t>(),
        8usize,
        concat!("Alignment of ", stringify!(PropertyWrite_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyWrite_t>())).prop as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyWrite_t),
            "::",
            stringify!(prop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyWrite_t>())).writeType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyWrite_t),
            "::",
            stringify!(writeType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyWrite_t>())).eSetError as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyWrite_t),
            "::",
            stringify!(eSetError)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyWrite_t>())).pvBuffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyWrite_t),
            "::",
            stringify!(pvBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyWrite_t>())).unBufferSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyWrite_t),
            "::",
            stringify!(unBufferSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyWrite_t>())).unTag as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyWrite_t),
            "::",
            stringify!(unTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyWrite_t>())).eError as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyWrite_t),
            "::",
            stringify!(eError)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PropertyRead_t {
    pub prop: ETrackedDeviceProperty,
    pub pvBuffer: *mut ::std::os::raw::c_void,
    pub unBufferSize: u32,
    pub unTag: PropertyTypeTag_t,
    pub unRequiredBufferSize: u32,
    pub eError: ETrackedPropertyError,
}
#[test]
fn bindgen_test_layout_PropertyRead_t() {
    assert_eq!(
        ::std::mem::size_of::<PropertyRead_t>(),
        32usize,
        concat!("Size of: ", stringify!(PropertyRead_t))
    );
    assert_eq!(
        ::std::mem::align_of::<PropertyRead_t>(),
        8usize,
        concat!("Alignment of ", stringify!(PropertyRead_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyRead_t>())).prop as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyRead_t),
            "::",
            stringify!(prop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyRead_t>())).pvBuffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyRead_t),
            "::",
            stringify!(pvBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyRead_t>())).unBufferSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyRead_t),
            "::",
            stringify!(unBufferSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyRead_t>())).unTag as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyRead_t),
            "::",
            stringify!(unTag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PropertyRead_t>())).unRequiredBufferSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyRead_t),
            "::",
            stringify!(unRequiredBufferSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PropertyRead_t>())).eError as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyRead_t),
            "::",
            stringify!(eError)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CVRPropertyHelpers {
    pub m_pProperties: isize,
}
#[test]
fn bindgen_test_layout_CVRPropertyHelpers() {
    assert_eq!(
        ::std::mem::size_of::<CVRPropertyHelpers>(),
        8usize,
        concat!("Size of: ", stringify!(CVRPropertyHelpers))
    );
    assert_eq!(
        ::std::mem::align_of::<CVRPropertyHelpers>(),
        8usize,
        concat!("Alignment of ", stringify!(CVRPropertyHelpers))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CVRPropertyHelpers>())).m_pProperties as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CVRPropertyHelpers),
            "::",
            stringify!(m_pProperties)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PathWrite_t {
    pub ulPath: PathHandle_t,
    pub writeType: EPropertyWriteType,
    pub eSetError: ETrackedPropertyError,
    pub pvBuffer: *mut ::std::os::raw::c_void,
    pub unBufferSize: u32,
    pub unTag: PropertyTypeTag_t,
    pub eError: ETrackedPropertyError,
    pub pszPath: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_PathWrite_t() {
    assert_eq!(
        ::std::mem::size_of::<PathWrite_t>(),
        48usize,
        concat!("Size of: ", stringify!(PathWrite_t))
    );
    assert_eq!(
        ::std::mem::align_of::<PathWrite_t>(),
        8usize,
        concat!("Alignment of ", stringify!(PathWrite_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathWrite_t>())).ulPath as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PathWrite_t),
            "::",
            stringify!(ulPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathWrite_t>())).writeType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PathWrite_t),
            "::",
            stringify!(writeType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathWrite_t>())).eSetError as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PathWrite_t),
            "::",
            stringify!(eSetError)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathWrite_t>())).pvBuffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PathWrite_t),
            "::",
            stringify!(pvBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathWrite_t>())).unBufferSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PathWrite_t),
            "::",
            stringify!(unBufferSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathWrite_t>())).unTag as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PathWrite_t),
            "::",
            stringify!(unTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathWrite_t>())).eError as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PathWrite_t),
            "::",
            stringify!(eError)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathWrite_t>())).pszPath as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PathWrite_t),
            "::",
            stringify!(pszPath)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PathRead_t {
    pub ulPath: PathHandle_t,
    pub pvBuffer: *mut ::std::os::raw::c_void,
    pub unBufferSize: u32,
    pub unTag: PropertyTypeTag_t,
    pub unRequiredBufferSize: u32,
    pub eError: ETrackedPropertyError,
    pub pszPath: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_PathRead_t() {
    assert_eq!(
        ::std::mem::size_of::<PathRead_t>(),
        40usize,
        concat!("Size of: ", stringify!(PathRead_t))
    );
    assert_eq!(
        ::std::mem::align_of::<PathRead_t>(),
        8usize,
        concat!("Alignment of ", stringify!(PathRead_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathRead_t>())).ulPath as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PathRead_t),
            "::",
            stringify!(ulPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathRead_t>())).pvBuffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PathRead_t),
            "::",
            stringify!(pvBuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathRead_t>())).unBufferSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PathRead_t),
            "::",
            stringify!(unBufferSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathRead_t>())).unTag as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PathRead_t),
            "::",
            stringify!(unTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathRead_t>())).unRequiredBufferSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PathRead_t),
            "::",
            stringify!(unRequiredBufferSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathRead_t>())).eError as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PathRead_t),
            "::",
            stringify!(eError)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PathRead_t>())).pszPath as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PathRead_t),
            "::",
            stringify!(pszPath)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VREvent_Data_t {
    pub reserved: VREvent_Reserved_t,
    pub controller: VREvent_Controller_t,
    pub mouse: VREvent_Mouse_t,
    pub scroll: VREvent_Scroll_t,
    pub process: VREvent_Process_t,
    pub notification: VREvent_Notification_t,
    pub overlay: VREvent_Overlay_t,
    pub status: VREvent_Status_t,
    pub keyboard: VREvent_Keyboard_t,
    pub ipd: VREvent_Ipd_t,
    pub chaperone: VREvent_Chaperone_t,
    pub performanceTest: VREvent_PerformanceTest_t,
    pub touchPadMove: VREvent_TouchPadMove_t,
    pub seatedZeroPoseReset: VREvent_SeatedZeroPoseReset_t,
    pub screenshot: VREvent_Screenshot_t,
    pub screenshotProgress: VREvent_ScreenshotProgress_t,
    pub applicationLaunch: VREvent_ApplicationLaunch_t,
    pub cameraSurface: VREvent_EditingCameraSurface_t,
    pub messageOverlay: VREvent_MessageOverlay_t,
    pub property: VREvent_Property_t,
    pub hapticVibration: VREvent_HapticVibration_t,
    pub webConsole: VREvent_WebConsole_t,
    pub inputBinding: VREvent_InputBindingLoad_t,
    pub actionManifest: VREvent_InputActionManifestLoad_t,
    pub spatialAnchor: VREvent_SpatialAnchor_t,
}
#[test]
fn bindgen_test_layout_VREvent_Data_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Data_t>(),
        48usize,
        concat!("Size of: ", stringify!(VREvent_Data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_Data_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).reserved as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).controller as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(controller)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).mouse as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(mouse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).scroll as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(scroll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).process as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(process)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).notification as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(notification)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).overlay as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(overlay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).keyboard as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(keyboard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).ipd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(ipd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).chaperone as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(chaperone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).performanceTest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(performanceTest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).touchPadMove as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(touchPadMove)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_Data_t>())).seatedZeroPoseReset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(seatedZeroPoseReset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).screenshot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(screenshot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_Data_t>())).screenshotProgress as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(screenshotProgress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VREvent_Data_t>())).applicationLaunch as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(applicationLaunch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).cameraSurface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(cameraSurface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).messageOverlay as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(messageOverlay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).property as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(property)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).hapticVibration as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(hapticVibration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).webConsole as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(webConsole)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).inputBinding as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(inputBinding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).actionManifest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(actionManifest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_Data_t>())).spatialAnchor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_Data_t),
            "::",
            stringify!(spatialAnchor)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct VREvent_t {
    pub eventType: u32,
    pub trackedDeviceIndex: TrackedDeviceIndex_t,
    pub eventAgeSeconds: f32,
    pub data: VREvent_Data_t,
}
#[test]
fn bindgen_test_layout_VREvent_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_t>(),
        60usize,
        concat!("Size of: ", stringify!(VREvent_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_t>())).eventType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_t),
            "::",
            stringify!(eventType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_t>())).trackedDeviceIndex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_t),
            "::",
            stringify!(trackedDeviceIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_t>())).eventAgeSeconds as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_t),
            "::",
            stringify!(eventAgeSeconds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VREvent_t>())).data as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VREvent_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VROverlayIntersectionMaskPrimitive_Data_t {
    pub m_Rectangle: IntersectionMaskRectangle_t,
    pub m_Circle: IntersectionMaskCircle_t,
}
#[test]
fn bindgen_test_layout_VROverlayIntersectionMaskPrimitive_Data_t() {
    assert_eq!(
        ::std::mem::size_of::<VROverlayIntersectionMaskPrimitive_Data_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(VROverlayIntersectionMaskPrimitive_Data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VROverlayIntersectionMaskPrimitive_Data_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VROverlayIntersectionMaskPrimitive_Data_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VROverlayIntersectionMaskPrimitive_Data_t>())).m_Rectangle
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayIntersectionMaskPrimitive_Data_t),
            "::",
            stringify!(m_Rectangle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VROverlayIntersectionMaskPrimitive_Data_t>())).m_Circle
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayIntersectionMaskPrimitive_Data_t),
            "::",
            stringify!(m_Circle)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VROverlayIntersectionMaskPrimitive_t {
    pub m_nPrimitiveType: EVROverlayIntersectionMaskPrimitiveType,
    pub m_Primitive: VROverlayIntersectionMaskPrimitive_Data_t,
}
#[test]
fn bindgen_test_layout_VROverlayIntersectionMaskPrimitive_t() {
    assert_eq!(
        ::std::mem::size_of::<VROverlayIntersectionMaskPrimitive_t>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(VROverlayIntersectionMaskPrimitive_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VROverlayIntersectionMaskPrimitive_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VROverlayIntersectionMaskPrimitive_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VROverlayIntersectionMaskPrimitive_t>())).m_nPrimitiveType
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayIntersectionMaskPrimitive_t),
            "::",
            stringify!(m_nPrimitiveType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VROverlayIntersectionMaskPrimitive_t>())).m_Primitive as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VROverlayIntersectionMaskPrimitive_t),
            "::",
            stringify!(m_Primitive)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRSystem_FnTable {
    pub GetRecommendedRenderTargetSize:
        ::std::option::Option<unsafe extern "C" fn(pnWidth: *mut u32, pnHeight: *mut u32)>,
    pub GetProjectionMatrix: ::std::option::Option<
        unsafe extern "C" fn(eEye: EVREye, fNearZ: f32, fFarZ: f32) -> HmdMatrix44_t,
    >,
    pub GetProjectionRaw: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pfLeft: *mut f32,
            pfRight: *mut f32,
            pfTop: *mut f32,
            pfBottom: *mut f32,
        ),
    >,
    pub ComputeDistortion: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            fU: f32,
            fV: f32,
            pDistortionCoordinates: *mut DistortionCoordinates_t,
        ) -> bool,
    >,
    pub GetEyeToHeadTransform:
        ::std::option::Option<unsafe extern "C" fn(eEye: EVREye) -> HmdMatrix34_t>,
    pub GetTimeSinceLastVsync: ::std::option::Option<
        unsafe extern "C" fn(pfSecondsSinceLastVsync: *mut f32, pulFrameCounter: *mut u64) -> bool,
    >,
    pub GetD3D9AdapterIndex: ::std::option::Option<unsafe extern "C" fn() -> i32>,
    pub GetDXGIOutputInfo: ::std::option::Option<unsafe extern "C" fn(pnAdapterIndex: *mut i32)>,
    pub GetOutputDevice: ::std::option::Option<
        unsafe extern "C" fn(
            pnDevice: *mut u64,
            textureType: ETextureType,
            pInstance: *mut VkInstance_T,
        ),
    >,
    pub IsDisplayOnDesktop: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub SetDisplayVisibility:
        ::std::option::Option<unsafe extern "C" fn(bIsVisibleOnDesktop: bool) -> bool>,
    pub GetDeviceToAbsoluteTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(
            eOrigin: ETrackingUniverseOrigin,
            fPredictedSecondsToPhotonsFromNow: f32,
            pTrackedDevicePoseArray: *mut TrackedDevicePose_t,
            unTrackedDevicePoseArrayCount: u32,
        ),
    >,
    pub GetSeatedZeroPoseToStandingAbsoluteTrackingPose:
        ::std::option::Option<unsafe extern "C" fn() -> HmdMatrix34_t>,
    pub GetRawZeroPoseToStandingAbsoluteTrackingPose:
        ::std::option::Option<unsafe extern "C" fn() -> HmdMatrix34_t>,
    pub GetSortedTrackedDeviceIndicesOfClass: ::std::option::Option<
        unsafe extern "C" fn(
            eTrackedDeviceClass: ETrackedDeviceClass,
            punTrackedDeviceIndexArray: *mut TrackedDeviceIndex_t,
            unTrackedDeviceIndexArrayCount: u32,
            unRelativeToTrackedDeviceIndex: TrackedDeviceIndex_t,
        ) -> u32,
    >,
    pub GetTrackedDeviceActivityLevel: ::std::option::Option<
        unsafe extern "C" fn(unDeviceId: TrackedDeviceIndex_t) -> EDeviceActivityLevel,
    >,
    pub ApplyTransform: ::std::option::Option<
        unsafe extern "C" fn(
            pOutputPose: *mut TrackedDevicePose_t,
            pTrackedDevicePose: *mut TrackedDevicePose_t,
            pTransform: *mut HmdMatrix34_t,
        ),
    >,
    pub GetTrackedDeviceIndexForControllerRole: ::std::option::Option<
        unsafe extern "C" fn(unDeviceType: ETrackedControllerRole) -> TrackedDeviceIndex_t,
    >,
    pub GetControllerRoleForTrackedDeviceIndex: ::std::option::Option<
        unsafe extern "C" fn(unDeviceIndex: TrackedDeviceIndex_t) -> ETrackedControllerRole,
    >,
    pub GetTrackedDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(unDeviceIndex: TrackedDeviceIndex_t) -> ETrackedDeviceClass,
    >,
    pub IsTrackedDeviceConnected:
        ::std::option::Option<unsafe extern "C" fn(unDeviceIndex: TrackedDeviceIndex_t) -> bool>,
    pub GetBoolTrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pError: *mut ETrackedPropertyError,
        ) -> bool,
    >,
    pub GetFloatTrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pError: *mut ETrackedPropertyError,
        ) -> f32,
    >,
    pub GetInt32TrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pError: *mut ETrackedPropertyError,
        ) -> i32,
    >,
    pub GetUint64TrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pError: *mut ETrackedPropertyError,
        ) -> u64,
    >,
    pub GetMatrix34TrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pError: *mut ETrackedPropertyError,
        ) -> HmdMatrix34_t,
    >,
    pub GetArrayTrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            propType: PropertyTypeTag_t,
            pBuffer: *mut ::std::os::raw::c_void,
            unBufferSize: u32,
            pError: *mut ETrackedPropertyError,
        ) -> u32,
    >,
    pub GetStringTrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
            pError: *mut ETrackedPropertyError,
        ) -> u32,
    >,
    pub GetPropErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(error: ETrackedPropertyError) -> *mut ::std::os::raw::c_char,
    >,
    pub PollNextEvent: ::std::option::Option<
        unsafe extern "C" fn(pEvent: *mut VREvent_t, uncbVREvent: u32) -> bool,
    >,
    pub PollNextEventWithPose: ::std::option::Option<
        unsafe extern "C" fn(
            eOrigin: ETrackingUniverseOrigin,
            pEvent: *mut VREvent_t,
            uncbVREvent: u32,
            pTrackedDevicePose: *mut TrackedDevicePose_t,
        ) -> bool,
    >,
    pub GetEventTypeNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(eType: EVREventType) -> *mut ::std::os::raw::c_char,
    >,
    pub GetHiddenAreaMesh: ::std::option::Option<
        unsafe extern "C" fn(eEye: EVREye, type_: EHiddenAreaMeshType) -> HiddenAreaMesh_t,
    >,
    pub GetControllerState: ::std::option::Option<
        unsafe extern "C" fn(
            unControllerDeviceIndex: TrackedDeviceIndex_t,
            pControllerState: *mut VRControllerState_t,
            unControllerStateSize: u32,
        ) -> bool,
    >,
    pub GetControllerStateWithPose: ::std::option::Option<
        unsafe extern "C" fn(
            eOrigin: ETrackingUniverseOrigin,
            unControllerDeviceIndex: TrackedDeviceIndex_t,
            pControllerState: *mut VRControllerState_t,
            unControllerStateSize: u32,
            pTrackedDevicePose: *mut TrackedDevicePose_t,
        ) -> bool,
    >,
    pub TriggerHapticPulse: ::std::option::Option<
        unsafe extern "C" fn(
            unControllerDeviceIndex: TrackedDeviceIndex_t,
            unAxisId: u32,
            usDurationMicroSec: ::std::os::raw::c_ushort,
        ),
    >,
    pub GetButtonIdNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(eButtonId: EVRButtonId) -> *mut ::std::os::raw::c_char,
    >,
    pub GetControllerAxisTypeNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(eAxisType: EVRControllerAxisType) -> *mut ::std::os::raw::c_char,
    >,
    pub IsInputAvailable: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub IsSteamVRDrawingControllers: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ShouldApplicationPause: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ShouldApplicationReduceRenderingWork: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub PerformFirmwareUpdate: ::std::option::Option<
        unsafe extern "C" fn(unDeviceIndex: TrackedDeviceIndex_t) -> EVRFirmwareError,
    >,
    pub AcknowledgeQuit_Exiting: ::std::option::Option<unsafe extern "C" fn()>,
    pub GetAppContainerFilePaths: ::std::option::Option<
        unsafe extern "C" fn(pchBuffer: *mut ::std::os::raw::c_char, unBufferSize: u32) -> u32,
    >,
    pub GetRuntimeVersion:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_VR_IVRSystem_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRSystem_FnTable>(),
        368usize,
        concat!("Size of: ", stringify!(VR_IVRSystem_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRSystem_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRSystem_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetRecommendedRenderTargetSize
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetRecommendedRenderTargetSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetProjectionMatrix as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetProjectionMatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetProjectionRaw as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetProjectionRaw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).ComputeDistortion as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(ComputeDistortion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetEyeToHeadTransform as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetEyeToHeadTransform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetTimeSinceLastVsync as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetTimeSinceLastVsync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetD3D9AdapterIndex as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetD3D9AdapterIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetDXGIOutputInfo as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetDXGIOutputInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetOutputDevice as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetOutputDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).IsDisplayOnDesktop as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(IsDisplayOnDesktop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).SetDisplayVisibility as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(SetDisplayVisibility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetDeviceToAbsoluteTrackingPose
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetDeviceToAbsoluteTrackingPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>()))
                .GetSeatedZeroPoseToStandingAbsoluteTrackingPose as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetSeatedZeroPoseToStandingAbsoluteTrackingPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>()))
                .GetRawZeroPoseToStandingAbsoluteTrackingPose as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetRawZeroPoseToStandingAbsoluteTrackingPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetSortedTrackedDeviceIndicesOfClass
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetSortedTrackedDeviceIndicesOfClass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetTrackedDeviceActivityLevel
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetTrackedDeviceActivityLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).ApplyTransform as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(ApplyTransform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetTrackedDeviceIndexForControllerRole
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetTrackedDeviceIndexForControllerRole)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetControllerRoleForTrackedDeviceIndex
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetControllerRoleForTrackedDeviceIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetTrackedDeviceClass as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetTrackedDeviceClass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).IsTrackedDeviceConnected as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(IsTrackedDeviceConnected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetBoolTrackedDeviceProperty
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetBoolTrackedDeviceProperty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetFloatTrackedDeviceProperty
                as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetFloatTrackedDeviceProperty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetInt32TrackedDeviceProperty
                as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetInt32TrackedDeviceProperty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetUint64TrackedDeviceProperty
                as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetUint64TrackedDeviceProperty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetMatrix34TrackedDeviceProperty
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetMatrix34TrackedDeviceProperty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetArrayTrackedDeviceProperty
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetArrayTrackedDeviceProperty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetStringTrackedDeviceProperty
                as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetStringTrackedDeviceProperty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetPropErrorNameFromEnum as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetPropErrorNameFromEnum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).PollNextEvent as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(PollNextEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).PollNextEventWithPose as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(PollNextEventWithPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetEventTypeNameFromEnum as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetEventTypeNameFromEnum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetHiddenAreaMesh as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetHiddenAreaMesh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetControllerState as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetControllerState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetControllerStateWithPose as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetControllerStateWithPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).TriggerHapticPulse as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(TriggerHapticPulse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetButtonIdNameFromEnum as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetButtonIdNameFromEnum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetControllerAxisTypeNameFromEnum
                as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetControllerAxisTypeNameFromEnum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).IsInputAvailable as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(IsInputAvailable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).IsSteamVRDrawingControllers as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(IsSteamVRDrawingControllers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).ShouldApplicationPause as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(ShouldApplicationPause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).ShouldApplicationReduceRenderingWork
                as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(ShouldApplicationReduceRenderingWork)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).PerformFirmwareUpdate as *const _
                as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(PerformFirmwareUpdate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).AcknowledgeQuit_Exiting as *const _
                as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(AcknowledgeQuit_Exiting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetAppContainerFilePaths as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetAppContainerFilePaths)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSystem_FnTable>())).GetRuntimeVersion as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSystem_FnTable),
            "::",
            stringify!(GetRuntimeVersion)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRExtendedDisplay_FnTable {
    pub GetWindowBounds: ::std::option::Option<
        unsafe extern "C" fn(pnX: *mut i32, pnY: *mut i32, pnWidth: *mut u32, pnHeight: *mut u32),
    >,
    pub GetEyeOutputViewport: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pnX: *mut u32,
            pnY: *mut u32,
            pnWidth: *mut u32,
            pnHeight: *mut u32,
        ),
    >,
    pub GetDXGIOutputInfo: ::std::option::Option<
        unsafe extern "C" fn(pnAdapterIndex: *mut i32, pnAdapterOutputIndex: *mut i32),
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRExtendedDisplay_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRExtendedDisplay_FnTable>(),
        24usize,
        concat!("Size of: ", stringify!(VR_IVRExtendedDisplay_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRExtendedDisplay_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRExtendedDisplay_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRExtendedDisplay_FnTable>())).GetWindowBounds as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRExtendedDisplay_FnTable),
            "::",
            stringify!(GetWindowBounds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRExtendedDisplay_FnTable>())).GetEyeOutputViewport
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRExtendedDisplay_FnTable),
            "::",
            stringify!(GetEyeOutputViewport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRExtendedDisplay_FnTable>())).GetDXGIOutputInfo as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRExtendedDisplay_FnTable),
            "::",
            stringify!(GetDXGIOutputInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRTrackedCamera_FnTable {
    pub GetCameraErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(eCameraError: EVRTrackedCameraError) -> *mut ::std::os::raw::c_char,
    >,
    pub HasCamera: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            pHasCamera: *mut bool,
        ) -> EVRTrackedCameraError,
    >,
    pub GetCameraFrameSize: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            eFrameType: EVRTrackedCameraFrameType,
            pnWidth: *mut u32,
            pnHeight: *mut u32,
            pnFrameBufferSize: *mut u32,
        ) -> EVRTrackedCameraError,
    >,
    pub GetCameraIntrinsics: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            nCameraIndex: u32,
            eFrameType: EVRTrackedCameraFrameType,
            pFocalLength: *mut HmdVector2_t,
            pCenter: *mut HmdVector2_t,
        ) -> EVRTrackedCameraError,
    >,
    pub GetCameraProjection: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            nCameraIndex: u32,
            eFrameType: EVRTrackedCameraFrameType,
            flZNear: f32,
            flZFar: f32,
            pProjection: *mut HmdMatrix44_t,
        ) -> EVRTrackedCameraError,
    >,
    pub AcquireVideoStreamingService: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            pHandle: *mut TrackedCameraHandle_t,
        ) -> EVRTrackedCameraError,
    >,
    pub ReleaseVideoStreamingService: ::std::option::Option<
        unsafe extern "C" fn(hTrackedCamera: TrackedCameraHandle_t) -> EVRTrackedCameraError,
    >,
    pub GetVideoStreamFrameBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            hTrackedCamera: TrackedCameraHandle_t,
            eFrameType: EVRTrackedCameraFrameType,
            pFrameBuffer: *mut ::std::os::raw::c_void,
            nFrameBufferSize: u32,
            pFrameHeader: *mut CameraVideoStreamFrameHeader_t,
            nFrameHeaderSize: u32,
        ) -> EVRTrackedCameraError,
    >,
    pub GetVideoStreamTextureSize: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            eFrameType: EVRTrackedCameraFrameType,
            pTextureBounds: *mut VRTextureBounds_t,
            pnWidth: *mut u32,
            pnHeight: *mut u32,
        ) -> EVRTrackedCameraError,
    >,
    pub GetVideoStreamTextureD3D11: ::std::option::Option<
        unsafe extern "C" fn(
            hTrackedCamera: TrackedCameraHandle_t,
            eFrameType: EVRTrackedCameraFrameType,
            pD3D11DeviceOrResource: *mut ::std::os::raw::c_void,
            ppD3D11ShaderResourceView: *mut *mut ::std::os::raw::c_void,
            pFrameHeader: *mut CameraVideoStreamFrameHeader_t,
            nFrameHeaderSize: u32,
        ) -> EVRTrackedCameraError,
    >,
    pub GetVideoStreamTextureGL: ::std::option::Option<
        unsafe extern "C" fn(
            hTrackedCamera: TrackedCameraHandle_t,
            eFrameType: EVRTrackedCameraFrameType,
            pglTextureId: *mut glUInt_t,
            pFrameHeader: *mut CameraVideoStreamFrameHeader_t,
            nFrameHeaderSize: u32,
        ) -> EVRTrackedCameraError,
    >,
    pub ReleaseVideoStreamTextureGL: ::std::option::Option<
        unsafe extern "C" fn(
            hTrackedCamera: TrackedCameraHandle_t,
            glTextureId: glUInt_t,
        ) -> EVRTrackedCameraError,
    >,
    pub SetCameraTrackingSpace:
        ::std::option::Option<unsafe extern "C" fn(eUniverse: ETrackingUniverseOrigin)>,
    pub GetCameraTrackingSpace:
        ::std::option::Option<unsafe extern "C" fn() -> ETrackingUniverseOrigin>,
}
#[test]
fn bindgen_test_layout_VR_IVRTrackedCamera_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRTrackedCamera_FnTable>(),
        112usize,
        concat!("Size of: ", stringify!(VR_IVRTrackedCamera_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRTrackedCamera_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRTrackedCamera_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRTrackedCamera_FnTable>())).GetCameraErrorNameFromEnum
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRTrackedCamera_FnTable),
            "::",
            stringify!(GetCameraErrorNameFromEnum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRTrackedCamera_FnTable>())).HasCamera as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRTrackedCamera_FnTable),
            "::",
            stringify!(HasCamera)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRTrackedCamera_FnTable>())).GetCameraFrameSize as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRTrackedCamera_FnTable),
            "::",
            stringify!(GetCameraFrameSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRTrackedCamera_FnTable>())).GetCameraIntrinsics as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRTrackedCamera_FnTable),
            "::",
            stringify!(GetCameraIntrinsics)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRTrackedCamera_FnTable>())).GetCameraProjection as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRTrackedCamera_FnTable),
            "::",
            stringify!(GetCameraProjection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRTrackedCamera_FnTable>())).AcquireVideoStreamingService
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRTrackedCamera_FnTable),
            "::",
            stringify!(AcquireVideoStreamingService)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRTrackedCamera_FnTable>())).ReleaseVideoStreamingService
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRTrackedCamera_FnTable),
            "::",
            stringify!(ReleaseVideoStreamingService)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRTrackedCamera_FnTable>())).GetVideoStreamFrameBuffer
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRTrackedCamera_FnTable),
            "::",
            stringify!(GetVideoStreamFrameBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRTrackedCamera_FnTable>())).GetVideoStreamTextureSize
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRTrackedCamera_FnTable),
            "::",
            stringify!(GetVideoStreamTextureSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRTrackedCamera_FnTable>())).GetVideoStreamTextureD3D11
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRTrackedCamera_FnTable),
            "::",
            stringify!(GetVideoStreamTextureD3D11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRTrackedCamera_FnTable>())).GetVideoStreamTextureGL
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRTrackedCamera_FnTable),
            "::",
            stringify!(GetVideoStreamTextureGL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRTrackedCamera_FnTable>())).ReleaseVideoStreamTextureGL
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRTrackedCamera_FnTable),
            "::",
            stringify!(ReleaseVideoStreamTextureGL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRTrackedCamera_FnTable>())).SetCameraTrackingSpace
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRTrackedCamera_FnTable),
            "::",
            stringify!(SetCameraTrackingSpace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRTrackedCamera_FnTable>())).GetCameraTrackingSpace
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRTrackedCamera_FnTable),
            "::",
            stringify!(GetCameraTrackingSpace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRApplications_FnTable {
    pub AddApplicationManifest: ::std::option::Option<
        unsafe extern "C" fn(
            pchApplicationManifestFullPath: *mut ::std::os::raw::c_char,
            bTemporary: bool,
        ) -> EVRApplicationError,
    >,
    pub RemoveApplicationManifest: ::std::option::Option<
        unsafe extern "C" fn(
            pchApplicationManifestFullPath: *mut ::std::os::raw::c_char,
        ) -> EVRApplicationError,
    >,
    pub IsApplicationInstalled:
        ::std::option::Option<unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> bool>,
    pub GetApplicationCount: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub GetApplicationKeyByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            unApplicationIndex: u32,
            pchAppKeyBuffer: *mut ::std::os::raw::c_char,
            unAppKeyBufferLen: u32,
        ) -> EVRApplicationError,
    >,
    pub GetApplicationKeyByProcessId: ::std::option::Option<
        unsafe extern "C" fn(
            unProcessId: u32,
            pchAppKeyBuffer: *mut ::std::os::raw::c_char,
            unAppKeyBufferLen: u32,
        ) -> EVRApplicationError,
    >,
    pub LaunchApplication: ::std::option::Option<
        unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> EVRApplicationError,
    >,
    pub LaunchTemplateApplication: ::std::option::Option<
        unsafe extern "C" fn(
            pchTemplateAppKey: *mut ::std::os::raw::c_char,
            pchNewAppKey: *mut ::std::os::raw::c_char,
            pKeys: *mut AppOverrideKeys_t,
            unKeys: u32,
        ) -> EVRApplicationError,
    >,
    pub LaunchApplicationFromMimeType: ::std::option::Option<
        unsafe extern "C" fn(
            pchMimeType: *mut ::std::os::raw::c_char,
            pchArgs: *mut ::std::os::raw::c_char,
        ) -> EVRApplicationError,
    >,
    pub LaunchDashboardOverlay: ::std::option::Option<
        unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> EVRApplicationError,
    >,
    pub CancelApplicationLaunch:
        ::std::option::Option<unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> bool>,
    pub IdentifyApplication: ::std::option::Option<
        unsafe extern "C" fn(
            unProcessId: u32,
            pchAppKey: *mut ::std::os::raw::c_char,
        ) -> EVRApplicationError,
    >,
    pub GetApplicationProcessId:
        ::std::option::Option<unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> u32>,
    pub GetApplicationsErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(error: EVRApplicationError) -> *mut ::std::os::raw::c_char,
    >,
    pub GetApplicationPropertyString: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            eProperty: EVRApplicationProperty,
            pchPropertyValueBuffer: *mut ::std::os::raw::c_char,
            unPropertyValueBufferLen: u32,
            peError: *mut EVRApplicationError,
        ) -> u32,
    >,
    pub GetApplicationPropertyBool: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            eProperty: EVRApplicationProperty,
            peError: *mut EVRApplicationError,
        ) -> bool,
    >,
    pub GetApplicationPropertyUint64: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            eProperty: EVRApplicationProperty,
            peError: *mut EVRApplicationError,
        ) -> u64,
    >,
    pub SetApplicationAutoLaunch: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            bAutoLaunch: bool,
        ) -> EVRApplicationError,
    >,
    pub GetApplicationAutoLaunch:
        ::std::option::Option<unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> bool>,
    pub SetDefaultApplicationForMimeType: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            pchMimeType: *mut ::std::os::raw::c_char,
        ) -> EVRApplicationError,
    >,
    pub GetDefaultApplicationForMimeType: ::std::option::Option<
        unsafe extern "C" fn(
            pchMimeType: *mut ::std::os::raw::c_char,
            pchAppKeyBuffer: *mut ::std::os::raw::c_char,
            unAppKeyBufferLen: u32,
        ) -> bool,
    >,
    pub GetApplicationSupportedMimeTypes: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            pchMimeTypesBuffer: *mut ::std::os::raw::c_char,
            unMimeTypesBuffer: u32,
        ) -> bool,
    >,
    pub GetApplicationsThatSupportMimeType: ::std::option::Option<
        unsafe extern "C" fn(
            pchMimeType: *mut ::std::os::raw::c_char,
            pchAppKeysThatSupportBuffer: *mut ::std::os::raw::c_char,
            unAppKeysThatSupportBuffer: u32,
        ) -> u32,
    >,
    pub GetApplicationLaunchArguments: ::std::option::Option<
        unsafe extern "C" fn(
            unHandle: u32,
            pchArgs: *mut ::std::os::raw::c_char,
            unArgs: u32,
        ) -> u32,
    >,
    pub GetStartingApplication: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKeyBuffer: *mut ::std::os::raw::c_char,
            unAppKeyBufferLen: u32,
        ) -> EVRApplicationError,
    >,
    pub GetSceneApplicationState:
        ::std::option::Option<unsafe extern "C" fn() -> EVRSceneApplicationState>,
    pub PerformApplicationPrelaunchCheck: ::std::option::Option<
        unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> EVRApplicationError,
    >,
    pub GetSceneApplicationStateNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(state: EVRSceneApplicationState) -> *mut ::std::os::raw::c_char,
    >,
    pub LaunchInternalProcess: ::std::option::Option<
        unsafe extern "C" fn(
            pchBinaryPath: *mut ::std::os::raw::c_char,
            pchArguments: *mut ::std::os::raw::c_char,
            pchWorkingDirectory: *mut ::std::os::raw::c_char,
        ) -> EVRApplicationError,
    >,
    pub GetCurrentSceneProcessId: ::std::option::Option<unsafe extern "C" fn() -> u32>,
}
#[test]
fn bindgen_test_layout_VR_IVRApplications_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRApplications_FnTable>(),
        240usize,
        concat!("Size of: ", stringify!(VR_IVRApplications_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRApplications_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRApplications_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).AddApplicationManifest
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(AddApplicationManifest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).RemoveApplicationManifest
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(RemoveApplicationManifest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).IsApplicationInstalled
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(IsApplicationInstalled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).GetApplicationCount as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetApplicationCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).GetApplicationKeyByIndex
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetApplicationKeyByIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).GetApplicationKeyByProcessId
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetApplicationKeyByProcessId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).LaunchApplication as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(LaunchApplication)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).LaunchTemplateApplication
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(LaunchTemplateApplication)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).LaunchApplicationFromMimeType
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(LaunchApplicationFromMimeType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).LaunchDashboardOverlay
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(LaunchDashboardOverlay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).CancelApplicationLaunch
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(CancelApplicationLaunch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).IdentifyApplication as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(IdentifyApplication)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).GetApplicationProcessId
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetApplicationProcessId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).GetApplicationsErrorNameFromEnum
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetApplicationsErrorNameFromEnum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).GetApplicationPropertyString
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetApplicationPropertyString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).GetApplicationPropertyBool
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetApplicationPropertyBool)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).GetApplicationPropertyUint64
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetApplicationPropertyUint64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).SetApplicationAutoLaunch
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(SetApplicationAutoLaunch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).GetApplicationAutoLaunch
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetApplicationAutoLaunch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).SetDefaultApplicationForMimeType
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(SetDefaultApplicationForMimeType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).GetDefaultApplicationForMimeType
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetDefaultApplicationForMimeType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).GetApplicationSupportedMimeTypes
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetApplicationSupportedMimeTypes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>()))
                .GetApplicationsThatSupportMimeType as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetApplicationsThatSupportMimeType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).GetApplicationLaunchArguments
                as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetApplicationLaunchArguments)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).GetStartingApplication
                as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetStartingApplication)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).GetSceneApplicationState
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetSceneApplicationState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).PerformApplicationPrelaunchCheck
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(PerformApplicationPrelaunchCheck)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>()))
                .GetSceneApplicationStateNameFromEnum as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetSceneApplicationStateNameFromEnum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).LaunchInternalProcess as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(LaunchInternalProcess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRApplications_FnTable>())).GetCurrentSceneProcessId
                as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRApplications_FnTable),
            "::",
            stringify!(GetCurrentSceneProcessId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRChaperone_FnTable {
    pub GetCalibrationState:
        ::std::option::Option<unsafe extern "C" fn() -> ChaperoneCalibrationState>,
    pub GetPlayAreaSize:
        ::std::option::Option<unsafe extern "C" fn(pSizeX: *mut f32, pSizeZ: *mut f32) -> bool>,
    pub GetPlayAreaRect: ::std::option::Option<unsafe extern "C" fn(rect: *mut HmdQuad_t) -> bool>,
    pub ReloadInfo: ::std::option::Option<unsafe extern "C" fn()>,
    pub SetSceneColor: ::std::option::Option<unsafe extern "C" fn(color: HmdColor_t)>,
    pub GetBoundsColor: ::std::option::Option<
        unsafe extern "C" fn(
            pOutputColorArray: *mut HmdColor_t,
            nNumOutputColors: ::std::os::raw::c_int,
            flCollisionBoundsFadeDistance: f32,
            pOutputCameraColor: *mut HmdColor_t,
        ),
    >,
    pub AreBoundsVisible: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ForceBoundsVisible: ::std::option::Option<unsafe extern "C" fn(bForce: bool)>,
    pub ResetZeroPose: ::std::option::Option<
        unsafe extern "C" fn(eTrackingUniverseOrigin: ETrackingUniverseOrigin),
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRChaperone_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRChaperone_FnTable>(),
        72usize,
        concat!("Size of: ", stringify!(VR_IVRChaperone_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRChaperone_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRChaperone_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperone_FnTable>())).GetCalibrationState as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperone_FnTable),
            "::",
            stringify!(GetCalibrationState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperone_FnTable>())).GetPlayAreaSize as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperone_FnTable),
            "::",
            stringify!(GetPlayAreaSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperone_FnTable>())).GetPlayAreaRect as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperone_FnTable),
            "::",
            stringify!(GetPlayAreaRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperone_FnTable>())).ReloadInfo as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperone_FnTable),
            "::",
            stringify!(ReloadInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperone_FnTable>())).SetSceneColor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperone_FnTable),
            "::",
            stringify!(SetSceneColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperone_FnTable>())).GetBoundsColor as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperone_FnTable),
            "::",
            stringify!(GetBoundsColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperone_FnTable>())).AreBoundsVisible as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperone_FnTable),
            "::",
            stringify!(AreBoundsVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperone_FnTable>())).ForceBoundsVisible as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperone_FnTable),
            "::",
            stringify!(ForceBoundsVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperone_FnTable>())).ResetZeroPose as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperone_FnTable),
            "::",
            stringify!(ResetZeroPose)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRChaperoneSetup_FnTable {
    pub CommitWorkingCopy:
        ::std::option::Option<unsafe extern "C" fn(configFile: EChaperoneConfigFile) -> bool>,
    pub RevertWorkingCopy: ::std::option::Option<unsafe extern "C" fn()>,
    pub GetWorkingPlayAreaSize:
        ::std::option::Option<unsafe extern "C" fn(pSizeX: *mut f32, pSizeZ: *mut f32) -> bool>,
    pub GetWorkingPlayAreaRect:
        ::std::option::Option<unsafe extern "C" fn(rect: *mut HmdQuad_t) -> bool>,
    pub GetWorkingCollisionBoundsInfo: ::std::option::Option<
        unsafe extern "C" fn(pQuadsBuffer: *mut HmdQuad_t, punQuadsCount: *mut u32) -> bool,
    >,
    pub GetLiveCollisionBoundsInfo: ::std::option::Option<
        unsafe extern "C" fn(pQuadsBuffer: *mut HmdQuad_t, punQuadsCount: *mut u32) -> bool,
    >,
    pub GetWorkingSeatedZeroPoseToRawTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(pmatSeatedZeroPoseToRawTrackingPose: *mut HmdMatrix34_t) -> bool,
    >,
    pub GetWorkingStandingZeroPoseToRawTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(pmatStandingZeroPoseToRawTrackingPose: *mut HmdMatrix34_t) -> bool,
    >,
    pub SetWorkingPlayAreaSize: ::std::option::Option<unsafe extern "C" fn(sizeX: f32, sizeZ: f32)>,
    pub SetWorkingCollisionBoundsInfo: ::std::option::Option<
        unsafe extern "C" fn(pQuadsBuffer: *mut HmdQuad_t, unQuadsCount: u32),
    >,
    pub SetWorkingPerimeter: ::std::option::Option<
        unsafe extern "C" fn(pPointBuffer: *mut HmdVector2_t, unPointCount: u32),
    >,
    pub SetWorkingSeatedZeroPoseToRawTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(pMatSeatedZeroPoseToRawTrackingPose: *mut HmdMatrix34_t),
    >,
    pub SetWorkingStandingZeroPoseToRawTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(pMatStandingZeroPoseToRawTrackingPose: *mut HmdMatrix34_t),
    >,
    pub ReloadFromDisk:
        ::std::option::Option<unsafe extern "C" fn(configFile: EChaperoneConfigFile)>,
    pub GetLiveSeatedZeroPoseToRawTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(pmatSeatedZeroPoseToRawTrackingPose: *mut HmdMatrix34_t) -> bool,
    >,
    pub ExportLiveToBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            pBuffer: *mut ::std::os::raw::c_char,
            pnBufferLength: *mut u32,
        ) -> bool,
    >,
    pub ImportFromBufferToWorking: ::std::option::Option<
        unsafe extern "C" fn(pBuffer: *mut ::std::os::raw::c_char, nImportFlags: u32) -> bool,
    >,
    pub ShowWorkingSetPreview: ::std::option::Option<unsafe extern "C" fn()>,
    pub HideWorkingSetPreview: ::std::option::Option<unsafe extern "C" fn()>,
    pub RoomSetupStarting: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_VR_IVRChaperoneSetup_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRChaperoneSetup_FnTable>(),
        160usize,
        concat!("Size of: ", stringify!(VR_IVRChaperoneSetup_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRChaperoneSetup_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRChaperoneSetup_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>())).CommitWorkingCopy as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(CommitWorkingCopy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>())).RevertWorkingCopy as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(RevertWorkingCopy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>())).GetWorkingPlayAreaSize
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(GetWorkingPlayAreaSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>())).GetWorkingPlayAreaRect
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(GetWorkingPlayAreaRect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>())).GetWorkingCollisionBoundsInfo
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(GetWorkingCollisionBoundsInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>())).GetLiveCollisionBoundsInfo
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(GetLiveCollisionBoundsInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>()))
                .GetWorkingSeatedZeroPoseToRawTrackingPose as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(GetWorkingSeatedZeroPoseToRawTrackingPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>()))
                .GetWorkingStandingZeroPoseToRawTrackingPose as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(GetWorkingStandingZeroPoseToRawTrackingPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>())).SetWorkingPlayAreaSize
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(SetWorkingPlayAreaSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>())).SetWorkingCollisionBoundsInfo
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(SetWorkingCollisionBoundsInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>())).SetWorkingPerimeter as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(SetWorkingPerimeter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>()))
                .SetWorkingSeatedZeroPoseToRawTrackingPose as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(SetWorkingSeatedZeroPoseToRawTrackingPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>()))
                .SetWorkingStandingZeroPoseToRawTrackingPose as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(SetWorkingStandingZeroPoseToRawTrackingPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>())).ReloadFromDisk as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(ReloadFromDisk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>()))
                .GetLiveSeatedZeroPoseToRawTrackingPose as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(GetLiveSeatedZeroPoseToRawTrackingPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>())).ExportLiveToBuffer as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(ExportLiveToBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>())).ImportFromBufferToWorking
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(ImportFromBufferToWorking)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>())).ShowWorkingSetPreview
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(ShowWorkingSetPreview)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>())).HideWorkingSetPreview
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(HideWorkingSetPreview)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRChaperoneSetup_FnTable>())).RoomSetupStarting as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRChaperoneSetup_FnTable),
            "::",
            stringify!(RoomSetupStarting)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRCompositor_FnTable {
    pub SetTrackingSpace:
        ::std::option::Option<unsafe extern "C" fn(eOrigin: ETrackingUniverseOrigin)>,
    pub GetTrackingSpace: ::std::option::Option<unsafe extern "C" fn() -> ETrackingUniverseOrigin>,
    pub WaitGetPoses: ::std::option::Option<
        unsafe extern "C" fn(
            pRenderPoseArray: *mut TrackedDevicePose_t,
            unRenderPoseArrayCount: u32,
            pGamePoseArray: *mut TrackedDevicePose_t,
            unGamePoseArrayCount: u32,
        ) -> EVRCompositorError,
    >,
    pub GetLastPoses: ::std::option::Option<
        unsafe extern "C" fn(
            pRenderPoseArray: *mut TrackedDevicePose_t,
            unRenderPoseArrayCount: u32,
            pGamePoseArray: *mut TrackedDevicePose_t,
            unGamePoseArrayCount: u32,
        ) -> EVRCompositorError,
    >,
    pub GetLastPoseForTrackedDeviceIndex: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            pOutputPose: *mut TrackedDevicePose_t,
            pOutputGamePose: *mut TrackedDevicePose_t,
        ) -> EVRCompositorError,
    >,
    pub Submit: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pTexture: *mut Texture_t,
            pBounds: *mut VRTextureBounds_t,
            nSubmitFlags: EVRSubmitFlags,
        ) -> EVRCompositorError,
    >,
    pub ClearLastSubmittedFrame: ::std::option::Option<unsafe extern "C" fn()>,
    pub PostPresentHandoff: ::std::option::Option<unsafe extern "C" fn()>,
    pub GetFrameTiming: ::std::option::Option<
        unsafe extern "C" fn(pTiming: *mut Compositor_FrameTiming, unFramesAgo: u32) -> bool,
    >,
    pub GetFrameTimings: ::std::option::Option<
        unsafe extern "C" fn(pTiming: *mut Compositor_FrameTiming, nFrames: u32) -> u32,
    >,
    pub GetFrameTimeRemaining: ::std::option::Option<unsafe extern "C" fn() -> f32>,
    pub GetCumulativeStats: ::std::option::Option<
        unsafe extern "C" fn(pStats: *mut Compositor_CumulativeStats, nStatsSizeInBytes: u32),
    >,
    pub FadeToColor: ::std::option::Option<
        unsafe extern "C" fn(
            fSeconds: f32,
            fRed: f32,
            fGreen: f32,
            fBlue: f32,
            fAlpha: f32,
            bBackground: bool,
        ),
    >,
    pub GetCurrentFadeColor:
        ::std::option::Option<unsafe extern "C" fn(bBackground: bool) -> HmdColor_t>,
    pub FadeGrid: ::std::option::Option<unsafe extern "C" fn(fSeconds: f32, bFadeGridIn: bool)>,
    pub GetCurrentGridAlpha: ::std::option::Option<unsafe extern "C" fn() -> f32>,
    pub SetSkyboxOverride: ::std::option::Option<
        unsafe extern "C" fn(pTextures: *mut Texture_t, unTextureCount: u32) -> EVRCompositorError,
    >,
    pub ClearSkyboxOverride: ::std::option::Option<unsafe extern "C" fn()>,
    pub CompositorBringToFront: ::std::option::Option<unsafe extern "C" fn()>,
    pub CompositorGoToBack: ::std::option::Option<unsafe extern "C" fn()>,
    pub CompositorQuit: ::std::option::Option<unsafe extern "C" fn()>,
    pub IsFullscreen: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub GetCurrentSceneFocusProcess: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub GetLastFrameRenderer: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub CanRenderScene: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ShowMirrorWindow: ::std::option::Option<unsafe extern "C" fn()>,
    pub HideMirrorWindow: ::std::option::Option<unsafe extern "C" fn()>,
    pub IsMirrorWindowVisible: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub CompositorDumpImages: ::std::option::Option<unsafe extern "C" fn()>,
    pub ShouldAppRenderWithLowResources: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ForceInterleavedReprojectionOn:
        ::std::option::Option<unsafe extern "C" fn(bOverride: bool)>,
    pub ForceReconnectProcess: ::std::option::Option<unsafe extern "C" fn()>,
    pub SuspendRendering: ::std::option::Option<unsafe extern "C" fn(bSuspend: bool)>,
    pub GetMirrorTextureD3D11: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pD3D11DeviceOrResource: *mut ::std::os::raw::c_void,
            ppD3D11ShaderResourceView: *mut *mut ::std::os::raw::c_void,
        ) -> EVRCompositorError,
    >,
    pub ReleaseMirrorTextureD3D11: ::std::option::Option<
        unsafe extern "C" fn(pD3D11ShaderResourceView: *mut ::std::os::raw::c_void),
    >,
    pub GetMirrorTextureGL: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pglTextureId: *mut glUInt_t,
            pglSharedTextureHandle: *mut glSharedTextureHandle_t,
        ) -> EVRCompositorError,
    >,
    pub ReleaseSharedGLTexture: ::std::option::Option<
        unsafe extern "C" fn(
            glTextureId: glUInt_t,
            glSharedTextureHandle: glSharedTextureHandle_t,
        ) -> bool,
    >,
    pub LockGLSharedTextureForAccess:
        ::std::option::Option<unsafe extern "C" fn(glSharedTextureHandle: glSharedTextureHandle_t)>,
    pub UnlockGLSharedTextureForAccess:
        ::std::option::Option<unsafe extern "C" fn(glSharedTextureHandle: glSharedTextureHandle_t)>,
    pub GetVulkanInstanceExtensionsRequired: ::std::option::Option<
        unsafe extern "C" fn(pchValue: *mut ::std::os::raw::c_char, unBufferSize: u32) -> u32,
    >,
    pub GetVulkanDeviceExtensionsRequired: ::std::option::Option<
        unsafe extern "C" fn(
            pPhysicalDevice: *mut VkPhysicalDevice_T,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
        ) -> u32,
    >,
    pub SetExplicitTimingMode:
        ::std::option::Option<unsafe extern "C" fn(eTimingMode: EVRCompositorTimingMode)>,
    pub SubmitExplicitTimingData:
        ::std::option::Option<unsafe extern "C" fn() -> EVRCompositorError>,
    pub IsMotionSmoothingEnabled: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub IsMotionSmoothingSupported: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub IsCurrentSceneFocusAppLoading: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub SetStageOverride_Async: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelPath: *mut ::std::os::raw::c_char,
            pTransform: *mut HmdMatrix34_t,
            pRenderSettings: *mut Compositor_StageRenderSettings,
            nSizeOfRenderSettings: u32,
        ) -> EVRCompositorError,
    >,
    pub ClearStageOverride: ::std::option::Option<unsafe extern "C" fn()>,
    pub GetCompositorBenchmarkResults: ::std::option::Option<
        unsafe extern "C" fn(
            pBenchmarkResults: *mut Compositor_BenchmarkResults,
            nSizeOfBenchmarkResults: u32,
        ) -> bool,
    >,
    pub GetLastPosePredictionIDs: ::std::option::Option<
        unsafe extern "C" fn(
            pRenderPosePredictionID: *mut u32,
            pGamePosePredictionID: *mut u32,
        ) -> EVRCompositorError,
    >,
    pub GetPosesForFrame: ::std::option::Option<
        unsafe extern "C" fn(
            unPosePredictionID: u32,
            pPoseArray: *mut TrackedDevicePose_t,
            unPoseArrayCount: u32,
        ) -> EVRCompositorError,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRCompositor_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRCompositor_FnTable>(),
        408usize,
        concat!("Size of: ", stringify!(VR_IVRCompositor_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRCompositor_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRCompositor_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).SetTrackingSpace as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(SetTrackingSpace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetTrackingSpace as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetTrackingSpace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).WaitGetPoses as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(WaitGetPoses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetLastPoses as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetLastPoses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetLastPoseForTrackedDeviceIndex
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetLastPoseForTrackedDeviceIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).Submit as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(Submit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).ClearLastSubmittedFrame as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(ClearLastSubmittedFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).PostPresentHandoff as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(PostPresentHandoff)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetFrameTiming as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetFrameTiming)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetFrameTimings as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetFrameTimings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetFrameTimeRemaining as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetFrameTimeRemaining)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetCumulativeStats as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetCumulativeStats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).FadeToColor as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(FadeToColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetCurrentFadeColor as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetCurrentFadeColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).FadeGrid as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(FadeGrid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetCurrentGridAlpha as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetCurrentGridAlpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).SetSkyboxOverride as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(SetSkyboxOverride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).ClearSkyboxOverride as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(ClearSkyboxOverride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).CompositorBringToFront as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(CompositorBringToFront)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).CompositorGoToBack as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(CompositorGoToBack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).CompositorQuit as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(CompositorQuit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).IsFullscreen as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(IsFullscreen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetCurrentSceneFocusProcess
                as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetCurrentSceneFocusProcess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetLastFrameRenderer as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetLastFrameRenderer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).CanRenderScene as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(CanRenderScene)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).ShowMirrorWindow as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(ShowMirrorWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).HideMirrorWindow as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(HideMirrorWindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).IsMirrorWindowVisible as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(IsMirrorWindowVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).CompositorDumpImages as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(CompositorDumpImages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).ShouldAppRenderWithLowResources
                as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(ShouldAppRenderWithLowResources)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).ForceInterleavedReprojectionOn
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(ForceInterleavedReprojectionOn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).ForceReconnectProcess as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(ForceReconnectProcess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).SuspendRendering as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(SuspendRendering)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetMirrorTextureD3D11 as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetMirrorTextureD3D11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).ReleaseMirrorTextureD3D11
                as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(ReleaseMirrorTextureD3D11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetMirrorTextureGL as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetMirrorTextureGL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).ReleaseSharedGLTexture as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(ReleaseSharedGLTexture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).LockGLSharedTextureForAccess
                as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(LockGLSharedTextureForAccess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).UnlockGLSharedTextureForAccess
                as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(UnlockGLSharedTextureForAccess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetVulkanInstanceExtensionsRequired
                as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetVulkanInstanceExtensionsRequired)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetVulkanDeviceExtensionsRequired
                as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetVulkanDeviceExtensionsRequired)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).SetExplicitTimingMode as *const _
                as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(SetExplicitTimingMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).SubmitExplicitTimingData
                as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(SubmitExplicitTimingData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).IsMotionSmoothingEnabled
                as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(IsMotionSmoothingEnabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).IsMotionSmoothingSupported
                as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(IsMotionSmoothingSupported)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).IsCurrentSceneFocusAppLoading
                as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(IsCurrentSceneFocusAppLoading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).SetStageOverride_Async as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(SetStageOverride_Async)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).ClearStageOverride as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(ClearStageOverride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetCompositorBenchmarkResults
                as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetCompositorBenchmarkResults)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetLastPosePredictionIDs
                as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetLastPosePredictionIDs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRCompositor_FnTable>())).GetPosesForFrame as *const _
                as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRCompositor_FnTable),
            "::",
            stringify!(GetPosesForFrame)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVROverlay_FnTable {
    pub FindOverlay: ::std::option::Option<
        unsafe extern "C" fn(
            pchOverlayKey: *mut ::std::os::raw::c_char,
            pOverlayHandle: *mut VROverlayHandle_t,
        ) -> EVROverlayError,
    >,
    pub CreateOverlay: ::std::option::Option<
        unsafe extern "C" fn(
            pchOverlayKey: *mut ::std::os::raw::c_char,
            pchOverlayName: *mut ::std::os::raw::c_char,
            pOverlayHandle: *mut VROverlayHandle_t,
        ) -> EVROverlayError,
    >,
    pub DestroyOverlay: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub GetOverlayKey: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
            pError: *mut EVROverlayError,
        ) -> u32,
    >,
    pub GetOverlayName: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
            pError: *mut EVROverlayError,
        ) -> u32,
    >,
    pub SetOverlayName: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pchName: *mut ::std::os::raw::c_char,
        ) -> EVROverlayError,
    >,
    pub GetOverlayImageData: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvBuffer: *mut ::std::os::raw::c_void,
            unBufferSize: u32,
            punWidth: *mut u32,
            punHeight: *mut u32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(error: EVROverlayError) -> *mut ::std::os::raw::c_char,
    >,
    pub SetOverlayRenderingPid: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t, unPID: u32) -> EVROverlayError,
    >,
    pub GetOverlayRenderingPid:
        ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> u32>,
    pub SetOverlayFlag: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eOverlayFlag: VROverlayFlags,
            bEnabled: bool,
        ) -> EVROverlayError,
    >,
    pub GetOverlayFlag: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eOverlayFlag: VROverlayFlags,
            pbEnabled: *mut bool,
        ) -> EVROverlayError,
    >,
    pub GetOverlayFlags: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pFlags: *mut u32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayColor: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            fRed: f32,
            fGreen: f32,
            fBlue: f32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayColor: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfRed: *mut f32,
            pfGreen: *mut f32,
            pfBlue: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayAlpha: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t, fAlpha: f32) -> EVROverlayError,
    >,
    pub GetOverlayAlpha: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfAlpha: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTexelAspect: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            fTexelAspect: f32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTexelAspect: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfTexelAspect: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlaySortOrder: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            unSortOrder: u32,
        ) -> EVROverlayError,
    >,
    pub GetOverlaySortOrder: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            punSortOrder: *mut u32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayWidthInMeters: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            fWidthInMeters: f32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayWidthInMeters: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfWidthInMeters: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayCurvature: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            fCurvature: f32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayCurvature: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfCurvature: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTextureColorSpace: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eTextureColorSpace: EColorSpace,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTextureColorSpace: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            peTextureColorSpace: *mut EColorSpace,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTextureBounds: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pOverlayTextureBounds: *mut VRTextureBounds_t,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTextureBounds: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pOverlayTextureBounds: *mut VRTextureBounds_t,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformType: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            peTransformType: *mut VROverlayTransformType,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTransformAbsolute: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eTrackingOrigin: ETrackingUniverseOrigin,
            pmatTrackingOriginToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformAbsolute: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            peTrackingOrigin: *mut ETrackingUniverseOrigin,
            pmatTrackingOriginToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTransformTrackedDeviceRelative: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            unTrackedDevice: TrackedDeviceIndex_t,
            pmatTrackedDeviceToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformTrackedDeviceRelative: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            punTrackedDevice: *mut TrackedDeviceIndex_t,
            pmatTrackedDeviceToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTransformTrackedDeviceComponent: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            unDeviceIndex: TrackedDeviceIndex_t,
            pchComponentName: *mut ::std::os::raw::c_char,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformTrackedDeviceComponent: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            punDeviceIndex: *mut TrackedDeviceIndex_t,
            pchComponentName: *mut ::std::os::raw::c_char,
            unComponentNameSize: u32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformOverlayRelative: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            ulOverlayHandleParent: *mut VROverlayHandle_t,
            pmatParentOverlayToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTransformOverlayRelative: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            ulOverlayHandleParent: VROverlayHandle_t,
            pmatParentOverlayToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTransformCursor: ::std::option::Option<
        unsafe extern "C" fn(
            ulCursorOverlayHandle: VROverlayHandle_t,
            pvHotspot: *mut HmdVector2_t,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformCursor: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvHotspot: *mut HmdVector2_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTransformProjection: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eTrackingOrigin: ETrackingUniverseOrigin,
            pmatTrackingOriginToOverlayTransform: *mut HmdMatrix34_t,
            pProjection: *mut VROverlayProjection_t,
            eEye: EVREye,
        ) -> EVROverlayError,
    >,
    pub ShowOverlay: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub HideOverlay: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub IsOverlayVisible:
        ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> bool>,
    pub GetTransformForOverlayCoordinates: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eTrackingOrigin: ETrackingUniverseOrigin,
            coordinatesInOverlay: HmdVector2_t,
            pmatTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub PollNextOverlayEvent: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pEvent: *mut VREvent_t,
            uncbVREvent: u32,
        ) -> bool,
    >,
    pub GetOverlayInputMethod: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            peInputMethod: *mut VROverlayInputMethod,
        ) -> EVROverlayError,
    >,
    pub SetOverlayInputMethod: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eInputMethod: VROverlayInputMethod,
        ) -> EVROverlayError,
    >,
    pub GetOverlayMouseScale: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvecMouseScale: *mut HmdVector2_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayMouseScale: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvecMouseScale: *mut HmdVector2_t,
        ) -> EVROverlayError,
    >,
    pub ComputeOverlayIntersection: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pParams: *mut VROverlayIntersectionParams_t,
            pResults: *mut VROverlayIntersectionResults_t,
        ) -> bool,
    >,
    pub IsHoverTargetOverlay:
        ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> bool>,
    pub SetOverlayIntersectionMask: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pMaskPrimitives: *mut VROverlayIntersectionMaskPrimitive_t,
            unNumMaskPrimitives: u32,
            unPrimitiveSize: u32,
        ) -> EVROverlayError,
    >,
    pub TriggerLaserMouseHapticVibration: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            fDurationSeconds: f32,
            fFrequency: f32,
            fAmplitude: f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayCursor: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            ulCursorHandle: VROverlayHandle_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayCursorPositionOverride: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvCursor: *mut HmdVector2_t,
        ) -> EVROverlayError,
    >,
    pub ClearOverlayCursorPositionOverride: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub SetOverlayTexture: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pTexture: *mut Texture_t,
        ) -> EVROverlayError,
    >,
    pub ClearOverlayTexture: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub SetOverlayRaw: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvBuffer: *mut ::std::os::raw::c_void,
            unWidth: u32,
            unHeight: u32,
            unBytesPerPixel: u32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayFromFile: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pchFilePath: *mut ::std::os::raw::c_char,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTexture: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pNativeTextureHandle: *mut *mut ::std::os::raw::c_void,
            pNativeTextureRef: *mut ::std::os::raw::c_void,
            pWidth: *mut u32,
            pHeight: *mut u32,
            pNativeFormat: *mut u32,
            pAPIType: *mut ETextureType,
            pColorSpace: *mut EColorSpace,
            pTextureBounds: *mut VRTextureBounds_t,
        ) -> EVROverlayError,
    >,
    pub ReleaseNativeOverlayHandle: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pNativeTextureHandle: *mut ::std::os::raw::c_void,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTextureSize: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pWidth: *mut u32,
            pHeight: *mut u32,
        ) -> EVROverlayError,
    >,
    pub CreateDashboardOverlay: ::std::option::Option<
        unsafe extern "C" fn(
            pchOverlayKey: *mut ::std::os::raw::c_char,
            pchOverlayFriendlyName: *mut ::std::os::raw::c_char,
            pMainHandle: *mut VROverlayHandle_t,
            pThumbnailHandle: *mut VROverlayHandle_t,
        ) -> EVROverlayError,
    >,
    pub IsDashboardVisible: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub IsActiveDashboardOverlay:
        ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> bool>,
    pub SetDashboardOverlaySceneProcess: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            unProcessId: u32,
        ) -> EVROverlayError,
    >,
    pub GetDashboardOverlaySceneProcess: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            punProcessId: *mut u32,
        ) -> EVROverlayError,
    >,
    pub ShowDashboard:
        ::std::option::Option<unsafe extern "C" fn(pchOverlayToShow: *mut ::std::os::raw::c_char)>,
    pub GetPrimaryDashboardDevice:
        ::std::option::Option<unsafe extern "C" fn() -> TrackedDeviceIndex_t>,
    pub ShowKeyboard: ::std::option::Option<
        unsafe extern "C" fn(
            eInputMode: EGamepadTextInputMode,
            eLineInputMode: EGamepadTextInputLineMode,
            unFlags: u32,
            pchDescription: *mut ::std::os::raw::c_char,
            unCharMax: u32,
            pchExistingText: *mut ::std::os::raw::c_char,
            uUserValue: u64,
        ) -> EVROverlayError,
    >,
    pub ShowKeyboardForOverlay: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eInputMode: EGamepadTextInputMode,
            eLineInputMode: EGamepadTextInputLineMode,
            unFlags: u32,
            pchDescription: *mut ::std::os::raw::c_char,
            unCharMax: u32,
            pchExistingText: *mut ::std::os::raw::c_char,
            uUserValue: u64,
        ) -> EVROverlayError,
    >,
    pub GetKeyboardText: ::std::option::Option<
        unsafe extern "C" fn(pchText: *mut ::std::os::raw::c_char, cchText: u32) -> u32,
    >,
    pub HideKeyboard: ::std::option::Option<unsafe extern "C" fn()>,
    pub SetKeyboardTransformAbsolute: ::std::option::Option<
        unsafe extern "C" fn(
            eTrackingOrigin: ETrackingUniverseOrigin,
            pmatTrackingOriginToKeyboardTransform: *mut HmdMatrix34_t,
        ),
    >,
    pub SetKeyboardPositionForOverlay: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t, avoidRect: HmdRect2_t),
    >,
    pub ShowMessageOverlay: ::std::option::Option<
        unsafe extern "C" fn(
            pchText: *mut ::std::os::raw::c_char,
            pchCaption: *mut ::std::os::raw::c_char,
            pchButton0Text: *mut ::std::os::raw::c_char,
            pchButton1Text: *mut ::std::os::raw::c_char,
            pchButton2Text: *mut ::std::os::raw::c_char,
            pchButton3Text: *mut ::std::os::raw::c_char,
        ) -> VRMessageOverlayResponse,
    >,
    pub CloseMessageOverlay: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_VR_IVROverlay_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVROverlay_FnTable>(),
        632usize,
        concat!("Size of: ", stringify!(VR_IVROverlay_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVROverlay_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVROverlay_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).FindOverlay as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(FindOverlay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).CreateOverlay as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(CreateOverlay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).DestroyOverlay as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(DestroyOverlay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayKey as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayName as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayName as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayImageData as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayImageData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayErrorNameFromEnum
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayErrorNameFromEnum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayRenderingPid as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayRenderingPid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayRenderingPid as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayRenderingPid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayFlag as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayFlag as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayFlag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayFlags as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayColor as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayColor as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayAlpha as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayAlpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayAlpha as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayAlpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayTexelAspect as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayTexelAspect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayTexelAspect as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayTexelAspect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlaySortOrder as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlaySortOrder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlaySortOrder as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlaySortOrder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayWidthInMeters as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayWidthInMeters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayWidthInMeters as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayWidthInMeters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayCurvature as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayCurvature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayCurvature as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayCurvature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayTextureColorSpace
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayTextureColorSpace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayTextureColorSpace
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayTextureColorSpace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayTextureBounds as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayTextureBounds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayTextureBounds as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayTextureBounds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayTransformType as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayTransformType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayTransformAbsolute
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayTransformAbsolute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayTransformAbsolute
                as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayTransformAbsolute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>()))
                .SetOverlayTransformTrackedDeviceRelative as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayTransformTrackedDeviceRelative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>()))
                .GetOverlayTransformTrackedDeviceRelative as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayTransformTrackedDeviceRelative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>()))
                .SetOverlayTransformTrackedDeviceComponent as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayTransformTrackedDeviceComponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>()))
                .GetOverlayTransformTrackedDeviceComponent as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayTransformTrackedDeviceComponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayTransformOverlayRelative
                as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayTransformOverlayRelative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayTransformOverlayRelative
                as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayTransformOverlayRelative)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayTransformCursor as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayTransformCursor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayTransformCursor as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayTransformCursor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayTransformProjection
                as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayTransformProjection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).ShowOverlay as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(ShowOverlay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).HideOverlay as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(HideOverlay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).IsOverlayVisible as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(IsOverlayVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetTransformForOverlayCoordinates
                as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetTransformForOverlayCoordinates)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).PollNextOverlayEvent as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(PollNextOverlayEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayInputMethod as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayInputMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayInputMethod as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayInputMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayMouseScale as *const _
                as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayMouseScale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayMouseScale as *const _
                as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayMouseScale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).ComputeOverlayIntersection as *const _
                as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(ComputeOverlayIntersection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).IsHoverTargetOverlay as *const _
                as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(IsHoverTargetOverlay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayIntersectionMask as *const _
                as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayIntersectionMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).TriggerLaserMouseHapticVibration
                as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(TriggerLaserMouseHapticVibration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayCursor as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayCursor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayCursorPositionOverride
                as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayCursorPositionOverride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).ClearOverlayCursorPositionOverride
                as *const _ as usize
        },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(ClearOverlayCursorPositionOverride)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayTexture as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayTexture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).ClearOverlayTexture as *const _
                as usize
        },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(ClearOverlayTexture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayRaw as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayRaw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetOverlayFromFile as *const _
                as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetOverlayFromFile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayTexture as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayTexture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).ReleaseNativeOverlayHandle as *const _
                as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(ReleaseNativeOverlayHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetOverlayTextureSize as *const _
                as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetOverlayTextureSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).CreateDashboardOverlay as *const _
                as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(CreateDashboardOverlay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).IsDashboardVisible as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(IsDashboardVisible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).IsActiveDashboardOverlay as *const _
                as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(IsActiveDashboardOverlay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetDashboardOverlaySceneProcess
                as *const _ as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetDashboardOverlaySceneProcess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetDashboardOverlaySceneProcess
                as *const _ as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetDashboardOverlaySceneProcess)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).ShowDashboard as *const _ as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(ShowDashboard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetPrimaryDashboardDevice as *const _
                as usize
        },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetPrimaryDashboardDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).ShowKeyboard as *const _ as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(ShowKeyboard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).ShowKeyboardForOverlay as *const _
                as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(ShowKeyboardForOverlay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).GetKeyboardText as *const _ as usize
        },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(GetKeyboardText)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).HideKeyboard as *const _ as usize
        },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(HideKeyboard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetKeyboardTransformAbsolute
                as *const _ as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetKeyboardTransformAbsolute)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).SetKeyboardPositionForOverlay
                as *const _ as usize
        },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(SetKeyboardPositionForOverlay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).ShowMessageOverlay as *const _
                as usize
        },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(ShowMessageOverlay)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlay_FnTable>())).CloseMessageOverlay as *const _
                as usize
        },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlay_FnTable),
            "::",
            stringify!(CloseMessageOverlay)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVROverlayView_FnTable {
    pub AcquireOverlayView: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pNativeDevice: *mut VRNativeDevice_t,
            pOverlayView: *mut VROverlayView_t,
            unOverlayViewSize: u32,
        ) -> EVROverlayError,
    >,
    pub ReleaseOverlayView: ::std::option::Option<
        unsafe extern "C" fn(pOverlayView: *mut VROverlayView_t) -> EVROverlayError,
    >,
    pub PostOverlayEvent: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t, pvrEvent: *mut VREvent_t),
    >,
    pub IsViewingPermitted:
        ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> bool>,
}
#[test]
fn bindgen_test_layout_VR_IVROverlayView_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVROverlayView_FnTable>(),
        32usize,
        concat!("Size of: ", stringify!(VR_IVROverlayView_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVROverlayView_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVROverlayView_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlayView_FnTable>())).AcquireOverlayView as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlayView_FnTable),
            "::",
            stringify!(AcquireOverlayView)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlayView_FnTable>())).ReleaseOverlayView as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlayView_FnTable),
            "::",
            stringify!(ReleaseOverlayView)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlayView_FnTable>())).PostOverlayEvent as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlayView_FnTable),
            "::",
            stringify!(PostOverlayEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVROverlayView_FnTable>())).IsViewingPermitted as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVROverlayView_FnTable),
            "::",
            stringify!(IsViewingPermitted)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRHeadsetView_FnTable {
    pub SetHeadsetViewSize: ::std::option::Option<unsafe extern "C" fn(nWidth: u32, nHeight: u32)>,
    pub GetHeadsetViewSize:
        ::std::option::Option<unsafe extern "C" fn(pnWidth: *mut u32, pnHeight: *mut u32)>,
    pub SetHeadsetViewMode:
        ::std::option::Option<unsafe extern "C" fn(eHeadsetViewMode: HeadsetViewMode_t)>,
    pub GetHeadsetViewMode: ::std::option::Option<unsafe extern "C" fn() -> HeadsetViewMode_t>,
    pub SetHeadsetViewCropped: ::std::option::Option<unsafe extern "C" fn(bCropped: bool)>,
    pub GetHeadsetViewCropped: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub GetHeadsetViewAspectRatio: ::std::option::Option<unsafe extern "C" fn() -> f32>,
    pub SetHeadsetViewBlendRange:
        ::std::option::Option<unsafe extern "C" fn(flStartPct: f32, flEndPct: f32)>,
    pub GetHeadsetViewBlendRange:
        ::std::option::Option<unsafe extern "C" fn(pStartPct: *mut f32, pEndPct: *mut f32)>,
}
#[test]
fn bindgen_test_layout_VR_IVRHeadsetView_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRHeadsetView_FnTable>(),
        72usize,
        concat!("Size of: ", stringify!(VR_IVRHeadsetView_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRHeadsetView_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRHeadsetView_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRHeadsetView_FnTable>())).SetHeadsetViewSize as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRHeadsetView_FnTable),
            "::",
            stringify!(SetHeadsetViewSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRHeadsetView_FnTable>())).GetHeadsetViewSize as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRHeadsetView_FnTable),
            "::",
            stringify!(GetHeadsetViewSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRHeadsetView_FnTable>())).SetHeadsetViewMode as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRHeadsetView_FnTable),
            "::",
            stringify!(SetHeadsetViewMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRHeadsetView_FnTable>())).GetHeadsetViewMode as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRHeadsetView_FnTable),
            "::",
            stringify!(GetHeadsetViewMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRHeadsetView_FnTable>())).SetHeadsetViewCropped as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRHeadsetView_FnTable),
            "::",
            stringify!(SetHeadsetViewCropped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRHeadsetView_FnTable>())).GetHeadsetViewCropped as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRHeadsetView_FnTable),
            "::",
            stringify!(GetHeadsetViewCropped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRHeadsetView_FnTable>())).GetHeadsetViewAspectRatio
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRHeadsetView_FnTable),
            "::",
            stringify!(GetHeadsetViewAspectRatio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRHeadsetView_FnTable>())).SetHeadsetViewBlendRange
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRHeadsetView_FnTable),
            "::",
            stringify!(SetHeadsetViewBlendRange)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRHeadsetView_FnTable>())).GetHeadsetViewBlendRange
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRHeadsetView_FnTable),
            "::",
            stringify!(GetHeadsetViewBlendRange)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRRenderModels_FnTable {
    pub LoadRenderModel_Async: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            ppRenderModel: *mut *mut RenderModel_t,
        ) -> EVRRenderModelError,
    >,
    pub FreeRenderModel:
        ::std::option::Option<unsafe extern "C" fn(pRenderModel: *mut RenderModel_t)>,
    pub LoadTexture_Async: ::std::option::Option<
        unsafe extern "C" fn(
            textureId: TextureID_t,
            ppTexture: *mut *mut RenderModel_TextureMap_t,
        ) -> EVRRenderModelError,
    >,
    pub FreeTexture:
        ::std::option::Option<unsafe extern "C" fn(pTexture: *mut RenderModel_TextureMap_t)>,
    pub LoadTextureD3D11_Async: ::std::option::Option<
        unsafe extern "C" fn(
            textureId: TextureID_t,
            pD3D11Device: *mut ::std::os::raw::c_void,
            ppD3D11Texture2D: *mut *mut ::std::os::raw::c_void,
        ) -> EVRRenderModelError,
    >,
    pub LoadIntoTextureD3D11_Async: ::std::option::Option<
        unsafe extern "C" fn(
            textureId: TextureID_t,
            pDstTexture: *mut ::std::os::raw::c_void,
        ) -> EVRRenderModelError,
    >,
    pub FreeTextureD3D11:
        ::std::option::Option<unsafe extern "C" fn(pD3D11Texture2D: *mut ::std::os::raw::c_void)>,
    pub GetRenderModelName: ::std::option::Option<
        unsafe extern "C" fn(
            unRenderModelIndex: u32,
            pchRenderModelName: *mut ::std::os::raw::c_char,
            unRenderModelNameLen: u32,
        ) -> u32,
    >,
    pub GetRenderModelCount: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub GetComponentCount: ::std::option::Option<
        unsafe extern "C" fn(pchRenderModelName: *mut ::std::os::raw::c_char) -> u32,
    >,
    pub GetComponentName: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            unComponentIndex: u32,
            pchComponentName: *mut ::std::os::raw::c_char,
            unComponentNameLen: u32,
        ) -> u32,
    >,
    pub GetComponentButtonMask: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
        ) -> u64,
    >,
    pub GetComponentRenderModelName: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
            pchComponentRenderModelName: *mut ::std::os::raw::c_char,
            unComponentRenderModelNameLen: u32,
        ) -> u32,
    >,
    pub GetComponentStateForDevicePath: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
            devicePath: VRInputValueHandle_t,
            pState: *mut RenderModel_ControllerMode_State_t,
            pComponentState: *mut RenderModel_ComponentState_t,
        ) -> bool,
    >,
    pub GetComponentState: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
            pControllerState: *mut VRControllerState_t,
            pState: *mut RenderModel_ControllerMode_State_t,
            pComponentState: *mut RenderModel_ComponentState_t,
        ) -> bool,
    >,
    pub RenderModelHasComponent: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub GetRenderModelThumbnailURL: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchThumbnailURL: *mut ::std::os::raw::c_char,
            unThumbnailURLLen: u32,
            peError: *mut EVRRenderModelError,
        ) -> u32,
    >,
    pub GetRenderModelOriginalPath: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchOriginalPath: *mut ::std::os::raw::c_char,
            unOriginalPathLen: u32,
            peError: *mut EVRRenderModelError,
        ) -> u32,
    >,
    pub GetRenderModelErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(error: EVRRenderModelError) -> *mut ::std::os::raw::c_char,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRRenderModels_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRRenderModels_FnTable>(),
        152usize,
        concat!("Size of: ", stringify!(VR_IVRRenderModels_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRRenderModels_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRRenderModels_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).LoadRenderModel_Async as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(LoadRenderModel_Async)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).FreeRenderModel as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(FreeRenderModel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).LoadTexture_Async as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(LoadTexture_Async)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).FreeTexture as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(FreeTexture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).LoadTextureD3D11_Async
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(LoadTextureD3D11_Async)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).LoadIntoTextureD3D11_Async
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(LoadIntoTextureD3D11_Async)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).FreeTextureD3D11 as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(FreeTextureD3D11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).GetRenderModelName as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(GetRenderModelName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).GetRenderModelCount as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(GetRenderModelCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).GetComponentCount as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(GetComponentCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).GetComponentName as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(GetComponentName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).GetComponentButtonMask
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(GetComponentButtonMask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).GetComponentRenderModelName
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(GetComponentRenderModelName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).GetComponentStateForDevicePath
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(GetComponentStateForDevicePath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).GetComponentState as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(GetComponentState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).RenderModelHasComponent
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(RenderModelHasComponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).GetRenderModelThumbnailURL
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(GetRenderModelThumbnailURL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).GetRenderModelOriginalPath
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(GetRenderModelOriginalPath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRRenderModels_FnTable>())).GetRenderModelErrorNameFromEnum
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRRenderModels_FnTable),
            "::",
            stringify!(GetRenderModelErrorNameFromEnum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRNotifications_FnTable {
    pub CreateNotification: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            ulUserValue: u64,
            type_: EVRNotificationType,
            pchText: *mut ::std::os::raw::c_char,
            style: EVRNotificationStyle,
            pImage: *mut NotificationBitmap_t,
            pNotificationId: *mut VRNotificationId,
        ) -> EVRNotificationError,
    >,
    pub RemoveNotification: ::std::option::Option<
        unsafe extern "C" fn(notificationId: VRNotificationId) -> EVRNotificationError,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRNotifications_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRNotifications_FnTable>(),
        16usize,
        concat!("Size of: ", stringify!(VR_IVRNotifications_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRNotifications_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRNotifications_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRNotifications_FnTable>())).CreateNotification as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRNotifications_FnTable),
            "::",
            stringify!(CreateNotification)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRNotifications_FnTable>())).RemoveNotification as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRNotifications_FnTable),
            "::",
            stringify!(RemoveNotification)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRSettings_FnTable {
    pub GetSettingsErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(eError: EVRSettingsError) -> *mut ::std::os::raw::c_char,
    >,
    pub SetBool: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            bValue: bool,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub SetInt32: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            nValue: i32,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub SetFloat: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            flValue: f32,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub SetString: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            pchValue: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub GetBool: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ) -> bool,
    >,
    pub GetInt32: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ) -> i32,
    >,
    pub GetFloat: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ) -> f32,
    >,
    pub GetString: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            pchValue: *mut ::std::os::raw::c_char,
            unValueLen: u32,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub RemoveSection: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub RemoveKeyInSection: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ),
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRSettings_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRSettings_FnTable>(),
        88usize,
        concat!("Size of: ", stringify!(VR_IVRSettings_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRSettings_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRSettings_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSettings_FnTable>())).GetSettingsErrorNameFromEnum
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSettings_FnTable),
            "::",
            stringify!(GetSettingsErrorNameFromEnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VR_IVRSettings_FnTable>())).SetBool as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSettings_FnTable),
            "::",
            stringify!(SetBool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VR_IVRSettings_FnTable>())).SetInt32 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSettings_FnTable),
            "::",
            stringify!(SetInt32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VR_IVRSettings_FnTable>())).SetFloat as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSettings_FnTable),
            "::",
            stringify!(SetFloat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSettings_FnTable>())).SetString as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSettings_FnTable),
            "::",
            stringify!(SetString)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VR_IVRSettings_FnTable>())).GetBool as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSettings_FnTable),
            "::",
            stringify!(GetBool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VR_IVRSettings_FnTable>())).GetInt32 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSettings_FnTable),
            "::",
            stringify!(GetInt32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VR_IVRSettings_FnTable>())).GetFloat as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSettings_FnTable),
            "::",
            stringify!(GetFloat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSettings_FnTable>())).GetString as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSettings_FnTable),
            "::",
            stringify!(GetString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSettings_FnTable>())).RemoveSection as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSettings_FnTable),
            "::",
            stringify!(RemoveSection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSettings_FnTable>())).RemoveKeyInSection as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSettings_FnTable),
            "::",
            stringify!(RemoveKeyInSection)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRScreenshots_FnTable {
    pub RequestScreenshot: ::std::option::Option<
        unsafe extern "C" fn(
            pOutScreenshotHandle: *mut ScreenshotHandle_t,
            type_: EVRScreenshotType,
            pchPreviewFilename: *mut ::std::os::raw::c_char,
            pchVRFilename: *mut ::std::os::raw::c_char,
        ) -> EVRScreenshotError,
    >,
    pub HookScreenshot: ::std::option::Option<
        unsafe extern "C" fn(
            pSupportedTypes: *mut EVRScreenshotType,
            numTypes: ::std::os::raw::c_int,
        ) -> EVRScreenshotError,
    >,
    pub GetScreenshotPropertyType: ::std::option::Option<
        unsafe extern "C" fn(
            screenshotHandle: ScreenshotHandle_t,
            pError: *mut EVRScreenshotError,
        ) -> EVRScreenshotType,
    >,
    pub GetScreenshotPropertyFilename: ::std::option::Option<
        unsafe extern "C" fn(
            screenshotHandle: ScreenshotHandle_t,
            filenameType: EVRScreenshotPropertyFilenames,
            pchFilename: *mut ::std::os::raw::c_char,
            cchFilename: u32,
            pError: *mut EVRScreenshotError,
        ) -> u32,
    >,
    pub UpdateScreenshotProgress: ::std::option::Option<
        unsafe extern "C" fn(
            screenshotHandle: ScreenshotHandle_t,
            flProgress: f32,
        ) -> EVRScreenshotError,
    >,
    pub TakeStereoScreenshot: ::std::option::Option<
        unsafe extern "C" fn(
            pOutScreenshotHandle: *mut ScreenshotHandle_t,
            pchPreviewFilename: *mut ::std::os::raw::c_char,
            pchVRFilename: *mut ::std::os::raw::c_char,
        ) -> EVRScreenshotError,
    >,
    pub SubmitScreenshot: ::std::option::Option<
        unsafe extern "C" fn(
            screenshotHandle: ScreenshotHandle_t,
            type_: EVRScreenshotType,
            pchSourcePreviewFilename: *mut ::std::os::raw::c_char,
            pchSourceVRFilename: *mut ::std::os::raw::c_char,
        ) -> EVRScreenshotError,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRScreenshots_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRScreenshots_FnTable>(),
        56usize,
        concat!("Size of: ", stringify!(VR_IVRScreenshots_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRScreenshots_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRScreenshots_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRScreenshots_FnTable>())).RequestScreenshot as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRScreenshots_FnTable),
            "::",
            stringify!(RequestScreenshot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRScreenshots_FnTable>())).HookScreenshot as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRScreenshots_FnTable),
            "::",
            stringify!(HookScreenshot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRScreenshots_FnTable>())).GetScreenshotPropertyType
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRScreenshots_FnTable),
            "::",
            stringify!(GetScreenshotPropertyType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRScreenshots_FnTable>())).GetScreenshotPropertyFilename
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRScreenshots_FnTable),
            "::",
            stringify!(GetScreenshotPropertyFilename)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRScreenshots_FnTable>())).UpdateScreenshotProgress
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRScreenshots_FnTable),
            "::",
            stringify!(UpdateScreenshotProgress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRScreenshots_FnTable>())).TakeStereoScreenshot as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRScreenshots_FnTable),
            "::",
            stringify!(TakeStereoScreenshot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRScreenshots_FnTable>())).SubmitScreenshot as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRScreenshots_FnTable),
            "::",
            stringify!(SubmitScreenshot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRResources_FnTable {
    pub LoadSharedResource: ::std::option::Option<
        unsafe extern "C" fn(
            pchResourceName: *mut ::std::os::raw::c_char,
            pchBuffer: *mut ::std::os::raw::c_char,
            unBufferLen: u32,
        ) -> u32,
    >,
    pub GetResourceFullPath: ::std::option::Option<
        unsafe extern "C" fn(
            pchResourceName: *mut ::std::os::raw::c_char,
            pchResourceTypeDirectory: *mut ::std::os::raw::c_char,
            pchPathBuffer: *mut ::std::os::raw::c_char,
            unBufferLen: u32,
        ) -> u32,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRResources_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRResources_FnTable>(),
        16usize,
        concat!("Size of: ", stringify!(VR_IVRResources_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRResources_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRResources_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRResources_FnTable>())).LoadSharedResource as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRResources_FnTable),
            "::",
            stringify!(LoadSharedResource)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRResources_FnTable>())).GetResourceFullPath as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRResources_FnTable),
            "::",
            stringify!(GetResourceFullPath)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRDriverManager_FnTable {
    pub GetDriverCount: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub GetDriverName: ::std::option::Option<
        unsafe extern "C" fn(
            nDriver: DriverId_t,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
        ) -> u32,
    >,
    pub GetDriverHandle: ::std::option::Option<
        unsafe extern "C" fn(pchDriverName: *mut ::std::os::raw::c_char) -> DriverHandle_t,
    >,
    pub IsEnabled: ::std::option::Option<unsafe extern "C" fn(nDriver: DriverId_t) -> bool>,
}
#[test]
fn bindgen_test_layout_VR_IVRDriverManager_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRDriverManager_FnTable>(),
        32usize,
        concat!("Size of: ", stringify!(VR_IVRDriverManager_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRDriverManager_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRDriverManager_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRDriverManager_FnTable>())).GetDriverCount as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRDriverManager_FnTable),
            "::",
            stringify!(GetDriverCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRDriverManager_FnTable>())).GetDriverName as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRDriverManager_FnTable),
            "::",
            stringify!(GetDriverName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRDriverManager_FnTable>())).GetDriverHandle as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRDriverManager_FnTable),
            "::",
            stringify!(GetDriverHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRDriverManager_FnTable>())).IsEnabled as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRDriverManager_FnTable),
            "::",
            stringify!(IsEnabled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRInput_FnTable {
    pub SetActionManifestPath: ::std::option::Option<
        unsafe extern "C" fn(pchActionManifestPath: *mut ::std::os::raw::c_char) -> EVRInputError,
    >,
    pub GetActionSetHandle: ::std::option::Option<
        unsafe extern "C" fn(
            pchActionSetName: *mut ::std::os::raw::c_char,
            pHandle: *mut VRActionSetHandle_t,
        ) -> EVRInputError,
    >,
    pub GetActionHandle: ::std::option::Option<
        unsafe extern "C" fn(
            pchActionName: *mut ::std::os::raw::c_char,
            pHandle: *mut VRActionHandle_t,
        ) -> EVRInputError,
    >,
    pub GetInputSourceHandle: ::std::option::Option<
        unsafe extern "C" fn(
            pchInputSourcePath: *mut ::std::os::raw::c_char,
            pHandle: *mut VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub UpdateActionState: ::std::option::Option<
        unsafe extern "C" fn(
            pSets: *mut VRActiveActionSet_t,
            unSizeOfVRSelectedActionSet_t: u32,
            unSetCount: u32,
        ) -> EVRInputError,
    >,
    pub GetDigitalActionData: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pActionData: *mut InputDigitalActionData_t,
            unActionDataSize: u32,
            ulRestrictToDevice: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetAnalogActionData: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pActionData: *mut InputAnalogActionData_t,
            unActionDataSize: u32,
            ulRestrictToDevice: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetPoseActionDataRelativeToNow: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eOrigin: ETrackingUniverseOrigin,
            fPredictedSecondsFromNow: f32,
            pActionData: *mut InputPoseActionData_t,
            unActionDataSize: u32,
            ulRestrictToDevice: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetPoseActionDataForNextFrame: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eOrigin: ETrackingUniverseOrigin,
            pActionData: *mut InputPoseActionData_t,
            unActionDataSize: u32,
            ulRestrictToDevice: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetSkeletalActionData: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pActionData: *mut InputSkeletalActionData_t,
            unActionDataSize: u32,
        ) -> EVRInputError,
    >,
    pub GetDominantHand: ::std::option::Option<
        unsafe extern "C" fn(peDominantHand: *mut ETrackedControllerRole) -> EVRInputError,
    >,
    pub SetDominantHand: ::std::option::Option<
        unsafe extern "C" fn(eDominantHand: ETrackedControllerRole) -> EVRInputError,
    >,
    pub GetBoneCount: ::std::option::Option<
        unsafe extern "C" fn(action: VRActionHandle_t, pBoneCount: *mut u32) -> EVRInputError,
    >,
    pub GetBoneHierarchy: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pParentIndices: *mut BoneIndex_t,
            unIndexArayCount: u32,
        ) -> EVRInputError,
    >,
    pub GetBoneName: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            nBoneIndex: BoneIndex_t,
            pchBoneName: *mut ::std::os::raw::c_char,
            unNameBufferSize: u32,
        ) -> EVRInputError,
    >,
    pub GetSkeletalReferenceTransforms: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eTransformSpace: EVRSkeletalTransformSpace,
            eReferencePose: EVRSkeletalReferencePose,
            pTransformArray: *mut VRBoneTransform_t,
            unTransformArrayCount: u32,
        ) -> EVRInputError,
    >,
    pub GetSkeletalTrackingLevel: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pSkeletalTrackingLevel: *mut EVRSkeletalTrackingLevel,
        ) -> EVRInputError,
    >,
    pub GetSkeletalBoneData: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eTransformSpace: EVRSkeletalTransformSpace,
            eMotionRange: EVRSkeletalMotionRange,
            pTransformArray: *mut VRBoneTransform_t,
            unTransformArrayCount: u32,
        ) -> EVRInputError,
    >,
    pub GetSkeletalSummaryData: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eSummaryType: EVRSummaryType,
            pSkeletalSummaryData: *mut VRSkeletalSummaryData_t,
        ) -> EVRInputError,
    >,
    pub GetSkeletalBoneDataCompressed: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eMotionRange: EVRSkeletalMotionRange,
            pvCompressedData: *mut ::std::os::raw::c_void,
            unCompressedSize: u32,
            punRequiredCompressedSize: *mut u32,
        ) -> EVRInputError,
    >,
    pub DecompressSkeletalBoneData: ::std::option::Option<
        unsafe extern "C" fn(
            pvCompressedBuffer: *mut ::std::os::raw::c_void,
            unCompressedBufferSize: u32,
            eTransformSpace: EVRSkeletalTransformSpace,
            pTransformArray: *mut VRBoneTransform_t,
            unTransformArrayCount: u32,
        ) -> EVRInputError,
    >,
    pub TriggerHapticVibrationAction: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            fStartSecondsFromNow: f32,
            fDurationSeconds: f32,
            fFrequency: f32,
            fAmplitude: f32,
            ulRestrictToDevice: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetActionOrigins: ::std::option::Option<
        unsafe extern "C" fn(
            actionSetHandle: VRActionSetHandle_t,
            digitalActionHandle: VRActionHandle_t,
            originsOut: *mut VRInputValueHandle_t,
            originOutCount: u32,
        ) -> EVRInputError,
    >,
    pub GetOriginLocalizedName: ::std::option::Option<
        unsafe extern "C" fn(
            origin: VRInputValueHandle_t,
            pchNameArray: *mut ::std::os::raw::c_char,
            unNameArraySize: u32,
            unStringSectionsToInclude: i32,
        ) -> EVRInputError,
    >,
    pub GetOriginTrackedDeviceInfo: ::std::option::Option<
        unsafe extern "C" fn(
            origin: VRInputValueHandle_t,
            pOriginInfo: *mut InputOriginInfo_t,
            unOriginInfoSize: u32,
        ) -> EVRInputError,
    >,
    pub GetActionBindingInfo: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pOriginInfo: *mut InputBindingInfo_t,
            unBindingInfoSize: u32,
            unBindingInfoCount: u32,
            punReturnedBindingInfoCount: *mut u32,
        ) -> EVRInputError,
    >,
    pub ShowActionOrigins: ::std::option::Option<
        unsafe extern "C" fn(
            actionSetHandle: VRActionSetHandle_t,
            ulActionHandle: VRActionHandle_t,
        ) -> EVRInputError,
    >,
    pub ShowBindingsForActionSet: ::std::option::Option<
        unsafe extern "C" fn(
            pSets: *mut VRActiveActionSet_t,
            unSizeOfVRSelectedActionSet_t: u32,
            unSetCount: u32,
            originToHighlight: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetComponentStateForBinding: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
            pOriginInfo: *mut InputBindingInfo_t,
            unBindingInfoSize: u32,
            unBindingInfoCount: u32,
            pComponentState: *mut RenderModel_ComponentState_t,
        ) -> EVRInputError,
    >,
    pub IsUsingLegacyInput: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub OpenBindingUI: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            ulActionSetHandle: VRActionSetHandle_t,
            ulDeviceHandle: VRInputValueHandle_t,
            bShowOnDesktop: bool,
        ) -> EVRInputError,
    >,
    pub GetBindingVariant: ::std::option::Option<
        unsafe extern "C" fn(
            ulDevicePath: VRInputValueHandle_t,
            pchVariantArray: *mut ::std::os::raw::c_char,
            unVariantArraySize: u32,
        ) -> EVRInputError,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRInput_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRInput_FnTable>(),
        256usize,
        concat!("Size of: ", stringify!(VR_IVRInput_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRInput_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRInput_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).SetActionManifestPath as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(SetActionManifestPath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetActionSetHandle as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetActionSetHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetActionHandle as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetActionHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetInputSourceHandle as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetInputSourceHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).UpdateActionState as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(UpdateActionState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetDigitalActionData as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetDigitalActionData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetAnalogActionData as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetAnalogActionData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetPoseActionDataRelativeToNow
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetPoseActionDataRelativeToNow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetPoseActionDataForNextFrame
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetPoseActionDataForNextFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetSkeletalActionData as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetSkeletalActionData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetDominantHand as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetDominantHand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).SetDominantHand as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(SetDominantHand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetBoneCount as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetBoneCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetBoneHierarchy as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetBoneHierarchy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetBoneName as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetBoneName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetSkeletalReferenceTransforms
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetSkeletalReferenceTransforms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetSkeletalTrackingLevel as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetSkeletalTrackingLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetSkeletalBoneData as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetSkeletalBoneData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetSkeletalSummaryData as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetSkeletalSummaryData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetSkeletalBoneDataCompressed
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetSkeletalBoneDataCompressed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).DecompressSkeletalBoneData as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(DecompressSkeletalBoneData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).TriggerHapticVibrationAction as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(TriggerHapticVibrationAction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetActionOrigins as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetActionOrigins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetOriginLocalizedName as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetOriginLocalizedName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetOriginTrackedDeviceInfo as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetOriginTrackedDeviceInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetActionBindingInfo as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetActionBindingInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).ShowActionOrigins as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(ShowActionOrigins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).ShowBindingsForActionSet as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(ShowBindingsForActionSet)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetComponentStateForBinding as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetComponentStateForBinding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).IsUsingLegacyInput as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(IsUsingLegacyInput)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).OpenBindingUI as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(OpenBindingUI)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRInput_FnTable>())).GetBindingVariant as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRInput_FnTable),
            "::",
            stringify!(GetBindingVariant)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRIOBuffer_FnTable {
    pub Open: ::std::option::Option<
        unsafe extern "C" fn(
            pchPath: *mut ::std::os::raw::c_char,
            mode: EIOBufferMode,
            unElementSize: u32,
            unElements: u32,
            pulBuffer: *mut IOBufferHandle_t,
        ) -> EIOBufferError,
    >,
    pub Close:
        ::std::option::Option<unsafe extern "C" fn(ulBuffer: IOBufferHandle_t) -> EIOBufferError>,
    pub Read: ::std::option::Option<
        unsafe extern "C" fn(
            ulBuffer: IOBufferHandle_t,
            pDst: *mut ::std::os::raw::c_void,
            unBytes: u32,
            punRead: *mut u32,
        ) -> EIOBufferError,
    >,
    pub Write: ::std::option::Option<
        unsafe extern "C" fn(
            ulBuffer: IOBufferHandle_t,
            pSrc: *mut ::std::os::raw::c_void,
            unBytes: u32,
        ) -> EIOBufferError,
    >,
    pub PropertyContainer: ::std::option::Option<
        unsafe extern "C" fn(ulBuffer: IOBufferHandle_t) -> PropertyContainerHandle_t,
    >,
    pub HasReaders: ::std::option::Option<unsafe extern "C" fn(ulBuffer: IOBufferHandle_t) -> bool>,
}
#[test]
fn bindgen_test_layout_VR_IVRIOBuffer_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRIOBuffer_FnTable>(),
        48usize,
        concat!("Size of: ", stringify!(VR_IVRIOBuffer_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRIOBuffer_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRIOBuffer_FnTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VR_IVRIOBuffer_FnTable>())).Open as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRIOBuffer_FnTable),
            "::",
            stringify!(Open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VR_IVRIOBuffer_FnTable>())).Close as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRIOBuffer_FnTable),
            "::",
            stringify!(Close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VR_IVRIOBuffer_FnTable>())).Read as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRIOBuffer_FnTable),
            "::",
            stringify!(Read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VR_IVRIOBuffer_FnTable>())).Write as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRIOBuffer_FnTable),
            "::",
            stringify!(Write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRIOBuffer_FnTable>())).PropertyContainer as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRIOBuffer_FnTable),
            "::",
            stringify!(PropertyContainer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRIOBuffer_FnTable>())).HasReaders as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRIOBuffer_FnTable),
            "::",
            stringify!(HasReaders)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRSpatialAnchors_FnTable {
    pub CreateSpatialAnchorFromDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            pchDescriptor: *mut ::std::os::raw::c_char,
            pHandleOut: *mut SpatialAnchorHandle_t,
        ) -> EVRSpatialAnchorError,
    >,
    pub CreateSpatialAnchorFromPose: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            eOrigin: ETrackingUniverseOrigin,
            pPose: *mut SpatialAnchorPose_t,
            pHandleOut: *mut SpatialAnchorHandle_t,
        ) -> EVRSpatialAnchorError,
    >,
    pub GetSpatialAnchorPose: ::std::option::Option<
        unsafe extern "C" fn(
            unHandle: SpatialAnchorHandle_t,
            eOrigin: ETrackingUniverseOrigin,
            pPoseOut: *mut SpatialAnchorPose_t,
        ) -> EVRSpatialAnchorError,
    >,
    pub GetSpatialAnchorDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            unHandle: SpatialAnchorHandle_t,
            pchDescriptorOut: *mut ::std::os::raw::c_char,
            punDescriptorBufferLenInOut: *mut u32,
        ) -> EVRSpatialAnchorError,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRSpatialAnchors_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRSpatialAnchors_FnTable>(),
        32usize,
        concat!("Size of: ", stringify!(VR_IVRSpatialAnchors_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRSpatialAnchors_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRSpatialAnchors_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSpatialAnchors_FnTable>()))
                .CreateSpatialAnchorFromDescriptor as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSpatialAnchors_FnTable),
            "::",
            stringify!(CreateSpatialAnchorFromDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSpatialAnchors_FnTable>())).CreateSpatialAnchorFromPose
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSpatialAnchors_FnTable),
            "::",
            stringify!(CreateSpatialAnchorFromPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSpatialAnchors_FnTable>())).GetSpatialAnchorPose
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSpatialAnchors_FnTable),
            "::",
            stringify!(GetSpatialAnchorPose)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRSpatialAnchors_FnTable>())).GetSpatialAnchorDescriptor
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRSpatialAnchors_FnTable),
            "::",
            stringify!(GetSpatialAnchorDescriptor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRDebug_FnTable {
    pub EmitVrProfilerEvent: ::std::option::Option<
        unsafe extern "C" fn(pchMessage: *mut ::std::os::raw::c_char) -> EVRDebugError,
    >,
    pub BeginVrProfilerEvent: ::std::option::Option<
        unsafe extern "C" fn(pHandleOut: *mut VrProfilerEventHandle_t) -> EVRDebugError,
    >,
    pub FinishVrProfilerEvent: ::std::option::Option<
        unsafe extern "C" fn(
            hHandle: VrProfilerEventHandle_t,
            pchMessage: *mut ::std::os::raw::c_char,
        ) -> EVRDebugError,
    >,
    pub DriverDebugRequest: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            pchRequest: *mut ::std::os::raw::c_char,
            pchResponseBuffer: *mut ::std::os::raw::c_char,
            unResponseBufferSize: u32,
        ) -> u32,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRDebug_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRDebug_FnTable>(),
        32usize,
        concat!("Size of: ", stringify!(VR_IVRDebug_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRDebug_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRDebug_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRDebug_FnTable>())).EmitVrProfilerEvent as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRDebug_FnTable),
            "::",
            stringify!(EmitVrProfilerEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRDebug_FnTable>())).BeginVrProfilerEvent as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRDebug_FnTable),
            "::",
            stringify!(BeginVrProfilerEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRDebug_FnTable>())).FinishVrProfilerEvent as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRDebug_FnTable),
            "::",
            stringify!(FinishVrProfilerEvent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRDebug_FnTable>())).DriverDebugRequest as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRDebug_FnTable),
            "::",
            stringify!(DriverDebugRequest)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRProperties_FnTable {
    pub ReadPropertyBatch: ::std::option::Option<
        unsafe extern "C" fn(
            ulContainerHandle: PropertyContainerHandle_t,
            pBatch: *mut PropertyRead_t,
            unBatchEntryCount: u32,
        ) -> ETrackedPropertyError,
    >,
    pub WritePropertyBatch: ::std::option::Option<
        unsafe extern "C" fn(
            ulContainerHandle: PropertyContainerHandle_t,
            pBatch: *mut PropertyWrite_t,
            unBatchEntryCount: u32,
        ) -> ETrackedPropertyError,
    >,
    pub GetPropErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(error: ETrackedPropertyError) -> *mut ::std::os::raw::c_char,
    >,
    pub TrackedDeviceToPropertyContainer: ::std::option::Option<
        unsafe extern "C" fn(nDevice: TrackedDeviceIndex_t) -> PropertyContainerHandle_t,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRProperties_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRProperties_FnTable>(),
        32usize,
        concat!("Size of: ", stringify!(VR_IVRProperties_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRProperties_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRProperties_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRProperties_FnTable>())).ReadPropertyBatch as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRProperties_FnTable),
            "::",
            stringify!(ReadPropertyBatch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRProperties_FnTable>())).WritePropertyBatch as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRProperties_FnTable),
            "::",
            stringify!(WritePropertyBatch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRProperties_FnTable>())).GetPropErrorNameFromEnum
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRProperties_FnTable),
            "::",
            stringify!(GetPropErrorNameFromEnum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRProperties_FnTable>())).TrackedDeviceToPropertyContainer
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRProperties_FnTable),
            "::",
            stringify!(TrackedDeviceToPropertyContainer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRPaths_FnTable {
    pub ReadPathBatch: ::std::option::Option<
        unsafe extern "C" fn(
            ulRootHandle: PropertyContainerHandle_t,
            pBatch: *mut PathRead_t,
            unBatchEntryCount: u32,
        ) -> ETrackedPropertyError,
    >,
    pub WritePathBatch: ::std::option::Option<
        unsafe extern "C" fn(
            ulRootHandle: PropertyContainerHandle_t,
            pBatch: *mut PathWrite_t,
            unBatchEntryCount: u32,
        ) -> ETrackedPropertyError,
    >,
    pub StringToHandle: ::std::option::Option<
        unsafe extern "C" fn(
            pHandle: *mut PathHandle_t,
            pchPath: *mut ::std::os::raw::c_char,
        ) -> ETrackedPropertyError,
    >,
    pub HandleToString: ::std::option::Option<
        unsafe extern "C" fn(
            pHandle: PathHandle_t,
            pchBuffer: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
            punBufferSizeUsed: *mut u32,
        ) -> ETrackedPropertyError,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRPaths_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRPaths_FnTable>(),
        32usize,
        concat!("Size of: ", stringify!(VR_IVRPaths_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRPaths_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRPaths_FnTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRPaths_FnTable>())).ReadPathBatch as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRPaths_FnTable),
            "::",
            stringify!(ReadPathBatch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRPaths_FnTable>())).WritePathBatch as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRPaths_FnTable),
            "::",
            stringify!(WritePathBatch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRPaths_FnTable>())).StringToHandle as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRPaths_FnTable),
            "::",
            stringify!(StringToHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRPaths_FnTable>())).HandleToString as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRPaths_FnTable),
            "::",
            stringify!(HandleToString)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRBlockQueue_FnTable {
    pub Create: ::std::option::Option<
        unsafe extern "C" fn(
            pulQueueHandle: *mut PropertyContainerHandle_t,
            pchPath: *mut ::std::os::raw::c_char,
            unBlockDataSize: u32,
            unBlockHeaderSize: u32,
            unBlockCount: u32,
        ) -> EBlockQueueError,
    >,
    pub Connect: ::std::option::Option<
        unsafe extern "C" fn(
            pulQueueHandle: *mut PropertyContainerHandle_t,
            pchPath: *mut ::std::os::raw::c_char,
        ) -> EBlockQueueError,
    >,
    pub Destroy: ::std::option::Option<
        unsafe extern "C" fn(ulQueueHandle: PropertyContainerHandle_t) -> EBlockQueueError,
    >,
    pub AcquireWriteOnlyBlock: ::std::option::Option<
        unsafe extern "C" fn(
            ulQueueHandle: PropertyContainerHandle_t,
            pulBlockHandle: *mut PropertyContainerHandle_t,
            ppvBuffer: *mut *mut ::std::os::raw::c_void,
        ) -> EBlockQueueError,
    >,
    pub ReleaseWriteOnlyBlock: ::std::option::Option<
        unsafe extern "C" fn(
            ulQueueHandle: PropertyContainerHandle_t,
            ulBlockHandle: PropertyContainerHandle_t,
        ) -> EBlockQueueError,
    >,
    pub WaitAndAcquireReadOnlyBlock: ::std::option::Option<
        unsafe extern "C" fn(
            ulQueueHandle: PropertyContainerHandle_t,
            pulBlockHandle: *mut PropertyContainerHandle_t,
            ppvBuffer: *mut *mut ::std::os::raw::c_void,
            eReadType: EBlockQueueReadType,
            unTimeoutMs: u32,
        ) -> EBlockQueueError,
    >,
    pub AcquireReadOnlyBlock: ::std::option::Option<
        unsafe extern "C" fn(
            ulQueueHandle: PropertyContainerHandle_t,
            pulBlockHandle: *mut PropertyContainerHandle_t,
            ppvBuffer: *mut *mut ::std::os::raw::c_void,
            eReadType: EBlockQueueReadType,
        ) -> EBlockQueueError,
    >,
    pub ReleaseReadOnlyBlock: ::std::option::Option<
        unsafe extern "C" fn(
            ulQueueHandle: PropertyContainerHandle_t,
            ulBlockHandle: PropertyContainerHandle_t,
        ) -> EBlockQueueError,
    >,
    pub QueueHasReader: ::std::option::Option<
        unsafe extern "C" fn(
            ulQueueHandle: PropertyContainerHandle_t,
            pbHasReaders: *mut bool,
        ) -> EBlockQueueError,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRBlockQueue_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRBlockQueue_FnTable>(),
        72usize,
        concat!("Size of: ", stringify!(VR_IVRBlockQueue_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRBlockQueue_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRBlockQueue_FnTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VR_IVRBlockQueue_FnTable>())).Create as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRBlockQueue_FnTable),
            "::",
            stringify!(Create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRBlockQueue_FnTable>())).Connect as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRBlockQueue_FnTable),
            "::",
            stringify!(Connect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRBlockQueue_FnTable>())).Destroy as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRBlockQueue_FnTable),
            "::",
            stringify!(Destroy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRBlockQueue_FnTable>())).AcquireWriteOnlyBlock as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRBlockQueue_FnTable),
            "::",
            stringify!(AcquireWriteOnlyBlock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRBlockQueue_FnTable>())).ReleaseWriteOnlyBlock as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRBlockQueue_FnTable),
            "::",
            stringify!(ReleaseWriteOnlyBlock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRBlockQueue_FnTable>())).WaitAndAcquireReadOnlyBlock
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRBlockQueue_FnTable),
            "::",
            stringify!(WaitAndAcquireReadOnlyBlock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRBlockQueue_FnTable>())).AcquireReadOnlyBlock as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRBlockQueue_FnTable),
            "::",
            stringify!(AcquireReadOnlyBlock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRBlockQueue_FnTable>())).ReleaseReadOnlyBlock as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRBlockQueue_FnTable),
            "::",
            stringify!(ReleaseReadOnlyBlock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<VR_IVRBlockQueue_FnTable>())).QueueHasReader as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VR_IVRBlockQueue_FnTable),
            "::",
            stringify!(QueueHasReader)
        )
    );
}
extern "C" {
    pub fn VR_InitInternal(peError: *mut EVRInitError, eType: EVRApplicationType) -> isize;
}
extern "C" {
    pub fn VR_ShutdownInternal();
}
extern "C" {
    pub fn VR_IsHmdPresent() -> bool;
}
extern "C" {
    pub fn VR_GetGenericInterface(
        pchInterfaceVersion: *const ::std::os::raw::c_char,
        peError: *mut EVRInitError,
    ) -> isize;
}
extern "C" {
    pub fn VR_IsRuntimeInstalled() -> bool;
}
extern "C" {
    pub fn VR_GetVRInitErrorAsSymbol(error: EVRInitError) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn VR_GetVRInitErrorAsEnglishDescription(
        error: EVRInitError,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDevice_T {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevice_T {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkInstance_T {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueue_T {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12Resource {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12CommandQueue {
    pub _address: u8,
}
